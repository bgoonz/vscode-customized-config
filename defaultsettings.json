{
	// Specifies the style of the gravatar default (fallback) images
	//  - identicon: A geometric pattern
	//  - mp: A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)
	//  - monsterid: A monster with different colors, faces, etc
	//  - retro: 8-bit arcade-style pixelated faces
	//  - robohash: A robot with different colors, faces, etc
	//  - wavatar: A face with differing features and backgrounds
	"gitlens.defaultGravatarsStyle": "robohash",

	// Specifies whether the file annotations button in the editor title shows a menu or immediately toggles the specified file annotations
	//  - null: Shows a menu to choose which file annotations to toggle
	//  - blame: Toggles gutter blame annotations
	//  - heatmap: Toggles gutter heatmap annotations
	//  - changes: Toggles gutter changes annotations
	"gitlens.fileAnnotations.command": null,

	// Deprecated. Use the [Insiders edition](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens-insiders) of GitLens instead
	// 
	"gitlens.insiders": null,

	// Specifies how much (if any) output will be sent to the GitLens output channel
	//  - silent: Logs nothing
	//  - errors: Logs only errors
	//  - verbose: Logs all errors, warnings, and messages
	//  - debug: Logs all errors, warnings, and messages with extra context useful for debugging
	"gitlens.outputLevel": "errors",

	// Specifies whether to show the Welcome (Quick Setup) experience on first install
	"gitlens.showWelcomeOnInstall": true,

	// Specifies whether to show the What's New notification after upgrading to new feature releases
	"gitlens.showWhatsNewAfterUpgrades": true,

	// Controls whether the editor shows CodeLens.
	"diffEditor.codeLens": false,

	// When enabled, the diff editor ignores changes in leading or trailing whitespace.
	"diffEditor.ignoreTrimWhitespace": true,

	// Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
	"diffEditor.maxComputationTime": 5000,

	// Maximum file size in MB for which to compute diffs. Use 0 for no limit.
	"diffEditor.maxFileSize": 50,

	// Controls whether the diff editor shows +/- indicators for added/removed changes.
	"diffEditor.renderIndicators": true,

	// Controls whether the diff editor shows the diff side by side or inline.
	"diffEditor.renderSideBySide": true,

	// 
	//  - off: Lines will never wrap.
	//  - on: Lines will wrap at the viewport width.
	//  - inherit: Lines will wrap according to the `editor.wordWrap` setting.
	"diffEditor.wordWrap": "inherit",

	// Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
	"editor.acceptSuggestionOnCommitCharacter": true,

	// Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
	//  - on
	//  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
	//  - off
	"editor.acceptSuggestionOnEnter": "on",

	// Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.
	"editor.accessibilityPageSize": 10,

	// Controls whether the editor should run in a mode where it is optimized for screen readers. Setting to on will disable word wrapping.
	//  - auto: The editor will use platform APIs to detect when a Screen Reader is attached.
	//  - on: The editor will be permanently optimized for usage with a Screen Reader. Word wrapping will be disabled.
	//  - off: The editor will never be optimized for usage with a Screen Reader.
	"editor.accessibilitySupport": "auto",

	// Controls whether the editor should automatically close brackets after the user adds an opening bracket.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose brackets.
	//  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingBrackets": "languageDefined",

	// Controls whether the editor should remove adjacent closing quotes or brackets when deleting.
	//  - always
	//  - auto: Remove adjacent closing quotes or brackets only if they were automatically inserted.
	//  - never
	"editor.autoClosingDelete": "auto",

	// Controls whether the editor should type over closing quotes or brackets.
	//  - always
	//  - auto: Type over closing quotes or brackets only if they were automatically inserted.
	//  - never
	"editor.autoClosingOvertype": "auto",

	// Controls whether the editor should automatically close quotes after the user adds an opening quote.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose quotes.
	//  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingQuotes": "languageDefined",

	// Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
	//  - none: The editor will not insert indentation automatically.
	//  - keep: The editor will keep the current line's indentation.
	//  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
	//  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
	//  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
	"editor.autoIndent": "full",

	// Controls whether the editor should automatically surround selections when typing quotes or brackets.
	//  - languageDefined: Use language configurations to determine when to automatically surround selections.
	//  - quotes: Surround with quotes but not brackets.
	//  - brackets: Surround with brackets but not quotes.
	//  - never
	"editor.autoSurround": "languageDefined",

	// Controls whether bracket pair colorization is enabled or not. Use 'workbench.colorCustomizations' to override the bracket highlight colors.
	"editor.bracketPairColorization.enabled": false,

	// Code action kinds to be run on save.
	"editor.codeActionsOnSave": {},

	// Controls whether the editor shows CodeLens.
	"editor.codeLens": true,

	// Controls the font family for CodeLens.
	"editor.codeLensFontFamily": "",

	// Controls the font size in pixels for CodeLens. When set to `0`, 90% of `editor.fontSize` is used.
	"editor.codeLensFontSize": 0,

	// Controls whether the editor should render the inline color decorators and color picker.
	"editor.colorDecorators": true,

	// Enable that the selection with the mouse and keys is doing column selection.
	"editor.columnSelection": false,

	// Controls if empty lines should be ignored with toggle, add or remove actions for line comments.
	"editor.comments.ignoreEmptyLines": true,

	// Controls whether a space character is inserted when commenting.
	"editor.comments.insertSpace": true,

	// Controls whether syntax highlighting should be copied into the clipboard.
	"editor.copyWithSyntaxHighlighting": true,

	// Control the cursor animation style.
	"editor.cursorBlinking": "blink",

	// Controls whether the smooth caret animation should be enabled.
	"editor.cursorSmoothCaretAnimation": false,

	// Controls the cursor style.
	"editor.cursorStyle": "line",

	// Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.
	"editor.cursorSurroundingLines": 0,

	// Controls when `cursorSurroundingLines` should be enforced.
	//  - default: `cursorSurroundingLines` is enforced only when triggered via the keyboard or API.
	//  - all: `cursorSurroundingLines` is enforced always.
	"editor.cursorSurroundingLinesStyle": "default",

	// Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
	"editor.cursorWidth": 0,

	// Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
	//  - null: None
	//  - HookyQR.beautify: Beautify code in place for VS Code
	//  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring
	//  - orepor.color-tabs-vscode-ext: changes the active tab/status-bar/title-background color based on regex
	//  - zachgawlik.convert-object-to-jsx: Convert between object entry and jsx prop formats
	//  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - alexr00.formatallfilesinworkspace: A silly little extension that opens each of the files in your workspace and formats them using whatever extensions you already have installed for formatting. It is recommended that you set the included file extensions and excluded folder settings before running, as the defaults may not be appropriate for your setup. Warning: Formatting all your files may be slow.
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - jbockle.jbockle-format-files
	//  - yzhang.markdown-all-in-one: All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)
	//  - zaaack.markdown-editor: A full-featured WYSIWYG editor for markdown.
	//  - darkriszty.markdown-table-prettify: Transforms markdown tables to be more readable.
	//  - josee9988.minifyall: Minifier for JSON, CSS, HTML, XML, TWIG, LESS, SASS, SCSS, JavaScript, JSONC, and JavaScriptReact(testing). Compressor of files and folders. You will love its simplicity!
	//  - jithurjacob.nbpreviewer: An easy to use extension for previewing Jupyter Notebooks within VS Code
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
	//  - igress.python-coding-conventions: Apply python coding conventions
	//  - donjayamanne.python-environment-manager: View and manage Python environments & pacakges.
	//  - Bar.python-import-helper: Automatically generate import statements for Python.
	//  - mgesbert.python-path: Python imports utils.
	//  - dongli.python-preview: Provide Preview for Python Execution.
	//  - ms-vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - ms-vscode-remote.remote-ssh-edit: Edit SSH configuration files
	//  - usernamehw.remove-empty-lines: Remove blank lines from document or selection.
	//  - humao.rest-client: REST Client for Visual Studio Code
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
	//  - KevinRose.vsc-python-indent: Correct python indentation.
	//  - batisteo.vscode-django: Beautiful syntax and scoped snippets for perfectionists with deadlines
	//  - ms-azuretools.vscode-docker: Makes it easy to create, manage, and debug containerized applications.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - lacroixdavid1.vscode-format-context-menu: VSCode extension to format multiple files with right click context menu
	//  - sburg.vscode-javascript-booster: Boost your productivity with advanced JavaScript/TypeScript refactorings and commands
	//  - xyc.vscode-mdx-preview: MDX Preview
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - franneck94.vscode-python-config: Creates all needed config files for simple Python projects.
	//  - HitkoDev.vscode-remark-hugo: Remark-based code formatter for Hugo markdown
	//  - mrmlnc.vscode-scss: Advanced autocompletion and refactoring support for SCSS
	//  - rangav.vscode-thunder-client: Lightweight Rest API Client for VS Code
	//  - redhat.vscode-yaml: YAML Language Support by Red Hat, with built-in Kubernetes syntax support
	//  - antfu.auto-npx: Auto resolving local Node.js binaries in VS Code terminal
	//  - ms-vscode.azure-account: A common Sign-In and Subscription management extension for VS Code.
	//  - Shan.code-settings-sync: Synchronize Settings, Snippets, Themes, File Icons, Launch, Keybindings, Workspaces and Extensions Across Multiple Machines Using GitHub Gist.
	//  - streetsidesoftware.code-spell-checker: Spelling checker for source code
	//  - GitHub.codespaces: Your instant dev environment
	//  - codespaces-contrib.codeswing: Interactive coding playground for building web applications (aka swings).
	//  - vsls-contrib.codetour: VS Code extension that allows you to record and playback guided tours of codebases, directly within the editor
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - GitHub.copilot: Your AI pair programmer
	//  - yeet-bix.create-react-component-vscode: ⚛️⚡Generate React Component Boilerplate
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - docsmsft.docs-markdown: Docs Markdown Extension
	//  - mitchdenny.ecdc: An extension for Visual Studio Code that allows you to quickly convert text selections.
	//  - vscode.emmet: Emmet support for VS Code
	//  - ysemeniuk.emmet-live: Expand your Emmet abbreviations dynamically
	//  - idered.figma: Explore Figma designs without leaving your editor.
	//  - GrapeCity.gc-excelviewer: View Excel spreadsheets and CSV files within Visual Studio Code and VS Code for the Web.
	//  - vscode.git: Git SCM Integration
	//  - vscode.git-base: Git static contributions and pickers.
	//  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
	//  - felipecaputo.git-project-manager: Allows you to change easily between git projects.
	//  - vscode.github-authentication: GitHub Authentication Provider
	//  - eamodio.gitlens: Supercharge the Git capabilities built into Visual Studio Code — Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more
	//  - gitpod.gitpod-desktop: Gitpod Support
	//  - nhoizey.gremlins: Reveals some characters that can be harmful because they are invisible or looking like legitimate ones. Inspired by Sublime Gremlins.
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - iceworks-team.iceworks-generator: Easily create React/Rax boilerplate code.
	//  - vscode.image-preview: Provides VS Code's built-in image preview
	//  - brunnerh.insert-unicode: Search for unicode characters and insert them into documents.
	//  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - RandomFractalsInc.js-notebook-inspector: JS Notebook 📓 Inspector 🕵️ -> vscode extension for Interactive Preview of Observable JS Notebooks 📚 & Notebook 📓 Nodes ⎇ & Cells ⌗ source code.
	//  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
	//  - hdg.live-html-previewer: Edit and preview HTML documents in VS Code
	//  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
	//  - bierner.markdown-emoji: Adds emoji syntax support to VS Code's built-in markdown preview
	//  - jebbs.markdown-extended: Extended syntaxes to built-in markdown & What you see is what you get exporter.
	//  - vscode.markdown-math: Adds math support to Markdown in notebooks.
	//  - bierner.markdown-mermaid: Adds Mermaid diagram and flowchart support to VS Code's builtin markdown preview
	//  - shd101wyy.markdown-preview-enhanced: Markdown Preview Enhanced ported to vscode
	//  - bierner.markdown-preview-github-styles: Changes VS Code's built-in markdown preview to match Github's style
	//  - mdickin.markdown-shortcuts: Shortcuts for Markdown editing
	//  - gera2ld.markmap-vscode: Visualize your markdown in VSCode
	//  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
	//  - dennisvhest.npm-browser: Easily search, install and keep track of NPM packages from within Visual Studio Code.
	//  - christian-kohler.npm-intellisense: Visual Studio Code plugin that autocompletes npm modules in import statements
	//  - Liu-Yongle.paste-image-to-markdown: Paste Image To Markdown From system clipboard.
	//  - jefoce.react-context-menu: Adds react helpers to explorer menu
	//  - rishikeshgaikar.react-native-boilerplate: Best way to structure any react-native application.
	//  - fabio-moretti.redux-helper: This is a plugin for creating Redux boilerplate code at ease
	//  - ms-vscode-remote.remote-containers: Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.
	//  - ms-vscode-remote.remote-ssh: Open any folder on a remote machine using SSH and take advantage of VS Code's full feature set.
	//  - ms-vscode-remote.remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL) and take advantage of Visual Studio Code's full feature set.
	//  - ms-vscode-remote.remote-wsl-recommender: Recommends using the Windows Subsystem for Linux (WSL) and the Remote WSL extension.
	//  - kortina.run-in-terminal: Use a keyboard shortcut to run any command in the Integrated Terminal.
	//  - vscode.simple-browser: A very basic built-in webview for displaying web content.
	//  - ms-vscode.test-adapter-converter: Converter extension from the Test Adapter UI to native VS Code testing
	//  - shardulm94.trailing-spaces: Highlight trailing spaces and delete them in a flash!
	//  - figstack.vsc: Your intelligent coding companion
	//  - ms-azuretools.vscode-azureappservice: An Azure App Service management extension for Visual Studio Code.
	//  - ms-azuretools.vscode-azurefunctions: An Azure Functions extension for Visual Studio Code.
	//  - ms-azuretools.vscode-azureresourcegroups: An extension for viewing and managing Azure resources.
	//  - ms-dotnettools.vscode-dotnet-runtime: Allows acquisition of the .NET runtime specifically for VS Code extension authors.
	//  - ms-dotnettools.vscode-dotnet-sdk: Allows acquisition of the .NET SDK.
	//  - ms-vscode.vscode-github-issue-notebooks: GitHub Issue Notebooks for VS Code
	//  - orkhanjafarovr.vscode-here-and-now: Install/remove your npm-packages directly from code
	//  - eliostruyf.vscode-hide-comments: VSCode extension for people that do not like to see comments in the code. It allows you to hide/show comments in the code.
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - jeremyrajan.vscode-lebab: Convert es5 to es6/7 syntax
	//  - jeepshen.vscode-markdown-code-runner: Run markdown code snippets.
	//  - DavidAnson.vscode-markdownlint: Markdown linting and style checking for Visual Studio Code
	//  - fknop.vscode-npm: npm commands for VSCode
	//  - eg2.vscode-npm-script: npm support for VS Code
	//  - jianglinghao.vscode-npm-scripts: View and run NPM scripts in the sidebar.
	//  - traBpUkciP.vscode-npm-scripts: View and run NPM scripts in the sidebar.
	//  - cweijan.vscode-office: View word,excel files and using WYSIWYG editor for markdown.
	//  - mushan.vscode-paste-image: paste image from clipboard directly
	//  - littlefoxteam.vscode-python-test-adapter: Run your Python tests in the Sidebar of Visual Studio Code
	//  - hbenl.vscode-test-explorer: Run your tests in the Sidebar of Visual Studio Code
	//  - lostintangent.wikilens: Provides a wiki-like markdown editor for taking notes and building knowledge bases.
	//  - AnchovyStudios.zip-extract-all: Extract all zip files inside a folder
	"editor.defaultFormatter": null,

	// Controls whether the Go to Definition mouse gesture always opens the peek widget.
	"editor.definitionLinkOpensInPeek": false,

	// Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
	"editor.detectIndentation": true,

	// Controls whether the editor should allow moving selections via drag and drop.
	"editor.dragAndDrop": true,

	// Controls whether copying without a selection copies the current line.
	"editor.emptySelectionClipboard": true,

	// Scrolling speed multiplier when pressing `Alt`.
	"editor.fastScrollSensitivity": 5,

	// Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
	"editor.find.addExtraSpaceOnTop": true,

	// Controls the condition for turning on Find in Selection automatically.
	//  - never: Never turn on Find in Selection automatically (default).
	//  - always: Always turn on Find in Selection automatically.
	//  - multiline: Turn on Find in Selection automatically when multiple lines of content are selected.
	"editor.find.autoFindInSelection": "never",

	// Controls whether the cursor should jump to find matches while typing.
	"editor.find.cursorMoveOnType": true,

	// Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.
	"editor.find.loop": true,

	// Controls whether the search string in the Find Widget is seeded from the editor selection.
	//  - never: Never seed search string from the editor selection.
	//  - always: Always seed search string from the editor selection, including word at cursor position.
	//  - selection: Only seed search string from the editor selection.
	"editor.find.seedSearchStringFromSelection": "always",

	// Controls whether the editor has code folding enabled.
	"editor.folding": true,

	// Controls whether the editor should highlight folded ranges.
	"editor.foldingHighlight": true,

	// Controls whether the editor automatically collapses import ranges.
	"editor.foldingImportsByDefault": false,

	// The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.
	"editor.foldingMaximumRegions": 5000,

	// Controls the strategy for computing folding ranges.
	//  - auto: Use a language-specific folding strategy if available, else the indentation-based one.
	//  - indentation: Use the indentation-based folding strategy.
	"editor.foldingStrategy": "auto",

	// Controls the font family.
	"editor.fontFamily": "Consolas, 'Courier New', monospace",

	// Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.
	"editor.fontLigatures": false,

	// Controls the font size in pixels.
	"editor.fontSize": 14,

	// Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"editor.fontWeight": "normal",

	// Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
	"editor.formatOnPaste": false,

	// Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
	"editor.formatOnSave": false,

	// Controls if format on save formats the whole file or only modifications. Only applies when `editor.formatOnSave` is enabled.
	//  - file: Format the whole file.
	//  - modifications: Format modifications (requires source control).
	//  - modificationsIfAvailable: Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted.
	"editor.formatOnSaveMode": "file",

	// Controls whether the editor should automatically format the line after typing.
	"editor.formatOnType": false,

	// Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
	"editor.glyphMargin": true,

	// Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

	// Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

	// Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
	"editor.gotoLocation.alternativeImplementationCommand": "",

	// Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
	"editor.gotoLocation.alternativeReferenceCommand": "",

	// Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

	// This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.
	// 
	"editor.gotoLocation.multiple": null,

	// Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleDeclarations": "peek",

	// Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleDefinitions": "peek",

	// Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleImplementations": "peek",

	// Controls the behavior the 'Go to References'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleReferences": "peek",

	// Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleTypeDefinitions": "peek",

	// Controls whether bracket pair guides are enabled or not.
	//  - true: Enables bracket pair guides.
	//  - active: Enables bracket pair guides only for the active bracket pair.
	//  - false: Disables bracket pair guides.
	"editor.guides.bracketPairs": false,

	// Controls whether horizontal bracket pair guides are enabled or not.
	//  - true: Enables horizontal guides as addition to vertical bracket pair guides.
	//  - active: Enables horizontal guides only for the active bracket pair.
	//  - false: Disables horizontal bracket pair guides.
	"editor.guides.bracketPairsHorizontal": "active",

	// Controls whether bracket pair guides are enabled or not.
	"editor.guides.highlightActiveBracketPair": true,

	// Controls whether the editor should highlight the active indent guide.
	"editor.guides.highlightActiveIndentation": true,

	// Controls whether the editor should render indent guides.
	"editor.guides.indentation": true,

	// Controls whether the cursor should be hidden in the overview ruler.
	"editor.hideCursorInOverviewRuler": false,

	// Prefer showing hovers above the line, if there's space.
	"editor.hover.above": true,

	// Controls the delay in milliseconds after which the hover is shown.
	"editor.hover.delay": 300,

	// Controls whether the hover is shown.
	"editor.hover.enabled": true,

	// Controls whether the hover should remain visible when mouse is moved over it.
	"editor.hover.sticky": true,

	// Enables the inlay hints in the editor.
	"editor.inlayHints.enabled": true,

	// Controls font family of inlay hints in the editor. When set to empty, the `editor.fontFamily` is used.
	"editor.inlayHints.fontFamily": "",

	// Controls font size of inlay hints in the editor. A default of 90% of `editor.fontSize` is used when the configured value is less than `5` or greater than the editor font size.
	"editor.inlayHints.fontSize": 0,

	// Controls whether to automatically show inline suggestions in the editor.
	"editor.inlineSuggest.enabled": true,

	// Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.insertSpaces": true,

	// Defines the bracket symbols that increase or decrease the indentation.
	"editor.language.brackets": false,

	// Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.
	"editor.language.colorizedBracketPairs": false,

	// Special handling for large files to disable certain memory intensive features.
	"editor.largeFileOptimizations": true,

	// Controls the letter spacing in pixels.
	"editor.letterSpacing": 0,

	// Enables the code action lightbulb in the editor.
	"editor.lightbulb.enabled": true,

	// Controls the line height. 
	//  - Use 0 to automatically compute the line height from the font size.
	//  - Values between 0 and 8 will be used as a multiplier with the font size.
	//  - Values greater than or equal to 8 will be used as effective values.
	"editor.lineHeight": 0,

	// Controls the display of line numbers.
	//  - off: Line numbers are not rendered.
	//  - on: Line numbers are rendered as absolute number.
	//  - relative: Line numbers are rendered as distance in lines to cursor position.
	//  - interval: Line numbers are rendered every 10 lines.
	"editor.lineNumbers": "on",

	// Controls whether the editor has linked editing enabled. Depending on the language, related symbols, e.g. HTML tags, are updated while editing.
	"editor.linkedEditing": false,

	// Controls whether the editor should detect links and make them clickable.
	"editor.links": true,

	// Highlight matching brackets.
	"editor.matchBrackets": "always",

	// Lines above this length will not be tokenized for performance reasons
	"editor.maxTokenizationLineLength": 20000,

	// Controls whether the minimap is shown.
	"editor.minimap.enabled": true,

	// Limit the width of the minimap to render at most a certain number of columns.
	"editor.minimap.maxColumn": 120,

	// Render the actual characters on a line as opposed to color blocks.
	"editor.minimap.renderCharacters": true,

	// Scale of content drawn in the minimap: 1, 2 or 3.
	"editor.minimap.scale": 1,

	// Controls when the minimap slider is shown.
	"editor.minimap.showSlider": "mouseover",

	// Controls the side where to render the minimap.
	"editor.minimap.side": "right",

	// Controls the size of the minimap.
	//  - proportional: The minimap has the same size as the editor contents (and might scroll).
	//  - fill: The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).
	//  - fit: The minimap will shrink as necessary to never be larger than the editor (no scrolling).
	"editor.minimap.size": "proportional",

	// A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
	"editor.mouseWheelScrollSensitivity": 1,

	// Zoom the font of the editor when using mouse wheel and holding `Ctrl`.
	"editor.mouseWheelZoom": false,

	// Merge multiple cursors when they are overlapping.
	"editor.multiCursorMergeOverlapping": true,

	// The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"editor.multiCursorModifier": "alt",

	// Controls pasting when the line count of the pasted text matches the cursor count.
	//  - spread: Each cursor pastes a single line of the text.
	//  - full: Each cursor pastes the full text.
	"editor.multiCursorPaste": "spread",

	// Controls whether the editor should highlight semantic symbol occurrences.
	"editor.occurrencesHighlight": true,

	// Controls whether a border should be drawn around the overview ruler.
	"editor.overviewRulerBorder": true,

	// Controls the amount of space between the bottom edge of the editor and the last line.
	"editor.padding.bottom": 0,

	// Controls the amount of space between the top edge of the editor and the first line.
	"editor.padding.top": 0,

	// Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
	"editor.parameterHints.cycle": false,

	// Enables a pop-up that shows parameter documentation and type information as you type.
	"editor.parameterHints.enabled": true,

	// Controls whether to focus the inline editor or the tree in the peek widget.
	//  - tree: Focus the tree when opening peek
	//  - editor: Focus the editor when opening peek
	"editor.peekWidgetDefaultFocus": "tree",

	// Controls whether suggestions should automatically show up while typing.
	"editor.quickSuggestions": {
		"other": true,
		"comments": false,
		"strings": false
	},

	// Controls the delay in milliseconds after which quick suggestions will show up.
	"editor.quickSuggestionsDelay": 10,

	// Enable/disable the ability to preview changes before renaming
	"editor.rename.enablePreview": true,

	// Deprecated, use `editor.linkedEditing` instead.
	// Controls whether the editor auto renames on type.
	"editor.renameOnType": false,

	// Controls whether the editor should render control characters.
	"editor.renderControlCharacters": true,

	// Render last line number when the file ends with a newline.
	"editor.renderFinalNewline": true,

	// Controls how the editor should render the current line highlight.
	//  - none
	//  - gutter
	//  - line
	//  - all: Highlights both the gutter and the current line.
	"editor.renderLineHighlight": "line",

	// Controls if the editor should render the current line highlight only when the editor is focused.
	"editor.renderLineHighlightOnlyWhenFocus": false,

	// Controls how the editor should render whitespace characters.
	//  - none
	//  - boundary: Render whitespace characters except for single spaces between words.
	//  - selection: Render whitespace characters only on selected text.
	//  - trailing: Render only trailing whitespace characters.
	//  - all
	"editor.renderWhitespace": "selection",

	// Controls whether selections should have rounded corners.
	"editor.roundedSelection": true,

	// Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
	"editor.rulers": [],

	// Controls the visibility of the horizontal scrollbar.
	//  - auto: The horizontal scrollbar will be visible only when necessary.
	//  - visible: The horizontal scrollbar will always be visible.
	//  - hidden: The horizontal scrollbar will always be hidden.
	"editor.scrollbar.horizontal": "auto",

	// The height of the horizontal scrollbar.
	"editor.scrollbar.horizontalScrollbarSize": 12,

	// Controls whether clicks scroll by page or jump to click position.
	"editor.scrollbar.scrollByPage": false,

	// Controls the visibility of the vertical scrollbar.
	//  - auto: The vertical scrollbar will be visible only when necessary.
	//  - visible: The vertical scrollbar will always be visible.
	//  - hidden: The vertical scrollbar will always be hidden.
	"editor.scrollbar.vertical": "auto",

	// The width of the vertical scrollbar.
	"editor.scrollbar.verticalScrollbarSize": 14,

	// Controls the number of extra characters beyond which the editor will scroll horizontally.
	"editor.scrollBeyondLastColumn": 5,

	// Controls whether the editor will scroll beyond the last line.
	"editor.scrollBeyondLastLine": true,

	// Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
	"editor.scrollPredominantAxis": true,

	// Controls whether the editor should highlight matches similar to the selection.
	"editor.selectionHighlight": true,

	// Controls whether the semanticHighlighting is shown for the languages that support it.
	//  - true: Semantic highlighting enabled for all color themes.
	//  - false: Semantic highlighting disabled for all color themes.
	//  - configuredByTheme: Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.
	"editor.semanticHighlighting.enabled": "configuredByTheme",

	// Overrides editor semantic token color and styles from the currently selected color theme.
	"editor.semanticTokenColorCustomizations": {},

	// Controls strikethrough deprecated variables.
	"editor.showDeprecated": true,

	// Controls when the folding controls on the gutter are shown.
	//  - always: Always show the folding controls.
	//  - mouseover: Only show the folding controls when the mouse is over the gutter.
	"editor.showFoldingControls": "mouseover",

	// Controls fading out of unused code.
	"editor.showUnused": true,

	// Whether leading and trailing whitespace should always be selected.
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

	// Controls whether the editor will scroll using an animation.
	"editor.smoothScrolling": false,

	// Controls whether snippets are shown with other suggestions and how they are sorted.
	//  - top: Show snippet suggestions on top of other suggestions.
	//  - bottom: Show snippet suggestions below other suggestions.
	//  - inline: Show snippets suggestions with other suggestions.
	//  - none: Do not show snippet suggestions.
	"editor.snippetSuggestions": "inline",

	// Keep peek editors open even when double clicking their content or when hitting `Escape`.
	"editor.stablePeek": false,

	// Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.
	"editor.stickyTabStops": false,

	// This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.
	// 
	"editor.suggest.filteredTypes": {},

	// Controls whether filtering and sorting suggestions accounts for small typos.
	"editor.suggest.filterGraceful": true,

	// Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
	//  - insert: Insert suggestion without overwriting text right of the cursor.
	//  - replace: Insert suggestion and overwrite text right of the cursor.
	"editor.suggest.insertMode": "insert",

	// Controls whether sorting favors words that appear close to the cursor.
	"editor.suggest.localityBonus": false,

	// This setting is deprecated. The suggest widget can now be resized.
	// 
	"editor.suggest.maxVisibleSuggestions": 0,

	// Controls whether to preview the suggestion outcome in the editor.
	"editor.suggest.preview": false,

	// Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
	"editor.suggest.shareSuggestSelections": false,

	// When enabled IntelliSense shows `class`-suggestions.
	"editor.suggest.showClasses": true,

	// When enabled IntelliSense shows `color`-suggestions.
	"editor.suggest.showColors": true,

	// When enabled IntelliSense shows `constant`-suggestions.
	"editor.suggest.showConstants": true,

	// When enabled IntelliSense shows `constructor`-suggestions.
	"editor.suggest.showConstructors": true,

	// When enabled IntelliSense shows `customcolor`-suggestions.
	"editor.suggest.showCustomcolors": true,

	// When enabled IntelliSense shows `deprecated`-suggestions.
	"editor.suggest.showDeprecated": true,

	// When enabled IntelliSense shows `enumMember`-suggestions.
	"editor.suggest.showEnumMembers": true,

	// When enabled IntelliSense shows `enum`-suggestions.
	"editor.suggest.showEnums": true,

	// When enabled IntelliSense shows `event`-suggestions.
	"editor.suggest.showEvents": true,

	// When enabled IntelliSense shows `field`-suggestions.
	"editor.suggest.showFields": true,

	// When enabled IntelliSense shows `file`-suggestions.
	"editor.suggest.showFiles": true,

	// When enabled IntelliSense shows `folder`-suggestions.
	"editor.suggest.showFolders": true,

	// When enabled IntelliSense shows `function`-suggestions.
	"editor.suggest.showFunctions": true,

	// Controls whether to show or hide icons in suggestions.
	"editor.suggest.showIcons": true,

	// Controls whether suggest details show inline with the label or only in the details widget
	"editor.suggest.showInlineDetails": true,

	// When enabled IntelliSense shows `interface`-suggestions.
	"editor.suggest.showInterfaces": true,

	// When enabled IntelliSense shows `issues`-suggestions.
	"editor.suggest.showIssues": true,

	// When enabled IntelliSense shows `keyword`-suggestions.
	"editor.suggest.showKeywords": true,

	// When enabled IntelliSense shows `method`-suggestions.
	"editor.suggest.showMethods": true,

	// When enabled IntelliSense shows `module`-suggestions.
	"editor.suggest.showModules": true,

	// When enabled IntelliSense shows `operator`-suggestions.
	"editor.suggest.showOperators": true,

	// When enabled IntelliSense shows `property`-suggestions.
	"editor.suggest.showProperties": true,

	// When enabled IntelliSense shows `reference`-suggestions.
	"editor.suggest.showReferences": true,

	// When enabled IntelliSense shows `snippet`-suggestions.
	"editor.suggest.showSnippets": true,

	// Controls the visibility of the status bar at the bottom of the suggest widget.
	"editor.suggest.showStatusBar": false,

	// When enabled IntelliSense shows `struct`-suggestions.
	"editor.suggest.showStructs": true,

	// When enabled IntelliSense shows `typeParameter`-suggestions.
	"editor.suggest.showTypeParameters": true,

	// When enabled IntelliSense shows `unit`-suggestions.
	"editor.suggest.showUnits": true,

	// When enabled IntelliSense shows `user`-suggestions.
	"editor.suggest.showUsers": true,

	// When enabled IntelliSense shows `value`-suggestions.
	"editor.suggest.showValues": true,

	// When enabled IntelliSense shows `variable`-suggestions.
	"editor.suggest.showVariables": true,

	// When enabled IntelliSense shows `text`-suggestions.
	"editor.suggest.showWords": true,

	// Controls whether an active snippet prevents quick suggestions.
	"editor.suggest.snippetsPreventQuickSuggestions": true,

	// Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
	"editor.suggestFontSize": 0,

	// Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used. The minimum value is 8.
	"editor.suggestLineHeight": 0,

	// Controls whether suggestions should automatically show up when typing trigger characters.
	"editor.suggestOnTriggerCharacters": true,

	// Controls how suggestions are pre-selected when showing the suggest list.
	//  - first: Always select the first suggestion.
	//  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
	//  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
	"editor.suggestSelection": "first",

	// Enables tab completions.
	//  - on: Tab complete will insert the best matching suggestion when pressing tab.
	//  - off: Disable tab completions.
	//  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
	"editor.tabCompletion": "off",

	// The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.tabSize": 4,

	// Overrides editor syntax colors and font style from the currently selected color theme.
	"editor.tokenColorCustomizations": {},

	// Remove trailing auto inserted whitespace.
	"editor.trimAutoWhitespace": true,

	// Controls whether clicking on the empty content after a folded line will unfold the line.
	"editor.unfoldOnClickAfterEndOfLine": false,

	// Defines allowed characters that are not being highlighted.
	"editor.unicodeHighlight.allowedCharacters": {},

	// Unicode characters that are common in allowed locales are not being highlighted.
	"editor.unicodeHighlight.allowedLocales": {
		"_os": true,
		"_vscode": true
	},

	// Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.
	"editor.unicodeHighlight.ambiguousCharacters": true,

	// Controls whether characters in comments should also be subject to unicode highlighting.
	"editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",

	// Controls whether characters in strings should also be subject to unicode highlighting.
	"editor.unicodeHighlight.includeStrings": true,

	// Controls whether characters that just reserve space or have no width at all are highlighted.
	"editor.unicodeHighlight.invisibleCharacters": true,

	// Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.
	"editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",

	// Remove unusual line terminators that might cause problems.
	//  - auto: Unusual line terminators are automatically removed.
	//  - off: Unusual line terminators are ignored.
	//  - prompt: Unusual line terminators prompt to be removed.
	"editor.unusualLineTerminators": "prompt",

	// Inserting and deleting whitespace follows tab stops.
	"editor.useTabStops": true,

	// Controls whether completions should be computed based on words in the document.
	"editor.wordBasedSuggestions": true,

	// Controls from which documents word based completions are computed.
	//  - currentDocument: Only suggest words from the active document.
	//  - matchingDocuments: Suggest words from all open documents of the same language.
	//  - allDocuments: Suggest words from all open documents.
	"editor.wordBasedSuggestionsMode": "matchingDocuments",

	// Characters that will be used as word separators when doing word related navigations or operations.
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

	// Controls how lines should wrap.
	//  - off: Lines will never wrap.
	//  - on: Lines will wrap at the viewport width.
	//  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
	//  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
	"editor.wordWrap": "off",

	// Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
	"editor.wordWrapColumn": 80,

	// Controls the indentation of wrapped lines.
	//  - none: No indentation. Wrapped lines begin at column 1.
	//  - same: Wrapped lines get the same indentation as the parent.
	//  - indent: Wrapped lines get +1 indentation toward the parent.
	//  - deepIndent: Wrapped lines get +2 indentation toward the parent.
	"editor.wrappingIndent": "same",

	// Controls the algorithm that computes wrapping points.
	//  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
	//  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
	"editor.wrappingStrategy": "simple",

	// Controls whether inline actions are always visible in the Source Control view.
	"scm.alwaysShowActions": false,

	// Controls whether repositories should always be visible in the SCM view.
	"scm.alwaysShowRepositories": false,

	// Controls whether the SCM view should automatically reveal and select files when opening them.
	"scm.autoReveal": true,

	// Controls the count badge on the Source Control icon on the Activity Bar.
	//  - all: Show the sum of all Source Control Provider count badges.
	//  - focused: Show the count badge of the focused Source Control Provider.
	//  - off: Disable the Source Control count badge.
	"scm.countBadge": "all",

	// Controls the default Source Control repository view mode.
	//  - tree: Show the repository changes as a tree.
	//  - list: Show the repository changes as a list.
	"scm.defaultViewMode": "list",

	// Controls the default Source Control repository sort mode.
	//  - name: Sort the repository changes by file name.
	//  - path: Sort the repository changes by path.
	//  - status: Sort the repository changes by SCM status.
	"scm.defaultViewSortKey": "path",

	// Controls diff decorations in the editor.
	//  - all: Show the diff decorations in all available locations.
	//  - gutter: Show the diff decorations only in the editor gutter.
	//  - overview: Show the diff decorations only in the overview ruler.
	//  - minimap: Show the diff decorations only in the minimap.
	//  - none: Do not show the diff decorations.
	"scm.diffDecorations": "all",

	// Controls the behavior of Source Control diff gutter decorations.
	//  - diff: Show the inline diff peek view on click.
	//  - none: Do nothing.
	"scm.diffDecorationsGutterAction": "diff",

	// Controls the visibility of the Source Control diff decorator in the gutter.
	//  - always: Show the diff decorator in the gutter at all times.
	//  - hover: Show the diff decorator in the gutter only on hover.
	"scm.diffDecorationsGutterVisibility": "always",

	// Controls the width(px) of diff decorations in gutter (added & modified).
	"scm.diffDecorationsGutterWidth": 3,

	// Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations.
	//  - true: Ignore leading and trailing whitespace.
	//  - false: Do not ignore leading and trailing whitespace.
	//  - inherit: Inherit from `diffEditor.ignoreTrimWhitespace`.
	"scm.diffDecorationsIgnoreTrimWhitespace": "false",

	// Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `editor.fontFamily`'s value, or a custom font family.
	"scm.inputFontFamily": "default",

	// Controls the font size for the input message in pixels.
	"scm.inputFontSize": 13,

	// Controls the count badges on Source Control Provider headers. These headers only appear when there is more than one provider.
	//  - hidden: Hide Source Control Provider count badges.
	//  - auto: Only show count badge for Source Control Provider when non-zero.
	//  - visible: Show Source Control Provider count badges.
	"scm.providerCountBadge": "hidden",

	// Controls how many repositories are visible in the Source Control Repositories section. Set to `0` to be able to manually resize the view.
	"scm.repositories.visible": 10,

	// Controls whether an action button can be shown in the SCM view.
	"scm.showActionButton": true,

	// Controls when the restricted mode banner is shown.
	//  - always: Show the banner every time an untrusted workspace is open.
	//  - untilDismissed: Show the banner when an untrusted workspace is opened until dismissed.
	//  - never: Do not show the banner when an untrusted workspace is open.
	"security.workspace.trust.banner": "untilDismissed",

	// Controls whether or not the empty window is trusted by default within VS Code. When used with `security.workspace.trust.untrustedFiles`, you can enable the full functionality of VS Code without prompting in an empty window.
	"security.workspace.trust.emptyWindow": true,

	// Controls whether or not workspace trust is enabled within VS Code.
	"security.workspace.trust.enabled": true,

	// Controls when the startup prompt to trust a workspace is shown.
	//  - always: Ask for trust every time an untrusted workspace is opened.
	//  - once: Ask for trust the first time an untrusted workspace is opened.
	//  - never: Do not ask for trust when an untrusted workspace is opened.
	"security.workspace.trust.startupPrompt": "once",

	// Controls how to handle opening untrusted files in a trusted workspace. This setting also applies to opening files in an empty window which is trusted via `security.workspace.trust.emptyWindow`.
	//  - prompt: Ask how to handle untrusted files for each workspace. Once untrusted files are introduced to a trusted workspace, you will not be prompted again.
	//  - open: Always allow untrusted files to be introduced to a trusted workspace without prompting.
	//  - newWindow: Always open untrusted files in a separate window in restricted mode without prompting.
	"security.workspace.trust.untrustedFiles": "prompt",

	// Controls the behavior of clicking an activity bar icon in the workbench.
	//  - toggle: Hide the side bar if the clicked item is already visible.
	//  - focus: Focus side bar if the clicked item is already visible.
	"workbench.activityBar.iconClickBehavior": "toggle",

	// Controls the visibility of the activity bar in the workbench.
	"workbench.activityBar.visible": true,

	// Overrides colors from the currently selected color theme.
	"workbench.colorCustomizations": {},

	// Specifies the color theme used in the workbench.
	"workbench.colorTheme": "Default Dark+",

	// Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
	"workbench.commandPalette.history": 50,

	// Controls whether the last typed input to the command palette should be restored when opening it the next time.
	"workbench.commandPalette.preserveInput": false,

	// If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by user gesture (e.g. drag and drop), but not by default. Consequently the active editor in a locked group is less likely to be replaced accidentally with a different editor.
	"workbench.editor.autoLockGroups": {
		"default": false,
		"workbench.input.interactive": false,
		"interactive": false,
		"workbench.editorinputs.searchEditorInput": false,
		"imagePreview.previewEditor": false,
		"jsProfileVisualizer.cpuprofile.table": false,
		"cweijan.officeViewer": false,
		"gc-excelviewer-excel-editor": false,
		"gc-excelviewer-csv-editor": false,
		"cweijan.markdownViewer": false,
		"markmap-vscode.markmap": false,
		"cweijan.htmlViewer": false,
		"cweijan.classViewer": false,
		"gitlens.rebase": false,
		"terminalEditor": true,
		"jupyter-notebook": false,
		"github-issues": false,
		"workbench.editorinputs.sidebysideEditorInput": false,
		"mainThreadWebview-markdown.preview": false
	},

	// Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
	"workbench.editor.centeredLayoutAutoResize": true,

	// Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
	"workbench.editor.closeEmptyGroups": true,

	// Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.
	"workbench.editor.closeOnFileDelete": false,

	// Controls whether editor file decorations should use badges.
	"workbench.editor.decorations.badges": true,

	// Controls whether editor file decorations should use colors.
	"workbench.editor.decorations.colors": true,

	// Controls whether opened editors show as preview editors. Preview editors do not stay open, are reused until explicitly set to be kept open (e.g. via double click or editing), and show file names in italics.
	"workbench.editor.enablePreview": true,

	// Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not stay open, and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
	"workbench.editor.enablePreviewFromCodeNavigation": false,

	// Controls whether editors opened from Quick Open show as preview editors. Preview editors do not stay open, and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
	"workbench.editor.enablePreviewFromQuickOpen": false,

	// Controls whether tabs are closed in most recently used order or from left to right.
	"workbench.editor.focusRecentEditorAfterClose": true,

	// Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.highlightModifiedTabs": false,

	// Controls the format of the label for an editor.
	//  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
	//  - short: Show the name of the file followed by its directory name.
	//  - medium: Show the name of the file followed by its path relative to the workspace folder.
	//  - long: Show the name of the file followed by its absolute path.
	"workbench.editor.labelFormat": "default",

	// Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.
	"workbench.editor.languageDetection": true,

	// Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.
	"workbench.editor.limit.enabled": false,

	// Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
	"workbench.editor.limit.perEditorGroup": false,

	// Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
	"workbench.editor.limit.value": 10,

	// Navigate between open files using mouse buttons four and five if provided.
	"workbench.editor.mouseBackForwardToNavigate": true,

	// Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
	"workbench.editor.openPositioning": "right",

	// Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
	"workbench.editor.openSideBySideDirection": "right",

	// Controls the sizing of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `workbench.editor.showTabs` is disabled.
	//  - normal: A pinned tab inherits the look of non pinned tabs.
	//  - compact: A pinned tab will show in a compact form with only icon or first letter of the editor name.
	//  - shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
	"workbench.editor.pinnedTabSizing": "normal",

	// Restores the last editor view state (e.g. scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the `workbench.editor.sharedViewState` setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.
	"workbench.editor.restoreViewState": true,

	// Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
	"workbench.editor.revealIfOpen": false,

	// Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.scrollToSwitchTabs": false,

	// Preserves the most recent editor view state (e.g. scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group.
	"workbench.editor.sharedViewState": false,

	// Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
	"workbench.editor.showIcons": true,

	// Controls whether opened editors should show in tabs or not.
	"workbench.editor.showTabs": true,

	// Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.
	//  - vertical: Editors are positioned from top to bottom.
	//  - horizontal: Editors are positioned from left to right.
	"workbench.editor.splitInGroupLayout": "horizontal",

	// Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.
	"workbench.editor.splitOnDragAndDrop": true,

	// Controls the sizing of editor groups when splitting them.
	//  - distribute: Splits all the editor groups to equal parts.
	//  - split: Splits the active editor group to equal parts.
	"workbench.editor.splitSizing": "distribute",

	// Controls the position of the editor's tabs close buttons, or disables them when set to 'off'. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.tabCloseButton": "right",

	// Controls the sizing of editor tabs. This value is ignored when `workbench.editor.showTabs` is disabled.
	//  - fit: Always keep tabs large enough to show the full editor label.
	//  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
	"workbench.editor.tabSizing": "fit",

	// Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
	//  - default: The default size.
	//  - large: Increases the size, so it can be grabbed more easily with the mouse.
	"workbench.editor.titleScrollbarSizing": "default",

	// Controls if the untitled hint should be inline text in the editor or a floating button or hidden.
	"workbench.editor.untitled.hint": "text",

	// Controls the format of the label for an untitled editor.
	//  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
	//  - name: The name of the untitled file is not derived from the contents of the file.
	"workbench.editor.untitled.labelFormat": "content",

	// Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.wrapTabs": false,

	// Configure glob patterns to editors (e.g. `"*.hex": "hexEditor.hexEdit"`). These have precedence over the default behavior.
	"workbench.editorAssociations": {},

	// Fetches experiments to run from a Microsoft online service.
	"workbench.enableExperiments": true,

	// Controls whether the layout control button in the custom title bar is enabled.
	"workbench.experimental.layoutControl.enabled": false,

	// Configure the opener to use for external URIs (http, https).
	"workbench.externalUriOpeners": {},

	// Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.
	"workbench.hover.delay": 500,

	// Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
	//  - null: No file icons
	//  - vs-minimal
	//  - vs-seti
	//  - office-material-icon-theme
	//  - material-icon-theme
	"workbench.iconTheme": "vs-seti",

	// Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.
	"workbench.list.automaticKeyboardNavigation": true,

	// Scrolling speed multiplier when pressing `Alt`.
	"workbench.list.fastScrollSensitivity": 5,

	// Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
	"workbench.list.horizontalScrolling": false,

	// Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
	//  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
	//  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
	//  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
	"workbench.list.keyboardNavigation": "highlight",

	// A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
	"workbench.list.mouseWheelScrollSensitivity": 1,

	// The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"workbench.list.multiSelectModifier": "ctrlCmd",

	// Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.
	"workbench.list.openMode": "singleClick",

	// Controls whether lists and trees have smooth scrolling.
	"workbench.list.smoothScrolling": false,

	// Controls the default location of the panel (terminal, debug console, output, problems) in a new workspace. It can either show at the bottom, right, or left of the editor area.
	"workbench.panel.defaultLocation": "bottom",

	// Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.
	//  - always: Always maximize the panel when opening it.
	//  - never: Never maximize the panel when opening it. The panel will open un-maximized.
	//  - preserve: Open the panel to the state that it was in, before it was closed.
	"workbench.panel.opensMaximized": "preserve",

	// Specifies the preferred color theme for dark OS appearance when `window.autoDetectColorScheme` is enabled.
	"workbench.preferredDarkColorTheme": "Default Dark+",

	// Specifies the preferred color theme used in high contrast mode when `window.autoDetectHighContrast` is enabled.
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",

	// Specifies the preferred color theme for light OS appearance when `window.autoDetectColorScheme` is enabled.
	"workbench.preferredLightColorTheme": "Default Light+",

	// Specifies the product icon theme used.
	//  - Default: Default
	//  - material-product-icons
	//  - bootstrap-product-icons
	"workbench.productIconTheme": "Default",

	// Controls whether Quick Open should close automatically once it loses focus.
	"workbench.quickOpen.closeOnFocusLost": true,

	// Controls whether the last typed input to Quick Open should be restored when opening it the next time.
	"workbench.quickOpen.preserveInput": false,

	// Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.
	"workbench.sash.hoverDelay": 300,

	// Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.
	"workbench.sash.size": 4,

	// Determines which settings editor to use by default.
	//  - ui: Use the settings UI editor.
	//  - json: Use the JSON file editor.
	"workbench.settings.editor": "ui",

	// Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
	"workbench.settings.enableNaturalLanguageSearch": true,

	// Controls whether opening keybinding settings also opens an editor showing all default keybindings.
	"workbench.settings.openDefaultKeybindings": false,

	// Controls whether opening settings also opens an editor showing all default settings.
	"workbench.settings.openDefaultSettings": false,

	// Controls the behavior of the settings editor Table of Contents while searching.
	//  - hide: Hide the Table of Contents while searching.
	//  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.
	"workbench.settings.settingsSearchTocBehavior": "filter",

	// Controls whether to use the split JSON editor when editing settings as JSON.
	"workbench.settings.useSplitJSON": false,

	// Controls the location of the sidebar and activity bar. They can either show on the left or right of the workbench.
	"workbench.sideBar.location": "left",

	// Controls which editor is shown at startup, if none are restored from the previous session.
	//  - none: Start without an editor.
	//  - welcomePage: Open the Welcome page, with content to aid in getting started with VS Code and extensions.
	//  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.
	//  - newUntitledFile: Open a new untitled file (only applies when opening an empty window).
	//  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
	"workbench.startupEditor": "welcomePage",

	// Controls the visibility of the status bar at the bottom of the workbench.
	"workbench.statusBar.visible": true,

	// When enabled, will show the watermark tips when no editor is open.
	"workbench.tips.enabled": true,

	// Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.
	"workbench.tree.expandMode": "singleClick",

	// Controls tree indentation in pixels.
	"workbench.tree.indent": 8,

	// Controls whether the tree should render indent guides.
	"workbench.tree.renderIndentGuides": "onHover",

	// When enabled, trusted domain prompts will appear when opening links in trusted workspaces.
	"workbench.trustedDomains.promptInTrustedWorkspace": false,

	// Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
	"workbench.view.alwaysShowHeaderActions": false,

	// When enabled, the get started page has additional links to video tutorials.
	"workbench.welcomePage.experimental.videoTutorials": "off",

	// When enabled, reduce motion in welcome page.
	"workbench.welcomePage.preferReducedMotion": false,

	// When enabled, an extension's walkthrough will open upon install of the extension.
	"workbench.welcomePage.walkthroughs.openOnInstall": true,

	// If set, automatically switch to the preferred color theme based on the OS appearance. If the OS appearance is dark, the theme specified at `workbench.preferredDarkColorTheme#` is used, for light `#workbench.preferredLightColorTheme`.
	"window.autoDetectColorScheme": false,

	// If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by `workbench.preferredHighContrastColorTheme`
	"window.autoDetectHighContrast": true,

	// Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
	"window.closeWhenEmpty": false,

	// Controls whether the menu bar will be focused by pressing the Alt-key. This setting has no effect on toggling the menu bar with the Alt-key.
	"window.customMenuBarAltFocus": true,

	// Adjust the appearance of dialog windows.
	"window.dialogStyle": "native",

	// If enabled, double clicking the application icon in the title bar will close the window and the window cannot be dragged by the icon. This setting only has an effect when `window.titleBarStyle` is set to `custom`.
	"window.doubleClickIconToClose": false,

	// Controls whether the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead.
	"window.enableMenuBarMnemonics": true,

	// Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. A setting of 'compact' will move the menu into the sidebar.
	//  - classic: Menu is displayed at the top of the window and only hidden in full screen mode.
	//  - visible: Menu is always visible at the top of the window even in full screen mode.
	//  - toggle: Menu is hidden but can be displayed at the top of the window via the Alt key.
	//  - hidden: Menu is always hidden.
	//  - compact: Menu is displayed as a compact button in the sidebar. This value is ignored when `window.titleBarStyle` is `native`.
	"window.menuBarVisibility": "classic",

	// Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
	//  - default: Open new windows in the center of the screen.
	//  - inherit: Open new windows with same dimension as last active one.
	//  - offset: Open new windows with same dimension as last active one with an offset position.
	//  - maximized: Open new windows maximized.
	//  - fullscreen: Open new windows in full screen mode.
	"window.newWindowDimensions": "default",

	// Controls whether files should open in a new window.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Files will open in a new window.
	//  - off: Files will open in the window with the files' folder open or the last active window.
	//  - default: Files will open in a new window unless picked from within the application (e.g. via the File menu).
	"window.openFilesInNewWindow": "off",

	// Controls whether folders should open in a new window or replace the last active window.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Folders will open in a new window.
	//  - off: Folders will replace the last active window.
	//  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
	"window.openFoldersInNewWindow": "default",

	// Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Open a new empty window.
	//  - off: Focus the last active running instance.
	"window.openWithoutArgumentsInNewWindow": "on",

	// Controls whether a window should restore to full screen mode if it was exited in full screen mode.
	"window.restoreFullscreen": false,

	// Controls how windows are being reopened after starting for the first time. This setting has no effect when the application is already running.
	//  - preserve: Always reopen all windows. If a folder or workspace is opened (e.g. from the command line) it opens as a new window unless it was opened before. If files are opened they will open in one of the restored windows.
	//  - all: Reopen all windows unless a folder, workspace or file is opened (e.g. from the command line).
	//  - folders: Reopen all windows that had folders or workspaces opened unless a folder, workspace or file is opened (e.g. from the command line).
	//  - one: Reopen the last active window unless a folder, workspace or file is opened (e.g. from the command line).
	//  - none: Never reopen a window. Unless a folder or workspace is opened (e.g. from the command line), an empty window will appear.
	"window.restoreWindows": "all",

	// Controls the window title based on the active editor. Variables are substituted based on the context:
	// - `${activeEditorShort}`: the file name (e.g. myFile.txt).
	// - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
	// - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
	// - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
	// - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
	// - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
	// - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
	// - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
	// - `${rootName}`: name of the opened workspace or folder (e.g. myFolder or myWorkspace).
	// - `${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).
	// - `${appName}`: e.g. VS Code.
	// - `${remoteName}`: e.g. SSH
	// - `${dirty}`: an indicator for when the active editor has unsaved changes.
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	"window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",

	// Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.
	"window.titleBarStyle": "custom",

	// Separator used by `window.title`.
	"window.titleSeparator": " - ",

	// Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.
	"window.zoomLevel": 0,

	// Configure file associations to languages (e.g. `"*.extension": "html"`). These have precedence over the default associations of the languages installed.
	"files.associations": {},

	// When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only `files.encoding` is respected.
	"files.autoGuessEncoding": false,

	// Controls [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors that have unsaved changes.
	//  - off: An editor with changes is never automatically saved.
	//  - afterDelay: An editor with changes is automatically saved after the configured `files.autoSaveDelay`.
	//  - onFocusChange: An editor with changes is automatically saved when the editor loses focus.
	//  - onWindowChange: An editor with changes is automatically saved when the window loses focus.
	"files.autoSave": "off",

	// Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
	"files.autoSaveDelay": 1000,

	// The default language identifier that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language identifier of the currently active text editor if any.
	"files.defaultLanguage": "",

	// Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
	"files.enableTrash": true,

	// The default character set encoding to use when reading and writing files. This setting can also be configured per language.
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",

	// The default end of line character.
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: Uses operating system specific end of line character.
	"files.eol": "auto",

	// Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders. For example, the file explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude` setting to define search-specific excludes.
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/CVS": true,
		"**/.DS_Store": true,
		"**/Thumbs.db": true
	},

	// Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
	//  - off: Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.
	//  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
	//  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
	"files.hotExit": "onExit",

	// When enabled, insert a final new line at the end of the file when saving it.
	"files.insertFinalNewline": false,

	// Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.
	"files.maxMemoryForLargeFilesMB": 4096,

	// Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.
	"files.participants.timeout": 60000,

	// Restore the undo stack when a file is reopened.
	"files.restoreUndoStack": true,

	// A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
	//  - askUser: Will refuse to save and ask for resolving the save conflict manually.
	//  - overwriteFileOnDisk: Will resolve the save conflict by overwriting the file on disk with the changes in the editor.
	"files.saveConflictResolution": "askUser",

	// Enables the simple file dialog. The simple file dialog replaces the system file dialog when enabled.
	"files.simpleDialog.enable": false,

	// When enabled, will trim all new lines after the final new line at the end of the file when saving it.
	"files.trimFinalNewlines": false,

	// When enabled, will trim trailing whitespace when saving a file.
	"files.trimTrailingWhitespace": false,

	// Configure paths or glob patterns to exclude from file watching. Paths that are relative (for example `build/output`) will be resolved to an absolute path using the currently opened workspace. Glob patterns must match on absolute paths (i.e. prefix with `**/` or the full path and suffix with `/**` to match files within a path) to match properly (for example `**/build/output/**` or `/Users/name/workspaces/project/build/output/**`). When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders).
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/node_modules/*/**": true,
		"**/.hg/store/**": true
	},

	// Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace.
	"files.watcherInclude": [],

	// Controls the font size (in pixels) of the screencast mode keyboard.
	"screencastMode.fontSize": 56,

	// Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.
	"screencastMode.keyboardOverlayTimeout": 800,

	// Controls what is displayed in the keyboard overlay when showing shortcuts.
	//  - keys: Keys.
	//  - command: Command title.
	//  - commandWithGroup: Command title prefixed by its group.
	//  - commandAndKeys: Command title and keys.
	//  - commandWithGroupAndKeys: Command title and keys, with the command prefixed by its group.
	"screencastMode.keyboardShortcutsFormat": "commandAndKeys",

	// Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.
	"screencastMode.mouseIndicatorColor": "#FF0000",

	// Controls the size (in pixels) of the mouse indicator in screencast mode.
	"screencastMode.mouseIndicatorSize": 20,

	// Only show keyboard shortcuts in screencast mode.
	"screencastMode.onlyKeyboardShortcuts": false,

	// Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
	"screencastMode.verticalOffset": 20,

	// Controls whether turning on Zen Mode also centers the layout.
	"zenMode.centerLayout": true,

	// Controls whether turning on Zen Mode also puts the workbench into full screen mode.
	"zenMode.fullScreen": true,

	// Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.
	"zenMode.hideActivityBar": true,

	// Controls whether turning on Zen Mode also hides the editor line numbers.
	"zenMode.hideLineNumbers": true,

	// Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
	"zenMode.hideStatusBar": true,

	// Controls whether turning on Zen Mode also hides workbench tabs.
	"zenMode.hideTabs": true,

	// Controls whether a window should restore to zen mode if it was exited in zen mode.
	"zenMode.restore": true,

	// Controls whether notifications are shown while in zen mode. If true, only error notifications will pop out.
	"zenMode.silentNotifications": true,

	// Specifies how to format absolute dates (e.g. using the `${date}` token) for the current line blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.currentLine.dateFormat": null,

	// Specifies whether to provide a blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window
	"gitlens.currentLine.enabled": true,

	// Specifies the format of the current line blame annotation. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting
	"gitlens.currentLine.format": "${author, }${agoOrDate}${' via 'pullRequest}${ • message|50?}",

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the current line blame annotation. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.currentLine.pullRequests.enabled": true,

	// Specifies whether the current line blame annotation can be scrolled into view when it is outside the viewport. **NOTE**: Setting this to `false` will inhibit the hovers from showing over the annotation; Set `gitlens.hovers.currentLine.over` to `line` to enable the hovers to show anywhere over the line.
	"gitlens.currentLine.scrollable": true,

	// Controls whether the explorer should automatically reveal and select files when opening them.
	//  - true: Files will be revealed and selected.
	//  - false: Files will not be revealed and selected.
	//  - focusNoScroll: Files will not be scrolled into view, but will still be focused.
	"explorer.autoReveal": true,

	// Controls whether the explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
	"explorer.compactFolders": true,

	// Controls whether the explorer should ask for confirmation when deleting a file via the trash.
	"explorer.confirmDelete": true,

	// Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.
	"explorer.confirmDragAndDrop": true,

	// Controls whether the explorer should ask for confirmation when undoing.
	//  - verbose: Explorer will prompt before all undo operations.
	//  - default: Explorer will prompt before destructive undo operations.
	//  - light: Explorer will not prompt before undo operations when focused.
	"explorer.confirmUndo": "default",

	// The path separation character used when copying relative file paths.
	//  - /: Use slash as path separation character.
	//  - \: Use backslash as path separation character.
	//  - auto: Uses operating system specific path separation character.
	"explorer.copyRelativePathSeparator": "auto",

	// Controls whether file decorations should use badges.
	"explorer.decorations.badges": true,

	// Controls whether file decorations should use colors.
	"explorer.decorations.colors": true,

	// Controls whether the explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the explorer.
	"explorer.enableDragAndDrop": true,

	// Controls whether the explorer should support undoing file and folder operations.
	"explorer.enableUndo": true,

	// Controls whether the explorer should expand multi-root workspaces containing only one folder during initilization
	"explorer.expandSingleFolderWorkspaces": true,

	// Experimental. Controls whether file nesting is enabled in the explorer. File nesting allows for related files in a directory to be visually grouped together under a single parent file.
	"explorer.experimental.fileNesting.enabled": false,

	// Experimental. Controls whether file nests are automatically expanded. `explorer.experimental.fileNesting.enabled` must be set for this to take effect.
	"explorer.experimental.fileNesting.expand": true,

	// Experimental. Controls nesting of files in the explorer. `explorer.experimental.fileNesting.enabled` must be set for this to take effect. Each key describes a parent file pattern and each value should be a comma separated list of children file patterns that will be nested under the parent.
	// 
	// A single `*` in a parent pattern may be used to capture any substring, which can then be matched against using `$​(capture)` in a child pattern. Child patterns may also contain one `*` to match any substring.
	// 
	// For example, given the configuration `*.ts => $(capture).js, $(capture).*.ts`, and a directory containing `a.ts, a.js, a.d.ts`, and `b.js`, nesting would apply as follows: 
	// - `*.ts` matches `a.ts`, capturing `a`. This causes any sibilings matching `a.js` or `a.*.ts` to be nested under `a.ts`
	//     - `a.js` matches `a.js` exactly, so is nested under `a.ts`
	//     - `a.d.ts` matches `a.*.ts`, so is also nested under `a.ts`
	// 
	// The final directory will be rendered with `a.ts` containg `a.js` and `a.d.ts` as nested children, and `b.js` as normal file.
	"explorer.experimental.fileNesting.patterns": {
		"*.ts": "$(capture).js, $(capture).*.ts",
		"*.js": "$(capture).js.map, $(capture).min.js, $(capture).d.ts",
		"*.jsx": "$(capture).js",
		"*.tsx": "$(capture).ts",
		"tsconfig.json": "tsconfig.*.json",
		"package.json": "package-lock.json, .npmrc, yarn.lock, .yarnrc, pnpm-lock.yaml"
	},

	// Controls what naming strategy to use when a giving a new name to a duplicated explorer item on paste.
	//  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number
	//  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number
	"explorer.incrementalNaming": "simple",

	// Controls the sorting order of editors in the Open Editors pane.
	//  - editorOrder: Editors are ordered in the same order editor tabs are shown.
	//  - alphabetical: Editors are ordered alphabetically by tab name inside each editor group.
	//  - fullPath: Editors are ordered alphabetically by full path inside each editor group.
	"explorer.openEditors.sortOrder": "editorOrder",

	// Number of editors shown in the Open Editors pane. Setting this to 0 hides the Open Editors pane.
	"explorer.openEditors.visible": 9,

	// Controls the property-based sorting of files and folders in the explorer. When `explorer.experimental.fileNesting.enabled` is enabled, also controls sorting of nested files.
	//  - default: Files and folders are sorted by their names. Folders are displayed before files.
	//  - mixed: Files and folders are sorted by their names. Files are interwoven with folders.
	//  - filesFirst: Files and folders are sorted by their names. Files are displayed before folders.
	//  - type: Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.
	//  - modified: Files and folders are sorted by last modified date in descending order. Folders are displayed before  files.
	//  - foldersNestsFiles: Files and folders are sorted by their names. Folders are displayed before files. Files with nested children are displayed before other files.
	"explorer.sortOrder": "default",

	// Controls the lexicographic sorting of file and folder names in the Explorer.
	//  - default: Uppercase and lowercase names are mixed together.
	//  - upper: Uppercase names are grouped together before lowercase names.
	//  - lower: Lowercase names are grouped together before uppercase names.
	//  - unicode: Names are sorted in unicode order.
	"explorer.sortOrderLexicographicOptions": "default",

	// Specifies the command to be executed when an _authors_ code lens is clicked
	//  - false: Disables click interaction
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Searches for commits within the range
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit url to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file url to the clipboard (when available)
	"gitlens.codeLens.authors.command": "gitlens.toggleFileBlame",

	// Specifies whether to provide an _authors_ code lens, showing number of authors of the file or code block and the most prominent author (if there is more than one)
	"gitlens.codeLens.authors.enabled": true,

	// Specifies whether to provide any Git code lens, by default. Use the `Toggle Git Code Lens` command (`gitlens.toggleCodeLens`) to toggle the Git code lens on and off for the current window
	"gitlens.codeLens.enabled": true,

	// Specifies whether to provide any Git code lens on symbols that span only a single line
	"gitlens.codeLens.includeSingleLineSymbols": false,

	// Specifies the command to be executed when a _recent change_ code lens is clicked
	//  - false: Disables click interaction
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Searches for the commit
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit url to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file url to the clipboard (when available)
	"gitlens.codeLens.recentChange.command": "gitlens.showQuickCommitFileDetails",

	// Specifies whether to provide a _recent change_ code lens, showing the author and date of the most recent commit for the file or code block
	"gitlens.codeLens.recentChange.enabled": true,

	// Specifies where Git code lens will be shown in the document
	//  - document: Adds code lens at the top of the document
	//  - containers: Adds code lens at the start of container-like symbols (modules, classes, interfaces, etc)
	//  - blocks: Adds code lens at the start of block-like symbols (functions, methods, etc) lines
	"gitlens.codeLens.scopes": [
		"document",
		"containers"
	],

	// Deprecated. Use the per-language `gitlens.codeLens.scopes#` and `#gitlens.codeLens.symbolScopes` settings instead
	// 
	"gitlens.codeLens.scopesByLanguage": null,

	// Specifies a set of document symbols where Git code lens will or will not be shown in the document. Prefix with `!` to avoid providing a Git code lens for the symbol. Must be a member of `SymbolKind`
	"gitlens.codeLens.symbolScopes": [],

	// Specifies the string to be shown in place of the _authors_ code lens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.authorsOnly": "$(ellipsis)",

	// Specifies the string to be shown in place of both the _recent change_ and _authors_ code lens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": "$(ellipsis)",

	// Specifies the string to be shown in place of the _recent change_ code lens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": "$(ellipsis)",

	// Specifies the blame alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.statusBar.alignment": "right",

	// Specifies the command to be executed when the blame status bar item is clicked
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.toggleCodeLens: Toggles Git code lens
	//  - gitlens.diffWithPrevious: Compares the current line commit with the previous
	//  - gitlens.diffWithWorking: Compares the current line commit with the working tree
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Searches for the commit
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit url to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file url to the clipboard (when available)
	"gitlens.statusBar.command": "gitlens.showQuickCommitDetails",

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.statusBar.dateFormat": null,

	// Specifies whether to provide blame information in the status bar
	"gitlens.statusBar.enabled": true,

	// Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.statusBar.dateFormat` setting
	"gitlens.statusBar.format": "${author}, ${agoOrDate}${' via 'pullRequest}",

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the status bar. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.statusBar.pullRequests.enabled": true,

	// Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar "flashing"
	"gitlens.statusBar.reduceFlicker": true,

	// Specifies the format (in markdown) of hover shown over the blame information in the status bar. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.statusBar.tooltipFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}\n\n${commands}${\n\n---\n\nfootnotes}",

	// Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.changes": true,

	// Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.details": true,

	// Specifies whether to provide any hovers when showing blame annotations
	"gitlens.hovers.annotations.enabled": true,

	// Specifies when to trigger hovers when showing blame annotations
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.annotations.over": "line",

	// Specifies whether to automatically link external resources in commit messages
	"gitlens.hovers.autolinks.enabled": true,

	// Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.autolinks.enhanced": true,

	// Specifies whether to show avatar images in hovers
	"gitlens.hovers.avatars": true,

	// Specifies the size of the avatar images in hovers
	"gitlens.hovers.avatarSize": 32,

	// Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover
	//  - line: Shows only the changes to the line
	//  - hunk: Shows the set of related changes
	"gitlens.hovers.changesDiff": "line",

	// Specifies whether to provide a _changes (diff)_ hover for the current line
	"gitlens.hovers.currentLine.changes": true,

	// Specifies whether to provide a _commit details_ hover for the current line
	"gitlens.hovers.currentLine.details": true,

	// Specifies whether to provide any hovers for the current line
	"gitlens.hovers.currentLine.enabled": true,

	// Specifies when to trigger hovers for the current line
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.currentLine.over": "annotation",

	// Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.hovers.detailsMarkdownFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}\n\n${commands}${\n\n---\n\nfootnotes}",

	// Specifies whether to provide any hovers
	"gitlens.hovers.enabled": true,

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the hovers. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.pullRequests.enabled": true,

	// Controls the positioning of the actionbar on rows in the search view.
	//  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
	//  - right: Always position the actionbar to the right.
	"search.actionsPosition": "right",

	// Controls whether the search results will be collapsed or expanded.
	//  - auto: Files with less than 10 results are expanded. Others are collapsed.
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",

	// Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `files.exclude` setting.
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},

	// Controls whether to follow symlinks while searching.
	"search.followSymlinks": true,

	// This setting is deprecated. You can drag the search icon to a new location instead.
	// Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
	"search.location": "sidebar",

	// The search cache is kept in the extension host which never shuts down, so this setting is no longer needed.
	// When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
	"search.maintainFileSearchCache": false,

	// Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.
	"search.maxResults": 20000,

	// Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the sidebar's search view, or in a search editor
	//  - view: Search in the search view, either in the panel or sidebar.
	//  - reuseEditor: Search in an existing search editor if present, otherwise in a new search editor.
	//  - newEditor: Search in a new search editor.
	"search.mode": "view",

	// Controls sorting order of editor history in quick open when filtering.
	//  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
	//  - recency: History entries are sorted by recency. More recently opened entries appear first.
	"search.quickOpen.history.filterSortOrder": "default",

	// Whether to include results from recently opened files in the file results for Quick Open.
	"search.quickOpen.includeHistory": true,

	// Whether to include results from a global symbol search in the file results for Quick Open.
	"search.quickOpen.includeSymbols": false,

	// The default number of surrounding context lines to use when creating new Search Editors. If using `search.searchEditor.reusePriorSearchConfiguration`, this can be set to `null` (empty) to use the prior Search Editor's configuration.
	"search.searchEditor.defaultNumberOfContextLines": 1,

	// Configure effect of double clicking a result in a search editor.
	//  - selectWord: Double clicking selects the word under the cursor.
	//  - goToLocation: Double clicking opens the result in the active editor group.
	//  - openLocationToSide: Double clicking opens the result in the editor group to the side, creating one if it does not yet exist.
	"search.searchEditor.doubleClickBehaviour": "goToLocation",

	// When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.
	"search.searchEditor.reusePriorSearchConfiguration": false,

	// Search all files as you type.
	"search.searchOnType": true,

	// When `search.searchOnType` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `search.searchOnType` is disabled.
	"search.searchOnTypeDebouncePeriod": 300,

	// Update the search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
	"search.seedOnFocus": false,

	// Enable seeding search from the word nearest the cursor when the active editor has no selection.
	"search.seedWithNearestWord": false,

	// Controls whether to show line numbers for search results.
	"search.showLineNumbers": false,

	// Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
	"search.smartCase": false,

	// Controls sorting order of search results.
	//  - default: Results are sorted by folder and file names, in alphabetical order.
	//  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
	//  - type: Results are sorted by file extensions, in alphabetical order.
	//  - modified: Results are sorted by file last modified date, in descending order.
	//  - countDescending: Results are sorted by count per file, in descending order.
	//  - countAscending: Results are sorted by count per file, in ascending order.
	"search.sortOrder": "default",

	// Controls whether to use global `.gitignore` and `.ignore` files when searching for files. Requires `search.useIgnoreFiles` to be enabled.
	"search.useGlobalIgnoreFiles": false,

	// Controls whether to use `.gitignore` and `.ignore` files when searching for files.
	"search.useIgnoreFiles": true,

	// Controls whether to use `.gitignore` and `.ignore` files in parent directories when searching for files. Requires `search.useIgnoreFiles` to be enabled.
	"search.useParentIgnoreFiles": false,

	// Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.
	// Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
	"search.usePCRE2": false,

	// Controls whether to open Replace Preview when selecting or replacing a match.
	"search.useReplacePreview": true,

	// Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
	// This setting is deprecated and now falls back on "search.usePCRE2".
	"search.useRipgrep": true,

	// The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.
	"http.proxy": "",

	// The value to send as the `Proxy-Authorization` header for every network request.
	"http.proxyAuthorization": null,

	// Controls whether the proxy server certificate should be verified against the list of supplied CAs.
	"http.proxyStrictSSL": true,

	// Use the proxy support for extensions.
	//  - off: Disable proxy support for extensions.
	//  - on: Enable proxy support for extensions.
	//  - fallback: Enable proxy support for extensions, fall back to request options, when no proxy found.
	//  - override: Enable proxy support for extensions, override request options.
	"http.proxySupport": "override",

	// Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)
	"http.systemCertificates": true,

	// This setting is deprecated, please use 'update.mode' instead.
	// Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
	"update.channel": "default",

	// Enable to download and install new VS Code versions in the background on Windows.
	"update.enableWindowsBackgroundUpdates": true,

	// Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
	//  - none: Disable updates.
	//  - manual: Disable automatic background update checks. Updates will be available if you manually check for updates.
	//  - start: Check for updates only on startup. Disable automatic background update checks.
	//  - default: Enable automatic update checks. Code will check for updates automatically and periodically.
	"update.mode": "default",

	// Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
	"update.showReleaseNotes": true,

	// Controls when the comments panel should open.
	"comments.openPanel": "openOnSessionStartWithComments",

	// Determines if relative time will be used in comment timestamps (ex. '1 day ago').
	"comments.useRelativeTime": true,

	// Allow setting breakpoints in any file.
	"debug.allowBreakpointsEverywhere": false,

	// Controls whether to confirm when the window closes if there are active debug sessions.
	//  - never: Never confirm.
	//  - always: Always confirm if there are debug sessions.
	"debug.confirmOnExit": "never",

	// Controls whether suggestions should be accepted on enter in the debug console. enter is also used to evaluate whatever is typed in the debug console.
	"debug.console.acceptSuggestionOnEnter": "off",

	// Controls if the debug console should be automatically closed when the debug session ends.
	"debug.console.closeOnEnd": false,

	// Controls if the debug console should collapse identical lines and show a number of occurrences with a badge.
	"debug.console.collapseIdenticalLines": true,

	// Controls the font family in the debug console.
	"debug.console.fontFamily": "default",

	// Controls the font size in pixels in the debug console.
	"debug.console.fontSize": 14,

	// Controls if the debug console should suggest previously typed input.
	"debug.console.historySuggestions": true,

	// Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.
	"debug.console.lineHeight": 0,

	// Controls if the lines should wrap in the debug console.
	"debug.console.wordWrap": true,

	// Show Source Code in Disassembly View.
	"debug.disassemblyView.showSourceCode": true,

	// Controls whether the workbench window should be focused when the debugger breaks.
	"debug.focusWindowOnBreak": true,

	// Show variable values inline in editor while debugging.
	//  - true: Always show variable values inline in editor while debugging.
	//  - false: Never show variable values inline in editor while debugging.
	//  - auto: Show variable values inline in editor while debugging when the language supports inline value locations.
	"debug.inlineValues": "auto",

	// Controls when the internal debug console should open.
	"debug.internalConsoleOptions": "openOnFirstSessionStart",

	// Controls what to do when errors are encountered after running a preLaunchTask.
	//  - debugAnyway: Ignore task errors and start debugging.
	//  - showErrors: Show the Problems view and do not start debugging.
	//  - prompt: Prompt user.
	//  - abort: Cancel debugging.
	"debug.onTaskErrors": "prompt",

	// Controls when the debug view should open.
	"debug.openDebug": "openOnDebugBreak",

	// Automatically open the explorer view at the end of a debug session.
	"debug.openExplorerOnEnd": false,

	// Controls what editors to save before starting a debug session.
	//  - allEditorsInActiveGroup: Save all editors in the active group before starting a debug session.
	//  - nonUntitledEditorsInActiveGroup: Save all editors in the active group except untitled ones before starting a debug session.
	//  - none: Don't save any editors before starting a debug session.
	"debug.saveBeforeStart": "allEditorsInActiveGroup",

	// Controls whether breakpoints should be shown in the overview ruler.
	"debug.showBreakpointsInOverviewRuler": false,

	// Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.
	"debug.showInlineBreakpointCandidates": true,

	// Controls when the debug status bar should be visible.
	//  - never: Never show debug in status bar
	//  - always: Always show debug in status bar
	//  - onFirstSessionStart: Show debug in status bar only after debug was started for the first time
	"debug.showInStatusBar": "onFirstSessionStart",

	// Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
	"debug.showSubSessionsInToolBar": false,

	// Before starting a new debug session in an integrated or external terminal, clear the terminal.
	"debug.terminal.clearBeforeReusing": false,

	// Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.
	"debug.toolBarLocation": "floating",

	// Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
	"launch": {
		"configurations": [],
		"compounds": []
	},

	// Enable/disable autoclosing of HTML tags.
	"html.autoClosingTags": true,

	// Enable/disable auto creation of quotes for HTML attribute assignment.
	"html.autoCreateQuotes": true,

	// Controls the default value for attributes when completion is accepted.
	//  - doublequotes: Attribute value is set to "".
	//  - singlequotes: Attribute value is set to ''.
	//  - empty: Attribute value is not set.
	"html.completion.attributeDefaultValue": "doublequotes",

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"html.customData": [],

	// List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
	"html.format.contentUnformatted": "pre,code,textarea",

	// Enable/disable default HTML formatter.
	"html.format.enable": true,

	// End with a newline.
	"html.format.endWithNewline": false,

	// List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
	"html.format.extraLiners": "head, body, /html",

	// Format and indent `{{#foo}}` and `{{/foo}}`.
	"html.format.indentHandlebars": false,

	// Indent `<head>` and `<body>` sections.
	"html.format.indentInnerHtml": false,

	// Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
	"html.format.maxPreserveNewLines": null,

	// Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
	"html.format.preserveNewLines": true,

	// Honor django, erb, handlebars and php templating language tags.
	"html.format.templating": false,

	// List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
	"html.format.unformatted": "wbr",

	// Keep text content together between this string.
	"html.format.unformattedContentDelimiter": "",

	// Wrap attributes.
	//  - auto: Wrap attributes only when line length is exceeded.
	//  - force: Wrap each attribute except first.
	//  - force-aligned: Wrap each attribute except first and keep aligned.
	//  - force-expand-multiline: Wrap each attribute.
	//  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
	//  - preserve: Preserve wrapping of attributes.
	//  - preserve-aligned: Preserve wrapping of attributes but align.
	"html.format.wrapAttributes": "auto",

	// Indent wrapped attributes to after N characters. Use `null` to use the default indent size. Ignored if `html.format.wrapAttributes` is set to 'aligned'.
	"html.format.wrapAttributesIndentSize": null,

	// Maximum amount of characters per line (0 = disable).
	"html.format.wrapLineLength": 120,

	// Show tag and attribute documentation in hover.
	"html.hover.documentation": true,

	// Show references to MDN in hover.
	"html.hover.references": true,

	// Deprecated in favor of `editor.linkedEditing`
	// Enable/disable mirroring cursor on matching HTML tag.
	"html.mirrorCursorOnMatchingTag": false,

	// Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
	"html.suggest.html5": true,

	// Traces the communication between VS Code and the HTML language server.
	"html.trace.server": "off",

	// Controls whether the built-in HTML language support validates embedded scripts.
	"html.validate.scripts": true,

	// Controls whether the built-in HTML language support validates embedded styles.
	"html.validate.styles": true,

	// Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
	"php.suggest.basic": true,

	// Enable/disable built-in PHP validation.
	"php.validate.enable": true,

	// Points to the PHP executable.
	"php.validate.executablePath": null,

	// Whether the linter is run on save or on type.
	"php.validate.run": "onSave",

	// Enable/disable automatic closing of JSX tags.
	"javascript.autoClosingTags": true,

	// Enable/disable default JavaScript formatter.
	"javascript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"javascript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword.
	"javascript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"javascript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after a binary operator.
	"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"javascript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"javascript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"javascript.format.semicolons": "ignore",

	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.
	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.checkJs": false,

	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.
	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.experimentalDecorators": false,

	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.enumMemberValues.enabled": false,

	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	//  - none: Disable parameter name hints.
	//  - literals: Enable parameter name hints only for literal arguments.
	//  - all: Enable parameter name hints for literal and non-literal arguments.
	"javascript.inlayHints.parameterNames.enabled": "none",

	// Suppress parameter name hints on arguments whose text is identical to the parameter name.
	"javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.parameterTypes.enabled": false,

	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.variableTypes.enabled": false,

	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.
	"javascript.preferences.importModuleSpecifier": "shortest",

	// Preferred path ending for auto imports. Requires using TypeScript 4.5+ in the workspace.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"javascript.preferences.importModuleSpecifierEnding": "auto",

	// Preferred style for JSX attribute completions.
	//  - auto: Insert `={}` or `=""` after attribute names based on the prop type.
	//  - braces: Insert `={}` after attribute names.
	//  - none: Only insert attribute names.
	"javascript.preferences.jsxAttributeCompletionStyle": "auto",

	// Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports.
	"javascript.preferences.quoteStyle": "auto",

	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"javascript.preferences.renameShorthandProperties": true,

	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"javascript.preferences.useAliasesForRenames": true,

	// Enable/disable references CodeLens in JavaScript files.
	"javascript.referencesCodeLens.enabled": false,

	// Enable/disable references CodeLens on all functions in JavaScript files.
	"javascript.referencesCodeLens.showOnAllFunctions": false,

	// Enable/disable auto import suggestions.
	"javascript.suggest.autoImports": true,

	// Enable/disable snippet completions for class members. Requires using TypeScript 4.5+ in the workspace
	"javascript.suggest.classMemberSnippets.enabled": true,

	// Complete functions with their parameter signature.
	"javascript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"javascript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"javascript.suggest.enabled": true,

	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
	"javascript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.
	"javascript.suggest.includeCompletionsForImportStatements": true,

	// Enable/disable generating `@return` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.
	"javascript.suggest.jsdoc.generateReturns": true,

	// Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
	"javascript.suggest.names": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"javascript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for JavaScript files in the editor.
	"javascript.suggestionActions.enabled": true,

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"javascript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable JavaScript validation.
	"javascript.validate.enable": true,

	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.checkJs": false,

	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.experimentalDecorators": false,

	// Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictFunctionTypes": true,

	// Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictNullChecks": false,

	// Enable/disable automatic closing of JSX tags.
	"typescript.autoClosingTags": true,

	// Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.check.npmIsInstalled": true,

	// Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
	"typescript.disableAutomaticTypeAcquisition": false,

	// Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.
	"typescript.enablePromptUseWorkspaceTsdk": false,

	// Enable/disable default TypeScript formatter.
	"typescript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"typescript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword.
	"typescript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"typescript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after type assertions in TypeScript.
	"typescript.format.insertSpaceAfterTypeAssertion": false,

	// Defines space handling after a binary operator.
	"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"typescript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"typescript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"typescript.format.semicolons": "ignore",

	// Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
	"typescript.implementationsCodeLens.enabled": false,

	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.enumMemberValues.enabled": false,

	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	//  - none: Disable parameter name hints.
	//  - literals: Enable parameter name hints only for literal arguments.
	//  - all: Enable parameter name hints for literal and non-literal arguments.
	"typescript.inlayHints.parameterNames.enabled": "none",

	// Suppress parameter name hints on arguments whose text is identical to the parameter name.
	"typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.parameterTypes.enabled": false,

	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.variableTypes.enabled": false,

	// Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.
	"typescript.locale": "",

	// Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.npm": "",

	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.
	"typescript.preferences.importModuleSpecifier": "shortest",

	// Preferred path ending for auto imports. Requires using TypeScript 4.5+ in the workspace.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"typescript.preferences.importModuleSpecifierEnding": "auto",

	// Enable/disable searching `package.json` dependencies for available auto imports.
	//  - auto: Search dependencies based on estimated performance impact.
	//  - on: Always search dependencies.
	//  - off: Never search dependencies.
	"typescript.preferences.includePackageJsonAutoImports": "auto",

	// Preferred style for JSX attribute completions.
	//  - auto: Insert `={}` or `=""` after attribute names based on the prop type.
	//  - braces: Insert `={}` after attribute names.
	//  - none: Only insert attribute names.
	"typescript.preferences.jsxAttributeCompletionStyle": "auto",

	// Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports.
	"typescript.preferences.quoteStyle": "auto",

	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"typescript.preferences.renameShorthandProperties": true,

	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"typescript.preferences.useAliasesForRenames": true,

	// Enable/disable references CodeLens in TypeScript files.
	"typescript.referencesCodeLens.enabled": false,

	// Enable/disable references CodeLens on all functions in TypeScript files.
	"typescript.referencesCodeLens.showOnAllFunctions": false,

	// Report style checks as warnings.
	"typescript.reportStyleChecksAsWarnings": true,

	// Enable/disable auto import suggestions.
	"typescript.suggest.autoImports": true,

	// Enable/disable snippet completions for class members. Requires using TypeScript 4.5+ in the workspace
	"typescript.suggest.classMemberSnippets.enabled": true,

	// Complete functions with their parameter signature.
	"typescript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"typescript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"typescript.suggest.enabled": true,

	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
	"typescript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.
	"typescript.suggest.includeCompletionsForImportStatements": true,

	// Enable/disable snippet completions from TS Server. Requires using TypeScript 4.3+ in the workspace.
	"typescript.suggest.includeCompletionsWithSnippetText": true,

	// Enable/disable generating `@return` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.
	"typescript.suggest.jsdoc.generateReturns": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"typescript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for TypeScript files in the editor.
	"typescript.suggestionActions.enabled": true,

	// Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
	"typescript.surveys.enabled": true,

	// Controls auto detection of tsc tasks.
	//  - on: Create both build and watch tasks.
	//  - off: Disable this feature.
	//  - build: Only create single run compile tasks.
	//  - watch: Only create compile and watch tasks.
	"typescript.tsc.autoDetect": "on",

	// Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.
	// 
	// - When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
	// - When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.
	// 
	// See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.
	"typescript.tsdk": "",

	// Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.enableTracing": false,

	// (Experimental) Enables project wide error reporting.
	"typescript.tsserver.experimental.enableProjectDiagnostics": false,

	// Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.log": "off",

	// The maximum amount of memory (in MB) to allocate to the TypeScript server process.
	"typescript.tsserver.maxTsServerMemory": 3072,

	// Additional paths to discover TypeScript Language Service plugins.
	"typescript.tsserver.pluginPaths": [],

	// Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.trace": "off",

	// This setting has been deprecated in favor of `typescript.tsserver.useSyntaxServer`.
	// Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols. Requires using TypeScript 3.4.0 or newer in the workspace.
	"typescript.tsserver.useSeparateSyntaxServer": true,

	// Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.
	//  - always: Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.
	//  - never: Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.
	//  - auto: Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.
	"typescript.tsserver.useSyntaxServer": "auto",

	// Configure which watching strategies should be used to keep track of files and directories. Requires using TypeScript 3.8+ in the workspace.
	"typescript.tsserver.watchOptions": {},

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"typescript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable TypeScript validation.
	"typescript.validate.enable": true,

	// Controls which files are searched by [go to symbol in workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
	//  - allOpenProjects: Search all open JavaScript or TypeScript projects for symbols. Requires using TypeScript 3.9 or newer in the workspace.
	//  - currentProject: Only search for symbols in the current JavaScript or TypeScript project.
	"typescript.workspaceSymbols.scope": "allOpenProjects",

	// Deprecated. Use `gitlens.views.formats.commits.description` instead
	// 
	"gitlens.views.commitDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.commitFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.commitFileFormat": null,

	// Deprecated. Use `gitlens.views.commits.files.label` instead
	// 
	"gitlens.views.commitFormat": null,

	// Specifies the default number of items to show in a view list. Use 0 to specify no limit
	"gitlens.views.defaultItemLimit": 10,

	// Specifies the description format of commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.description": "${author, }${agoOrDate}",

	// Specifies the format of commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.label": "${❰ tips ❱➤  }${message}",

	// Specifies the description format of a file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.description": "${directory}${  ←  originalPath}",

	// Specifies the format of a file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.label": "${working  }${file}",

	// Specifies the description format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.description": "${agoOrDate}",

	// Specifies the format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.label": "${message}",

	// Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit
	"gitlens.views.pageItemLimit": 40,

	// Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views
	"gitlens.views.showRelativeDateMarkers": true,

	// Deprecated. Use `gitlens.views.formats.stashes.description` instead
	// 
	"gitlens.views.stashDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.stashFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.stashFileFormat": null,

	// Deprecated. Use `gitlens.views.stashes.files.label` instead
	// 
	"gitlens.views.stashFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.statusFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.statusFileFormat": null,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Commits_ view
	"gitlens.views.commits.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `tree` or `auto`
	"gitlens.views.commits.files.compact": true,

	// Specifies how the _Commits_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.commits.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.commits.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `auto`
	"gitlens.views.commits.files.threshold": 5,

	// Specifies whether to query for pull requests associated with the current branch and commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with the current branch in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForCommits": true,

	// Specifies whether to reveal commits in the _Commits_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.commits.reveal": true,

	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Commits_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the current branch with a user-selected reference
	//  - working: Compares the working tree with a user-selected reference
	"gitlens.views.commits.showBranchComparison": "working",

	// Configures when the error peek view is automatically opened.
	//  - failureAnywhere: Open automatically no matter where the failure is.
	//  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
	//  - never: Never automatically open.
	"testing.automaticallyOpenPeekView": "failureInVisibleDocument",

	// Controls whether to automatically open the peek view during auto-run mode.
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,

	// How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.
	"testing.autoRun.delay": 1000,

	// Controls which tests are automatically run.
	//  - all: Automatically runs all discovered test when auto-run is toggled. Reruns individual tests when they are changed.
	//  - rerun: Reruns individual tests when they are changed. Will not automatically run any tests that have not been already executed.
	"testing.autoRun.mode": "all",

	// Controls the action to take when left-clicking on a test decoration in the gutter.
	//  - run: Run the test.
	//  - debug: Debug the test.
	//  - contextMenu: Open the context menu for more options.
	"testing.defaultGutterClickAction": "run",

	// Controls whether the running test should be followed in the test explorer view
	"testing.followRunningTest": true,

	// Controls whether test decorations are shown in the editor gutter.
	"testing.gutterEnabled": true,

	// Controls when the debug view should open.
	//  - neverOpen: Never automatically open the testing view
	//  - openOnTestStart: Open the testing view when tests start
	//  - openOnTestFailure: Open the testing view on any test failure
	"testing.openTesting": "openOnTestStart",

	// Control whether save all dirty editors before running a test.
	"testing.saveBeforeTest": true,

	// Insert semicolon at end of line when completing CSS properties.
	"css.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"css.completion.triggerPropertyValueCompletion": true,

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its CSS support for the custom CSS properties, at directives, pseudo classes and pseudo elements you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"css.customData": [],

	// Show tag and attribute documentation in CSS hovers.
	"css.hover.documentation": true,

	// Show references to MDN in CSS hovers.
	"css.hover.references": true,

	// Invalid number of parameters.
	"css.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"css.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"css.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"css.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"css.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"css.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"css.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"css.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"css.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"css.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"css.lint.important": "ignore",

	// Import statements do not load in parallel.
	"css.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"css.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"css.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"css.lint.unknownAtRules": "warning",

	// Unknown property.
	"css.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"css.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"css.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"css.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"css.lint.zeroUnits": "ignore",

	// Traces the communication between VS Code and the CSS language server.
	"css.trace.server": "off",

	// Enables or disables all validations.
	"css.validate": true,

	// Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes
	"gitlens.views.repositories.autoRefresh": true,

	// Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files
	"gitlens.views.repositories.autoReveal": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view
	"gitlens.views.repositories.avatars": true,

	// Specifies how the _Repositories_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.repositories.branches.layout": "tree",

	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) under each branch in the _Repositories_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the branch with a user-selected reference
	"gitlens.views.repositories.branches.showBranchComparison": "branch",

	// Specifies whether to show the _Repositories_ view in a compact display density
	"gitlens.views.repositories.compact": false,

	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.repositories.enabled": null,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `tree` or `auto`
	"gitlens.views.repositories.files.compact": true,

	// Specifies how the _Repositories_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.repositories.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.repositories.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `auto`
	"gitlens.views.repositories.files.threshold": 5,

	// Specifies whether to include working tree file status for each repository in the _Repositories_ view
	"gitlens.views.repositories.includeWorkingTree": false,

	// Specifies whether to query for pull requests associated with branches and commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with branches in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForCommits": true,

	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Repositories_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the current branch with a user-selected reference
	//  - working: Compares the working tree with a user-selected reference
	"gitlens.views.repositories.showBranchComparison": "working",

	// Specifies whether to show the branches for each repository in the _Repositories_ view
	"gitlens.views.repositories.showBranches": true,

	// Specifies whether to show the commits on the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showCommits": true,

	// Specifies whether to show the contributors for each repository in the _Repositories_ view
	"gitlens.views.repositories.showContributors": true,

	// Specifies whether to show the experimental incoming activity for each repository in the _Repositories_ view
	"gitlens.views.repositories.showIncomingActivity": false,

	// Specifies whether to show the remotes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showRemotes": true,

	// Specifies whether to show the stashes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showStashes": true,

	// Specifies whether to show the tags for each repository in the _Repositories_ view
	"gitlens.views.repositories.showTags": true,

	// Specifies whether to show the upstream status of the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showUpstreamStatus": true,

	// Specifies whether file histories will follow renames — will affect how merge commits are shown in histories
	"gitlens.advanced.fileHistoryFollowsRenames": false,

	// Specifies whether file histories will show commits from all branches
	"gitlens.advanced.fileHistoryShowAllBranches": false,

	// Specifies whether to show avatar images instead of status icons in the _File History_ view
	"gitlens.views.fileHistory.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `tree` or `auto`
	"gitlens.views.fileHistory.files.compact": true,

	// Specifies how the _File History_ view will display files when showing the history of a folder
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.fileHistory.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.fileHistory.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `auto`
	"gitlens.views.fileHistory.files.threshold": 5,

	// Insert semicolon at end of line when completing CSS properties.
	"less.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"less.completion.triggerPropertyValueCompletion": true,

	// Show tag and attribute documentation in LESS hovers.
	"less.hover.documentation": true,

	// Show references to MDN in LESS hovers.
	"less.hover.references": true,

	// Invalid number of parameters.
	"less.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"less.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"less.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"less.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"less.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"less.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"less.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"less.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"less.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"less.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"less.lint.important": "ignore",

	// Import statements do not load in parallel.
	"less.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"less.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"less.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"less.lint.unknownAtRules": "warning",

	// Unknown property.
	"less.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"less.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"less.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"less.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"less.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"less.validate": true,

	// Specifies whether to show avatar images instead of status icons in the _Line History_ view
	"gitlens.views.lineHistory.avatars": true,

	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.lineHistory.enabled": null,

	// Insert semicolon at end of line when completing CSS properties.
	"scss.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"scss.completion.triggerPropertyValueCompletion": true,

	// Show tag and attribute documentation in SCSS hovers.
	"scss.hover.documentation": true,

	// Show references to MDN in SCSS hovers.
	"scss.hover.references": true,

	// Invalid number of parameters.
	"scss.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"scss.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"scss.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"scss.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"scss.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"scss.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"scss.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"scss.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"scss.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"scss.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"scss.lint.important": "ignore",

	// Import statements do not load in parallel.
	"scss.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"scss.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"scss.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"scss.lint.unknownAtRules": "warning",

	// Unknown property.
	"scss.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"scss.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"scss.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"scss.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"scss.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"scss.validate": true,

	// Specifies how branches are sorted in quick pick menus and views
	//  - date:desc: Sorts branches by the most recent commit date in descending order
	//  - date:asc: Sorts branches by the most recent commit date in ascending order
	//  - name:asc: Sorts branches by name in ascending order
	//  - name:desc: Sorts branches by name in descending order
	"gitlens.sortBranchesBy": "date:desc",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Branches_ view
	"gitlens.views.branches.avatars": true,

	// Specifies how the _Branches_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.branches.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `tree` or `auto`
	"gitlens.views.branches.files.compact": true,

	// Specifies how the _Branches_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.branches.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.branches.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `auto`
	"gitlens.views.branches.files.threshold": 5,

	// Specifies whether to query for pull requests associated with branches and commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with branches in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForCommits": true,

	// Specifies whether to reveal branches in the _Branches_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.branches.reveal": true,

	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) in the _Branches_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the branch with a user-selected reference
	"gitlens.views.branches.showBranchComparison": "branch",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Remotes_ view
	"gitlens.views.remotes.avatars": true,

	// Specifies how the _Remotes_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.remotes.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `tree` or `auto`
	"gitlens.views.remotes.files.compact": true,

	// Specifies how the _Remotes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.remotes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.remotes.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `auto`
	"gitlens.views.remotes.files.threshold": 5,

	// Specifies whether to query for pull requests associated with branches and commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with branches in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForCommits": true,

	// Specifies whether to reveal remotes in the _Remotes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.remotes.reveal": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `tree` or `auto`
	"gitlens.views.stashes.files.compact": true,

	// Specifies how the _Stashes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.stashes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.stashes.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `auto`
	"gitlens.views.stashes.files.threshold": 5,

	// Specifies whether to reveal stashes in the _Stashes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.stashes.reveal": true,

	// Specifies how tags are sorted in quick pick menus and views
	//  - date:desc: Sorts tags by date in descending order
	//  - date:asc: Sorts tags by date in ascending order
	//  - name:asc: Sorts tags by name in ascending order
	//  - name:desc: Sorts tags by name in descending order
	"gitlens.sortTagsBy": "date:desc",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Tags_ view
	"gitlens.views.tags.avatars": true,

	// Specifies how the _Tags_ view will display tags
	//  - list: Displays tags as a list
	//  - tree: Displays tags as a tree when tags names contain slashes `/`
	"gitlens.views.tags.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `tree` or `auto`
	"gitlens.views.tags.files.compact": true,

	// Specifies how the _Tags_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.tags.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.tags.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `auto`
	"gitlens.views.tags.files.threshold": 5,

	// Specifies whether to reveal tags in the _Tags_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.tags.reveal": true,

	// Specifies how contributors are sorted in quick pick menus and views
	//  - count:desc: Sorts contributors by commit count in descending order
	//  - count:asc: Sorts contributors by commit count in ascending order
	//  - date:desc: Sorts contributors by the most recent commit date in descending order
	//  - date:asc: Sorts contributors by the most recent commit date in ascending order
	//  - name:asc: Sorts contributors by name in ascending order
	//  - name:desc: Sorts contributors by name in descending order
	"gitlens.sortContributorsBy": "count:desc",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Contributors_ view
	"gitlens.views.contributors.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `tree` or `auto`
	"gitlens.views.contributors.files.compact": true,

	// Specifies how the _Contributors_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.contributors.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.contributors.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `auto`
	"gitlens.views.contributors.files.threshold": 5,

	// Specifies whether to query for pull requests associated with branches and commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.showForCommits": true,

	// Specifies whether to show commits from all branches in the _Contributors_ view
	"gitlens.views.contributors.showAllBranches": false,

	// Specifies whether to show contributor statistics in the _Contributors_ view. This can take a while to compute depending on the repository size
	"gitlens.views.contributors.showStatistics": false,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Search & Compare_ view
	"gitlens.views.searchAndCompare.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `tree` or `auto`
	"gitlens.views.searchAndCompare.files.compact": true,

	// Specifies how the _Search & Compare_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.searchAndCompare.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.searchAndCompare.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `auto`
	"gitlens.views.searchAndCompare.files.threshold": 5,

	// Specifies whether to query for pull requests associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.showForCommits": true,

	// When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
	"extensions.autoCheckUpdates": true,

	// Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service.
	//  - true: Download and install updates automatically for all extensions.
	//  - onlyEnabledExtensions: Download and install updates automatically only for enabled extensions. Disabled extensions will not be updated automatically.
	//  - false: Extensions are not automatically updated.
	"extensions.autoUpdate": true,

	// When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
	"extensions.closeExtensionDetailsOnViewChange": false,

	// When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.
	"extensions.confirmedUriHandlerExtensionIds": [],

	// When enabled, the notifications for extension recommendations will not be shown.
	"extensions.ignoreRecommendations": false,

	// This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default.
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,

	// Override the untrusted workspace support of an extension. Extensions using `true` will always be enabled. Extensions using `limited` will always be enabled, and the extension will hide functionality that requires trust. Extensions using `false` will only be enabled only when the workspace is trusted.
	"extensions.supportUntrustedWorkspaces": {},

	// Override the virtual workspaces support of an extension.
	"extensions.supportVirtualWorkspaces": {
		"pub.name": false
	},

	// Enable web worker extension host.
	//  - true: The Web Worker Extension Host will always be launched.
	//  - false: The Web Worker Extension Host will never be launched.
	//  - auto: The Web Worker Extension Host will be launched when a web extension needs it.
	"extensions.webWorker": "auto",

	// Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.
	"output.smartScroll.enabled": true,

	// List of extensions to be ignored while synchronizing. The identifier of an extension is always `${publisher}.${name}`. For example: `vscode.csharp`.
	"settingsSync.ignoredExtensions": [],

	// Configure settings to be ignored while synchronizing.
	"settingsSync.ignoredSettings": [],

	// Synchronize keybindings for each platform.
	"settingsSync.keybindingsPerPlatform": true,

	// Controls whether code cells in the interactive window are collapsed by default.
	"interactiveWindow.collapseCellInputCode": "fromEditor",

	// When enabled notebook breadcrumbs contain code cells.
	"notebook.breadcrumbs.showCodeCells": true,

	// Controls where the focus indicator is rendered, either along the cell borders or on the left gutter
	"notebook.cellFocusIndicator": "gutter",

	// Where the cell toolbar should be shown, or whether it should be hidden.
	"notebook.cellToolbarLocation": {
		"default": "right"
	},

	// Whether the cell toolbar should appear on hover or click.
	"notebook.cellToolbarVisibility": "click",

	// Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width.
	"notebook.compactView": true,

	// Control whether outputs action should be rendered in the output toolbar.
	"notebook.consolidatedOutputButton": true,

	// Control whether extra actions are shown in a dropdown next to the run button.
	"notebook.consolidatedRunButton": false,

	// Whether to use the enhanced text diff editor for notebook.
	"notebook.diff.enablePreview": true,

	// Hide Metadata Differences
	"notebook.diff.ignoreMetadata": false,

	// Hide Outputs Differences
	"notebook.diff.ignoreOutputs": false,

	// Priority list for output mime types
	"notebook.displayOrder": [],

	// Control whether the notebook editor should allow moving cells through drag and drop.
	"notebook.dragAndDropEnabled": true,

	// Settings for code editors used in notebooks. This can be used to customize most editor.* settings.
	"notebook.editorOptionsCustomizations": {},

	// Control whether to render a global toolbar inside the notebook editor.
	"notebook.globalToolbar": true,

	// Control whether the actions on the notebook toolbar should render label or not.
	"notebook.globalToolbarShowLabel": "always",

	// Control where the insert cell actions should appear.
	//  - betweenCells: A toolbar that appears on hover between cells.
	//  - notebookToolbar: The toolbar at the top of the notebook editor.
	//  - both: Both toolbars.
	//  - hidden: The insert actions don't appear anywhere.
	"notebook.insertToolbarLocation": "both",

	// Controls the display of line numbers in the cell editor.
	"notebook.lineNumbers": "off",

	// Controls the font size in pixels of rendered markup in notebooks. When set to `0`, 120% of `editor.fontSize` is used.
	"notebook.markup.fontSize": 0,

	// When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line.
	"notebook.navigation.allowNavigateToSurroundingCells": true,

	// When enabled notebook outline shows code cells.
	"notebook.outline.showCodeCells": false,

	// Control how many lines of text in a text output is rendered.
	"notebook.output.textLineLimit": 30,

	// Whether the cell status bar should be shown.
	//  - hidden: The cell Status bar is always hidden.
	//  - visible: The cell Status bar is always visible.
	//  - visibleAfterExecute: The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status.
	"notebook.showCellStatusBar": "visible",

	// Controls when the Markdown header folding arrow is shown.
	//  - always: The folding controls are always visible.
	//  - mouseover: The folding controls are visible only on mouseover.
	"notebook.showFoldingControls": "mouseover",

	// Whether to use separate undo/redo stack for each cell.
	"notebook.undoRedoPerCell": true,

	// When opening a file from the explorer in a terminal, determines what kind of terminal will be launched
	//  - integrated: Use VS Code's integrated terminal.
	//  - external: Use the configured external terminal.
	"terminal.explorerKind": "integrated",

	// Customizes which terminal to run on Linux.
	"terminal.external.linuxExec": "xterm",

	// Customizes which terminal application to run on macOS.
	"terminal.external.osxExec": "Terminal.app",

	// Customizes which terminal to run on Windows.
	"terminal.external.windowsExec": "C:\\WINDOWS\\System32\\cmd.exe",

	// Specifies whether to show avatar images in the gutter blame annotations
	"gitlens.blame.avatars": true,

	// Specifies whether to compact (deduplicate) matching adjacent gutter blame annotations
	"gitlens.blame.compact": true,

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in gutter blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.blame.dateFormat": null,

	// Specifies the format of the gutter blame annotations. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.blame.dateFormat` setting
	"gitlens.blame.format": "${message|50?} ${agoOrDate|14-}",

	// Specifies whether to provide a heatmap indicator in the gutter blame annotations
	"gitlens.blame.heatmap.enabled": true,

	// Specifies where the heatmap indicators will be shown in the gutter blame annotations
	//  - left: Adds a heatmap indicator on the left edge of the gutter blame annotations
	//  - right: Adds a heatmap indicator on the right edge of the gutter blame annotations
	"gitlens.blame.heatmap.location": "right",

	// Specifies whether to highlight lines associated with the current line
	"gitlens.blame.highlight.enabled": true,

	// Specifies where the associated line highlights will be shown
	//  - gutter: Adds a gutter indicator
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds a decoration to the overview ruler (scroll bar)
	"gitlens.blame.highlight.locations": [
		"gutter",
		"line",
		"overview"
	],

	// Specifies whether gutter blame annotations will be separated by a small gap
	"gitlens.blame.separateLines": true,

	// Specifies how the gutter blame annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.blame.toggleMode": "file",

	// Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `terminal.integrated.commandsToSkipShell`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).
	"terminal.integrated.allowChords": true,

	// Whether to allow menubar mnemonics (eg. alt+f) to trigger the open the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.
	"terminal.integrated.allowMnemonics": false,

	// If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when `editor.multiCursorModifier` is set to `'alt'` (the default value). This may not work reliably depending on your shell.
	"terminal.integrated.altClickMovesCursor": true,

	// The terminal profile to use on Linux for automation-related terminal usage like tasks and debug. This setting will currently be ignored if #terminal.integrated.automationShell.linux# is set.
	"terminal.integrated.automationProfile.linux": null,

	// The terminal profile to use on macOS for automation-related terminal usage like tasks and debug. This setting will currently be ignored if #terminal.integrated.automationShell.osx# is set.
	"terminal.integrated.automationProfile.osx": null,

	// The terminal profile to use for automation-related terminal usage like tasks and debug. This setting will currently be ignored if #terminal.integrated.automationShell.windows# is set.
	"terminal.integrated.automationProfile.windows": null,

	// This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.linux`. This will currently take priority over the new automation profile settings but that will change in the future.
	// A path that when set will override `terminal.integrated.shell.linux` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.linux": null,

	// This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.osx`. This will currently take priority over the new automation profile settings but that will change in the future.
	// A path that when set will override `terminal.integrated.shell.osx` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.osx": null,

	// This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.windows`. This will currently take priority over the new automation profile settings but that will change in the future.
	// A path that when set will override `terminal.integrated.shell.windows` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.windows": null,

	// A set of messages that when encountered in the terminal will be automatically responded to. Provided the message is specific enough, this can help automate away common responses.
	// 
	// Remarks:
	// 
	// - Use `"Terminate batch job (Y/N)": "\r"` to automatically respond to the terminate batch job prompt on Windows.
	// - The message includes escape sequences so the reply might not happen with styled text.
	// - Each reply can only happen once every second.
	// - Use `"\r"` in the reply to mean the enter key.
	// - To unset a default key, set the value to null.
	// - Restart VS Code if new don't apply.
	"terminal.integrated.autoReplies": {},

	// The number of milliseconds to show the bell within a terminal tab when triggered.
	"terminal.integrated.bellDuration": 1000,

	// A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by VS Code. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.
	// 
	// &nbsp;
	// 
	// Many commands are skipped by default. To override a default and pass that command's keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.
	// 
	// &nbsp;
	// 
	// The following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, [open the default settings JSON](command:workbench.action.openRawDefaultSettings 'Open Default Settings (JSON)') and search for the first command from the list below.
	// 
	// &nbsp;
	// 
	// Default Skipped Commands:
	// 
	// - editor.action.toggleTabFocusMode
	// - notifications.hideList
	// - notifications.hideToasts
	// - workbench.action.debug.continue
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.killEditor
	// - workbench.action.terminal.moveToEditor
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.moveToTerminalPanel
	// - workbench.action.terminal.navigationModeExit
	// - workbench.action.terminal.navigationModeFocusNext
	// - workbench.action.terminal.navigationModeFocusPrevious
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.pasteSelection
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.sizeToContentWidth
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],

	// Controls whether to confirm when the window closes if there are active terminal sessions.
	//  - never: Never confirm.
	//  - always: Always confirm if there are terminals.
	//  - hasChildProcesses: Confirm if there are any terminals that have child processes.
	"terminal.integrated.confirmOnExit": "never",

	// Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don't run their processes as child processes of the shell.
	//  - never: Never confirm.
	//  - editor: Confirm if the terminal is in the editor.
	//  - panel: Confirm if the terminal is in the panel.
	//  - always: Confirm if the terminal is either in the editor or panel.
	"terminal.integrated.confirmOnKill": "editor",

	// Controls whether text selected in the terminal will be copied to the clipboard.
	"terminal.integrated.copyOnSelection": false,

	// Controls whether the terminal cursor blinks.
	"terminal.integrated.cursorBlinking": false,

	// Controls the style of terminal cursor.
	"terminal.integrated.cursorStyle": "block",

	// Controls the width of the cursor when `terminal.integrated.cursorStyle` is set to `line`.
	"terminal.integrated.cursorWidth": 1,

	// Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn't work with the DOM renderer
	"terminal.integrated.customGlyphs": true,

	// An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
	"terminal.integrated.cwd": "",

	// Controls where newly created terminals will appear.
	//  - editor: Create terminals in the editor
	//  - view: Create terminals in the terminal view
	"terminal.integrated.defaultLocation": "view",

	// The default profile used on Linux. This setting will currently be ignored if either `terminal.integrated.shell.linux` or `terminal.integrated.shellArgs.linux` are set.
	"terminal.integrated.defaultProfile.linux": null,

	// The default profile used on macOS. This setting will currently be ignored if either `terminal.integrated.shell.osx` or `terminal.integrated.shellArgs.osx` are set.
	"terminal.integrated.defaultProfile.osx": null,

	// The default profile used on Windows. This setting will currently be ignored if either `terminal.integrated.shell.windows` or `terminal.integrated.shellArgs.windows` are set.
	//  - PowerShell: $(terminal-powershell) PowerShell
	// - path: C:\Program Files\PowerShell\7\pwsh.exe
	//  - Windows PowerShell: $(terminal-powershell) Windows PowerShell
	// - path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
	//  - Git Bash: $(terminal) Git Bash
	// - path: C:\Program Files\Git\bin\bash.exe
	// - args: ['--login']
	//  - Command Prompt: $(terminal-cmd) Command Prompt
	// - path: C:\WINDOWS\System32\cmd.exe
	// - args: []
	//  - C:\WINDOWS\System32\wsl.exe (migrated): $(terminal) C:\WINDOWS\System32\wsl.exe (migrated)
	// - path: C:\WINDOWS\System32\wsl.exe
	// - args: []
	//  - C:\Program Files\PowerShell\7\pwsh.exe (migrated): $(terminal) C:\Program Files\PowerShell\7\pwsh.exe (migrated)
	// - path: C:\Program Files\PowerShell\7\pwsh.exe
	// - args: []
	//  - Ubuntu (WSL): $(terminal) Ubuntu (WSL)
	// - path: C:\WINDOWS\System32\bash.exe
	// - args: ['-d','Ubuntu']
	//  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
	// - extensionIdenfifier: ms-vscode.js-debug
	"terminal.integrated.defaultProfile.windows": null,

	// Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.
	//  - auto: Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.
	//  - off: Do not set the `$LANG` environment variable.
	//  - on: Always set the `$LANG` environment variable.
	"terminal.integrated.detectLocale": "auto",

	// Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
	"terminal.integrated.drawBoldTextInBrightColors": true,

	// Controls whether the terminal bell is enabled, this shows up as a visual bell next to the terminal's name.
	"terminal.integrated.enableBell": false,

	// Whether to enable file links in the terminal. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.
	"terminal.integrated.enableFileLinks": true,

	// Show a warning dialog when pasting multiple lines into the terminal.
	"terminal.integrated.enableMultiLinePasteWarning": true,

	// Persist terminal sessions for the workspace across window reloads.
	"terminal.integrated.enablePersistentSessions": true,

	// Enable the experimental shell integration feature which will turn on certain features like enhanced command tracking and current working directory detection. Shell integration works by injecting a script that is run when the shell is initialized which lets the terminal gain additional insights into what is happening within the terminal, the script injection may not work if you have custom arguments defined in the terminal profile.
	// 
	// Supported shells:
	// 
	// - Linux/macOS: bash, pwsh, zsh
	//  - Windows: pwsh
	"terminal.integrated.enableShellIntegration": false,

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
	"terminal.integrated.env.linux": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
	"terminal.integrated.env.osx": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
	"terminal.integrated.env.windows": {},

	// Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.
	//  - off: Disable the indicator.
	//  - on: Enable the indicator.
	//  - warnonly: Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension.
	"terminal.integrated.environmentChangesIndicator": "warnonly",

	// Whether to relaunch terminals automatically if extension want to contribute to their environment and have not been interacted with yet.
	"terminal.integrated.environmentChangesRelaunch": true,

	// Scrolling speed multiplier when pressing `Alt`.
	"terminal.integrated.fastScrollSensitivity": 5,

	// Controls the font family of the terminal, this defaults to `editor.fontFamily`'s value.
	"terminal.integrated.fontFamily": "",

	// Controls the font size in pixels of the terminal.
	"terminal.integrated.fontSize": 14,

	// The font weight to use within the terminal for non-bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"terminal.integrated.fontWeight": "normal",

	// The font weight to use within the terminal for bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"terminal.integrated.fontWeightBold": "bold",

	// Controls whether the terminal will leverage the GPU to do its rendering.
	//  - auto: Let VS Code detect which renderer will give the best experience.
	//  - on: Enable GPU acceleration within the terminal.
	//  - off: Disable GPU acceleration within the terminal.
	//  - canvas: Use the fallback canvas renderer within the terminal. This uses a 2d context instead of webgl and may be better on some systems.
	"terminal.integrated.gpuAcceleration": "auto",

	// A set of process names to ignore when using the `terminal.integrated.confirmOnKill` setting.
	"terminal.integrated.ignoreProcessNames": [
		"starship",
		"oh-my-posh",
		"bash",
		"zsh"
	],

	// Whether new shells should inherit their environment from VS Code, which may source a login shell to ensure $PATH and other development variables are initialized. This has no effect on Windows.
	"terminal.integrated.inheritEnv": true,

	// Controls the letter spacing of the terminal, this is an integer value which represents the amount of additional pixels to add between characters.
	"terminal.integrated.letterSpacing": 0,

	// Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
	"terminal.integrated.lineHeight": 1,

	// When local echo should be enabled. This will override `terminal.integrated.localEchoLatencyThreshold`
	//  - on: Always enabled
	//  - off: Always disabled
	//  - auto: Enabled only for remote workspaces
	"terminal.integrated.localEchoEnabled": "auto",

	// Local echo will be disabled when any of these program names are found in the terminal title.
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],

	// Length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled.
	"terminal.integrated.localEchoLatencyThreshold": 30,

	// Terminal style of locally echoed text; either a font style or an RGB color.
	"terminal.integrated.localEchoStyle": "dim",

	// Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
	"terminal.integrated.macOptionClickForcesSelection": false,

	// Controls whether to treat the option key as the meta key in the terminal on macOS.
	"terminal.integrated.macOptionIsMeta": false,

	// When set the foreground color of each cell will change to try meet the contrast ratio specified. Example values:
	// 
	// - 1: The default, do nothing.
	// - 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html).
	// - 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
	// - 21: White on black or black on white.
	"terminal.integrated.minimumContrastRatio": 1,

	// A multiplier to be used on the `deltaY` of mouse wheel scroll events.
	"terminal.integrated.mouseWheelScrollSensitivity": 1,

	// When the terminal process must be shutdown (eg. on window or application close), this determines when the previous terminal session contents should be restored and processes be recreated when the workspace is next opened.
	// 
	// Caveats:
	// 
	// - Restoring of the process current working directory depends on whether it is supported by the shell.
	// - Time to persist the session during shutdown is limited, so it may be aborted when using high-latency remote connections.
	//  - onExit: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu).
	//  - onExitAndWindowClose: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed.
	//  - never: Never restore the terminal buffers or recreate the process.
	"terminal.integrated.persistentSessionReviveProcess": "onExit",

	// Controls the maximum amount of lines that will be restored when reconnecting to a persistent terminal session. Increasing this will restore more lines of scrollback at the cost of more memory and increase the time it takes to connect to terminals on start up. This setting requires a restart to take effect and should be set to a value less than or equal to `terminal.integrated.scrollback`.
	"terminal.integrated.persistentSessionScrollback": 100,

	// The Linux profiles to present when creating a new terminal via the terminal dropdown. Set the `path` property manually with an optional `args`.
	// 
	// Set an existing profile to `null` to hide the profile from the list, for example: `"bash": null`.
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash",
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// The macOS profiles to present when creating a new terminal via the terminal dropdown. Set the `path` property manually with an optional `args`.
	// 
	// Set an existing profile to `null` to hide the profile from the list, for example: `"bash": null`.
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash",
			"args": [
				"-l"
			],
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh",
			"args": [
				"-l"
			]
		},
		"fish": {
			"path": "fish",
			"args": [
				"-l"
			]
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// The Windows profiles to present when creating a new terminal via the terminal dropdown. Use the `source` property to automatically detect the shell's location. Or set the `path` property manually with an optional `args`.
	// 
	// Set an existing profile to `null` to hide the profile from the list, for example: `"Ubuntu-20.04 (WSL)": null`.
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell",
			"icon": "terminal-powershell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": [],
			"icon": "terminal-cmd"
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},

	// Controls how terminal reacts to right click.
	//  - default: Show the context menu.
	//  - copyPaste: Copy when there is a selection, otherwise paste.
	//  - paste: Paste on right click.
	//  - selectWord: Select the word under the cursor and show the context menu.
	"terminal.integrated.rightClickBehavior": "copyPaste",

	// Controls the maximum amount of lines the terminal keeps in its buffer.
	"terminal.integrated.scrollback": 1000,

	// Dispatches most keybindings to the terminal instead of the workbench, overriding `terminal.integrated.commandsToSkipShell`, which can be used alternatively for fine tuning.
	"terminal.integrated.sendKeybindingsToShell": false,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.linux#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.linux`. This will currently take priority over the new profiles settings but that will change in the future.
	// The path of the shell that the terminal uses on Linux. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.linux": null,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.osx#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.osx`. This will currently take priority over the new profiles settings but that will change in the future.
	// The path of the shell that the terminal uses on macOS. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.osx": null,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows`. This will currently take priority over the new profiles settings but that will change in the future.
	// The path of the shell that the terminal uses on Windows. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.windows": null,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.linux#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.linux`. This will currently take priority over the new profiles settings but that will change in the future.
	// The command line arguments to use when on the Linux terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shellArgs.linux": [],

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.osx#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.osx`. This will currently take priority over the new profiles settings but that will change in the future.
	// The command line arguments to use when on the macOS terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shellArgs.osx": [
		"-l"
	],

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows`. This will currently take priority over the new profiles settings but that will change in the future.
	// The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shellArgs.windows": [],

	// Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
	"terminal.integrated.showExitAlert": true,

	// Whether to show hovers for links in the terminal output.
	"terminal.integrated.showLinkHover": true,

	// Whether to show the shell integration activated welcome message in the terminal when the feature is enabled.
	"terminal.integrated.showShellIntegrationWelcome": true,

	// Controls the working directory a split terminal starts with.
	//  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
	//  - initial: A new split terminal will use the working directory that the parent terminal started with.
	//  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
	"terminal.integrated.splitCwd": "inherited",

	// Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:
	// - `${cwd}`: the terminal's current working directory
	// - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
	// - `${workspaceFolder}`: the workspace in which the terminal was launched
	// - `${local}`: indicates a local terminal in a remote workspace
	// - `${process}`: the name of the terminal process
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	// - `${sequence}`: the name provided to xterm.js by the process
	// - `${task}`: indicates this terminal is associated with a task
	"terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

	// Controls whether terminal tab statuses support animation (eg. in progress tasks).
	"terminal.integrated.tabs.enableAnimation": true,

	// Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.
	"terminal.integrated.tabs.enabled": true,

	// Controls whether focusing the terminal of a tab happens on double or single click.
	//  - singleClick: Focus the terminal when clicking a terminal tab
	//  - doubleClick: Focus the terminal when double clicking a terminal tab
	"terminal.integrated.tabs.focusMode": "doubleClick",

	// Controls whether the terminal tabs view will hide under certain conditions.
	//  - never: Never hide the terminal tabs view
	//  - singleTerminal: Hide the terminal tabs view when there is only a single terminal opened
	//  - singleGroup: Hide the terminal tabs view when there is only a single terminal group opened
	"terminal.integrated.tabs.hideCondition": "singleTerminal",

	// Controls the location of the terminal tabs, either to the left or right of the actual terminal(s).
	//  - left: Show the terminal tabs view to the left of the terminal
	//  - right: Show the terminal tabs view to the right of the terminal
	"terminal.integrated.tabs.location": "right",

	// Separator used by `terminal.integrated.tabs.title` and `terminal.integrated.tabs.title`.
	"terminal.integrated.tabs.separator": " - ",

	// Controls whether terminal split and kill buttons are displays next to the new terminal button.
	//  - always: Always show the actions
	//  - singleTerminal: Show the actions when it is the only terminal opened
	//  - singleTerminalOrNarrow: Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state
	//  - never: Never show the actions
	"terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

	// Shows the active terminal information in the view, this is particularly useful when the title within the tabs aren't visible.
	//  - always: Always show the active terminal
	//  - singleTerminal: Show the active terminal when it is the only terminal opened
	//  - singleTerminalOrNarrow: Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state
	//  - never: Never show the active terminal
	"terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

	// Controls the terminal title. Variables are substituted based on the context:
	// - `${cwd}`: the terminal's current working directory
	// - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
	// - `${workspaceFolder}`: the workspace in which the terminal was launched
	// - `${local}`: indicates a local terminal in a remote workspace
	// - `${process}`: the name of the terminal process
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	// - `${sequence}`: the name provided to xterm.js by the process
	// - `${task}`: indicates this terminal is associated with a task
	"terminal.integrated.tabs.title": "${process}",

	// Controls what version of unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.
	//  - 6: Version 6 of unicode, this is an older version which should work better on older systems.
	//  - 11: Version 11 of unicode, this version provides better support on modern systems that use modern versions of unicode.
	"terminal.integrated.unicodeVersion": "11",

	// Controls whether or not WSL distros are shown in the terminal dropdown
	"terminal.integrated.useWslProfiles": true,

	// Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.
	"terminal.integrated.windowsEnableConpty": true,

	// A string containing all characters to be considered word separators by the double click to select word feature.
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’",

	// Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.
	"task.autoDetect": "on",

	// Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.
	"task.problemMatchers.neverPrompt": false,

	// Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.
	"task.quickOpen.detail": true,

	// Controls the number of recent items tracked in task quick open dialog.
	"task.quickOpen.history": 30,

	// Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.
	"task.quickOpen.showAll": false,

	// Controls whether the task quick pick is skipped when there is only one task to pick from.
	"task.quickOpen.skip": false,

	// Save all dirty editors before running a task.
	//  - always: Always saves all editors before running.
	//  - never: Never saves editors before running.
	//  - prompt: Prompts whether to save editors before running.
	"task.saveBeforeRun": "always",

	// Configures whether a warning is shown when a provider is slow
	"task.slowProviderWarning": true,

	// Controls whether Problems view should automatically reveal files when opening them.
	"problems.autoReveal": true,

	// Show Errors & Warnings on files and folder.
	"problems.decorations.enabled": true,

	// When enabled shows the current problem in the status bar.
	"problems.showCurrentInStatus": false,

	// Controls the order in which problems are navigated.
	//  - severity: Navigate problems ordered by severity
	//  - position: Navigate problems ordered by position
	"problems.sortOrder": "severity",

	// Enable/disable navigation breadcrumbs.
	"breadcrumbs.enabled": true,

	// Controls whether and how file paths are shown in the breadcrumbs view.
	//  - on: Show the file path in the breadcrumbs view.
	//  - off: Do not show the file path in the breadcrumbs view.
	//  - last: Only show the last element of the file path in the breadcrumbs view.
	"breadcrumbs.filePath": "on",

	// Render breadcrumb items with icons.
	"breadcrumbs.icons": true,

	// When enabled breadcrumbs show `array`-symbols.
	"breadcrumbs.showArrays": true,

	// When enabled breadcrumbs show `boolean`-symbols.
	"breadcrumbs.showBooleans": true,

	// When enabled breadcrumbs show `class`-symbols.
	"breadcrumbs.showClasses": true,

	// When enabled breadcrumbs show `constant`-symbols.
	"breadcrumbs.showConstants": true,

	// When enabled breadcrumbs show `constructor`-symbols.
	"breadcrumbs.showConstructors": true,

	// When enabled breadcrumbs show `enumMember`-symbols.
	"breadcrumbs.showEnumMembers": true,

	// When enabled breadcrumbs show `enum`-symbols.
	"breadcrumbs.showEnums": true,

	// When enabled breadcrumbs show `event`-symbols.
	"breadcrumbs.showEvents": true,

	// When enabled breadcrumbs show `field`-symbols.
	"breadcrumbs.showFields": true,

	// When enabled breadcrumbs show `file`-symbols.
	"breadcrumbs.showFiles": true,

	// When enabled breadcrumbs show `function`-symbols.
	"breadcrumbs.showFunctions": true,

	// When enabled breadcrumbs show `interface`-symbols.
	"breadcrumbs.showInterfaces": true,

	// When enabled breadcrumbs show `key`-symbols.
	"breadcrumbs.showKeys": true,

	// When enabled breadcrumbs show `method`-symbols.
	"breadcrumbs.showMethods": true,

	// When enabled breadcrumbs show `module`-symbols.
	"breadcrumbs.showModules": true,

	// When enabled breadcrumbs show `namespace`-symbols.
	"breadcrumbs.showNamespaces": true,

	// When enabled breadcrumbs show `null`-symbols.
	"breadcrumbs.showNull": true,

	// When enabled breadcrumbs show `number`-symbols.
	"breadcrumbs.showNumbers": true,

	// When enabled breadcrumbs show `object`-symbols.
	"breadcrumbs.showObjects": true,

	// When enabled breadcrumbs show `operator`-symbols.
	"breadcrumbs.showOperators": true,

	// When enabled breadcrumbs show `package`-symbols.
	"breadcrumbs.showPackages": true,

	// When enabled breadcrumbs show `property`-symbols.
	"breadcrumbs.showProperties": true,

	// When enabled breadcrumbs show `string`-symbols.
	"breadcrumbs.showStrings": true,

	// When enabled breadcrumbs show `struct`-symbols.
	"breadcrumbs.showStructs": true,

	// When enabled breadcrumbs show `typeParameter`-symbols.
	"breadcrumbs.showTypeParameters": true,

	// When enabled breadcrumbs show `variable`-symbols.
	"breadcrumbs.showVariables": true,

	// Controls whether and how symbols are shown in the breadcrumbs view.
	//  - on: Show all symbols in the breadcrumbs view.
	//  - off: Do not show symbols in the breadcrumbs view.
	//  - last: Only show the current symbol in the breadcrumbs view.
	"breadcrumbs.symbolPath": "on",

	// Controls how symbols are sorted in the breadcrumbs outline view.
	//  - position: Show symbol outline in file position order.
	//  - name: Show symbol outline in alphabetical order.
	//  - type: Show symbol outline in symbol type order.
	"breadcrumbs.symbolSortOrder": "position",

	// Specifies where the indicators of the gutter changes annotations will be shown
	//  - gutter: Adds a gutter indicator
	//  - overview: Adds a decoration to the overview ruler (scroll bar)
	"gitlens.changes.locations": [
		"gutter",
		"overview"
	],

	// Specifies how the gutter changes annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.changes.toggleMode": "file",

	// Specifies the age of the most recent change (in days) after which the gutter heatmap annotations will be cold rather than hot (i.e. will use `gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor`)
	"gitlens.heatmap.ageThreshold": 90,

	// Specifies the base color of the gutter heatmap annotations when the most recent change is older (cold) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.coldColor": "#0a60f6",

	// Specifies the base color of the gutter heatmap annotations when the most recent change is newer (hot) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.hotColor": "#f66a0a",

	// Specifies where the indicators of the gutter heatmap annotations will be shown
	//  - gutter: Adds a gutter indicator
	//  - overview: Adds a decoration to the overview ruler (scroll bar)
	"gitlens.heatmap.locations": [
		"gutter",
		"overview"
	],

	// Specifies how the gutter heatmap annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.heatmap.toggleMode": "file",

	// Specifies whether to dismiss the _Git Command Palette_ when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.gitCommands.closeOnFocusOut": true,

	// Specifies whether to match all or any commit message search patterns
	"gitlens.gitCommands.search.matchAll": false,

	// Specifies whether to match commit search patterns with or without regard to casing
	"gitlens.gitCommands.search.matchCase": false,

	// Specifies whether to match commit search patterns using regular expressions
	"gitlens.gitCommands.search.matchRegex": true,

	// Specifies whether to show the commit search results directly in the quick pick menu, in the Side Bar, or will be based on the context
	"gitlens.gitCommands.search.showResultsInSideBar": null,

	// Deprecated. This setting has been renamed to `gitlens.gitCommands.search.showResultsInSideBar`
	// 
	"gitlens.gitCommands.search.showResultsInView": null,

	// Specifies which (and when) Git commands will skip the confirmation step, using the format: `git-command-name:(menu|command)`
	//  - branch-create:command: Skips branch create confirmations when run from a command, e.g. a view action
	//  - branch-create:menu: Skips branch create confirmations when run from the Git Command Palette
	//  - co-authors:command: Skips co-author confirmations when run from a command, e.g. a view action
	//  - co-authors:menu: Skips co-author confirmations when run from the Git Command Palette
	//  - fetch:command: Skips fetch confirmations when run from a command, e.g. a view action
	//  - fetch:menu: Skips fetch confirmations when run from the Git Command Palette
	//  - pull:command: Skips pull confirmations when run from a command, e.g. a view action
	//  - pull:menu: Skips pull confirmations when run from the Git Command Palette
	//  - push:command: Skips push confirmations when run from a command, e.g. a view action
	//  - push:menu: Skips push confirmations when run from the Git Command Palette
	//  - stash-apply:command: Skips stash apply confirmations when run from a command, e.g. a view action
	//  - stash-apply:menu: Skips stash apply confirmations when run from the Git Command Palette
	//  - stash-pop:command: Skips stash pop confirmations when run from a command, e.g. a view action
	//  - stash-pop:menu: Skips stash pop confirmations when run from the Git Command Palette
	//  - stash-push:command: Skips stash push confirmations when run from a command, e.g. a view action
	//  - stash-push:menu: Skips stash push confirmations when run from the Git Command Palette
	//  - switch:command: Skips switch confirmations when run from a command, e.g. a view action
	//  - switch:menu: Skips switch confirmations when run from the Git Command Palette
	//  - tag-create:command: Skips tag create confirmations when run from a command, e.g. a view action
	//  - tag-create:menu: Skips tag create confirmations when run from the Git Command Palette
	"gitlens.gitCommands.skipConfirmations": [
		"fetch:command",
		"stash-push:command",
		"switch:command"
	],

	// Specifies how Git commands are sorted in the _Git Command Palette_
	//  - name: Sorts commands by name
	//  - usage: Sorts commands by last used date
	"gitlens.gitCommands.sortBy": "usage",

	// If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the `telemetry.telemetryLevel` setting.
	// Enable crash reports to be collected. This helps us improve stability. 
	// This option requires restart to take effect.
	"telemetry.enableCrashReporter": true,

	// If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated in favor of the `telemetry.telemetryLevel` setting.
	// Enable diagnostic data to be collected. This helps us to better understand how Visual Studio Code - Insiders is performing and where improvements need to be made. [Read more](https://go.microsoft.com/fwlink/?LinkId=786907) about what we collect and our privacy statement.
	"telemetry.enableTelemetry": true,

	// 
	// Controls all core and first party extension telemetry. This helps us to better understand how Visual Studio Code - Insiders is performing, where improvements need to be made, and how features are being used. Read more about the [data we collect](https://aka.ms/vscode-telemetry) and our [privacy statement](https://go.microsoft.com/fwlink/?LinkId=786907). A full restart of the application is necessary for crash reporting changes to take effect.
	// 
	// &nbsp;
	// 
	// The following table outlines the data sent with each setting:
	// 
	// |       | Crash Reports | Error Telemetry | Usage Data |
	// |:------|:---------------------:|:---------------:|:--------------:|
	// | all   |            ✓          |        ✓        |        ✓       |
	// | error |            ✓          |        ✓        |        -       |
	// | crash |            ✓          |        -        |        -       |
	// | off   |            -          |        -        |        -       |
	// 
	// 
	// &nbsp;
	// 
	// ****Note:*** If this setting is 'off', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except 'off' and telemetry is disabled with deprecated settings, no telemetry will be sent.*
	// 
	//  - all: Sends usage data, errors, and crash reports.
	//  - error: Sends general error telemetry and crash reports.
	//  - crash: Sends OS level crash reports.
	//  - off: Disables all product telemetry.
	"telemetry.telemetryLevel": "all",

	// Specifies autolinks to external resources in commit messages. Use `<num>` as the variable for the reference number
	"gitlens.autolinks": null,

	// Specifies whether to enable rich integrations with any supported remote services
	"gitlens.integrations.enabled": true,

	// Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share
	"gitlens.liveshare.allowGuestAccess": true,

	// Specifies the configuration of a partner integration
	"gitlens.partners": null,

	// Specifies custom remote services to be matched with Git remotes to detect custom domains for built-in remote services or provide support for custom remote services
	"gitlens.remotes": null,

	// Specifies whether to enable terminal links &mdash; autolinks in the integrated terminal to quickly jump to more details for commits, branches, tags, and more
	"gitlens.terminalLinks.enabled": true,

	// Render Outline Elements with Icons.
	"outline.icons": true,

	// Use badges for Errors & Warnings.
	"outline.problems.badges": true,

	// Use colors for Errors & Warnings.
	"outline.problems.colors": true,

	// Show Errors & Warnings on Outline Elements.
	"outline.problems.enabled": true,

	// When enabled outline shows `array`-symbols.
	"outline.showArrays": true,

	// When enabled outline shows `boolean`-symbols.
	"outline.showBooleans": true,

	// When enabled outline shows `class`-symbols.
	"outline.showClasses": true,

	// When enabled outline shows `constant`-symbols.
	"outline.showConstants": true,

	// When enabled outline shows `constructor`-symbols.
	"outline.showConstructors": true,

	// When enabled outline shows `enumMember`-symbols.
	"outline.showEnumMembers": true,

	// When enabled outline shows `enum`-symbols.
	"outline.showEnums": true,

	// When enabled outline shows `event`-symbols.
	"outline.showEvents": true,

	// When enabled outline shows `field`-symbols.
	"outline.showFields": true,

	// When enabled outline shows `file`-symbols.
	"outline.showFiles": true,

	// When enabled outline shows `function`-symbols.
	"outline.showFunctions": true,

	// When enabled outline shows `interface`-symbols.
	"outline.showInterfaces": true,

	// When enabled outline shows `key`-symbols.
	"outline.showKeys": true,

	// When enabled outline shows `method`-symbols.
	"outline.showMethods": true,

	// When enabled outline shows `module`-symbols.
	"outline.showModules": true,

	// When enabled outline shows `namespace`-symbols.
	"outline.showNamespaces": true,

	// When enabled outline shows `null`-symbols.
	"outline.showNull": true,

	// When enabled outline shows `number`-symbols.
	"outline.showNumbers": true,

	// When enabled outline shows `object`-symbols.
	"outline.showObjects": true,

	// When enabled outline shows `operator`-symbols.
	"outline.showOperators": true,

	// When enabled outline shows `package`-symbols.
	"outline.showPackages": true,

	// When enabled outline shows `property`-symbols.
	"outline.showProperties": true,

	// When enabled outline shows `string`-symbols.
	"outline.showStrings": true,

	// When enabled outline shows `struct`-symbols.
	"outline.showStructs": true,

	// When enabled outline shows `typeParameter`-symbols.
	"outline.showTypeParameters": true,

	// When enabled outline shows `variable`-symbols.
	"outline.showVariables": true,

	// Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.defaultDateFormat": null,

	// Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.defaultDateShortFormat": null,

	// Specifies whether commit dates should use the authored or committed date
	//  - authored: Uses the date when the changes were authored (i.e. originally written)
	//  - committed: Uses the date when the changes were committed
	"gitlens.defaultDateSource": "authored",

	// Specifies how dates will be displayed by default
	//  - relative: e.g. 1 day ago
	//  - absolute: e.g. July 25th, 2018 7:18pm
	"gitlens.defaultDateStyle": "relative",

	// Specifies how times will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.defaultTimeFormat": null,

	// Specifies which commands will be added to which menus
	"gitlens.menus": {
		"editor": {
			"blame": false,
			"clipboard": true,
			"compare": true,
			"history": false,
			"remote": false
		},
		"editorGroup": {
			"blame": true,
			"compare": true
		},
		"editorTab": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"explorer": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"scm": {
			"authors": true
		},
		"scmGroupInline": {
			"stash": true
		},
		"scmGroup": {
			"compare": true,
			"openClose": true,
			"stash": true
		},
		"scmItem": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": false,
			"stash": true
		}
	},

	// Specifies the keymap to use for GitLens shortcut keys
	//  - alternate: Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)
	//  - chorded: Adds a chorded set of shortcut keys that start with `Ctrl+Alt+G` (`⌥⌘G` on macOS)
	//  - none: No shortcut keys will be added
	"gitlens.keymap": "chorded",

	// Specifies the active GitLens mode, if any
	"gitlens.mode.active": "",

	// Specifies the active GitLens mode alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.mode.statusBar.alignment": "right",

	// Specifies whether to provide the active GitLens mode in the status bar
	"gitlens.mode.statusBar.enabled": true,

	// Specifies the user-defined GitLens modes
	"gitlens.modes": {
		"zen": {
			"name": "Zen",
			"statusBarItemName": "Zen",
			"description": "for a zen-like experience, disables many visual features",
			"codeLens": false,
			"currentLine": false,
			"hovers": false,
			"statusBar": false
		},
		"review": {
			"name": "Review",
			"statusBarItemName": "Reviewing",
			"description": "for reviewing code, enables many visual features",
			"codeLens": true,
			"currentLine": true,
			"hovers": true
		}
	},

	// Specifies the length of abbreviated commit SHAs
	"gitlens.advanced.abbreviatedShaLength": 7,

	// Specifies whether to copy full or abbreviated commit SHAs to the clipboard. Abbreviates to the length of `gitlens.advanced.abbreviatedShaLength`.
	"gitlens.advanced.abbreviateShaOnCopy": false,

	// Specifies additional arguments to pass to the `git blame` command
	"gitlens.advanced.blame.customArguments": null,

	// Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit. Use 0 to specify an infinite wait
	"gitlens.advanced.blame.delayAfterEdit": 5000,

	// Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum
	"gitlens.advanced.blame.sizeThresholdAfterEdit": 5000,

	// Specifies whether git output will be cached — changing the default is not recommended
	"gitlens.advanced.caching.enabled": true,

	// Specifies the order by which commits will be shown. If unspecified, commits will be shown in reverse chronological order
	//  - null: Shows commits in reverse chronological order
	//  - date: Shows commits in reverse chronological order of the commit timestamp
	//  - author-date: Shows commits in reverse chronological order of the author timestamp
	//  - topo: Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history
	"gitlens.advanced.commitOrdering": null,

	// Specifies an optional external diff tool to use when comparing files. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDiffTool": null,

	// Specifies an optional external diff tool to use when comparing directories. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDirectoryDiffTool": null,

	// Specifies the maximum number of items to show in a list. Use 0 to specify no maximum
	"gitlens.advanced.maxListItems": 200,

	// Specifies the maximum number of items to show in a search. Use 0 to specify no maximum
	"gitlens.advanced.maxSearchItems": 200,

	// Specifies which messages should be suppressed
	"gitlens.advanced.messages": {
		"suppressCommitHasNoPreviousCommitWarning": false,
		"suppressCommitNotFoundWarning": false,
		"suppressCreatePullRequestPrompt": false,
		"suppressDebugLoggingWarning": false,
		"suppressFileNotUnderSourceControlWarning": false,
		"suppressGitDisabledWarning": false,
		"suppressGitMissingWarning": false,
		"suppressGitVersionWarning": false,
		"suppressImproperWorkspaceCasingWarning": false,
		"suppressLineUncommittedWarning": false,
		"suppressNoRepositoryWarning": false,
		"suppressRebaseSwitchToTextWarning": false
	},

	// Specifies whether to dismiss quick pick menus when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.advanced.quickPick.closeOnFocusOut": true,

	// Specifies how many folders deep to search for repositories
	"gitlens.advanced.repositorySearchDepth": 1,

	// Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename
	"gitlens.advanced.similarityThreshold": null,

	// Deprecated. This setting is no longer used
	// Deprecated. This setting is no longer used
	"gitlens.advanced.useSymmetricDifferenceNotation": null,

	// Specifies whether to ignore whitespace when comparing revisions during blame operations
	"gitlens.blame.ignoreWhitespace": false,

	// Specifies debug mode
	"gitlens.debug": false,

	// An array of Timeline sources that should be excluded from the Timeline view.
	"timeline.excludeSources": null,

	// Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.
	"timeline.pageOnScroll": false,

	// The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view.
	"timeline.pageSize": null,

	// Configure settings to be overridden for [ansible] language.
	"[ansible]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [azure-pipelines] language.
	"[azure-pipelines]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [c] language.
	"[c]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configure settings to be overridden for [cpp] language.
	"[cpp]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configure settings to be overridden for [css] language.
	"[css]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [cuda-cpp] language.
	"[cuda-cpp]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configure settings to be overridden for [django-html] language.
	"[django-html]":  {
		"editor.quickSuggestions": {
				"other": true,
				"comments": true,
				"strings": true
		}
	},

	// Configure settings to be overridden for [dockercompose] language.
	"[dockercompose]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced",
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		}
	},

	// Configure settings to be overridden for [dockerfile] language.
	"[dockerfile]":  {
		"editor.quickSuggestions": {
				"strings": true
		}
	},

	// Configure settings to be overridden for [git-commit] language.
	"[git-commit]":  {
		"editor.rulers": [
				72
		],
		"workbench.editor.restoreViewState": false
	},

	// Configure settings to be overridden for [git-rebase] language.
	"[git-rebase]":  {
		"workbench.editor.restoreViewState": false
	},

	// Configure settings to be overridden for [go] language.
	"[go]":  {
		"editor.insertSpaces": false
	},

	// Configure settings to be overridden for [handlebars] language.
	"[handlebars]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for [html] language.
	"[html]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [http] language.
	"[http]":  {
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		}
	},

	// Configure settings to be overridden for [javascript] language.
	"[javascript]":  {
		"editor.maxTokenizationLineLength": 2500
	},

	// Configure settings to be overridden for [json] language.
	"[json]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [jsonc] language.
	"[jsonc]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [less] language.
	"[less]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [Log] language.
	"[Log]":  {
		"editor.wordWrap": "off"
	},

	// Configure settings to be overridden for [makefile] language.
	"[makefile]":  {
		"editor.insertSpaces": false
	},

	// Configure settings to be overridden for [markdown] language.
	"[markdown]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false
	},

	// Configure settings to be overridden for [php] language.
	"[php]":  {
		"cSpell.fixSpellingWithRenameProvider": false
	},

	// Configure settings to be overridden for [plaintext] language.
	"[plaintext]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false
	},

	// Configure settings to be overridden for [postcss] language.
	"[postcss]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [python] language.
	"[python]":  {
		"gitlens.codeLens.symbolScopes": [
				"!Module"
		],
		"editor.wordBasedSuggestions": false
	},

	// Configure settings to be overridden for [scss] language.
	"[scss]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [search-result] language.
	"[search-result]":  {
		"editor.lineNumbers": "off"
	},

	// Configure settings to be overridden for [shellscript] language.
	"[shellscript]":  {
		"files.eol": "\n"
	},

	// Configure settings to be overridden for [stylus] language.
	"[stylus]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [vue] language.
	"[vue]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [yaml] language.
	"[yaml]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "keep",
		"gitlens.codeLens.scopes": [
				"document"
		],
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		}
	},

	// Controls whether audio cues are enabled.
	//  - auto: Enable audio cues when a screen reader is attached.
	//  - on: Enable audio cues.
	//  - off: Disable audio cues.
	"audioCues.enabled": "auto",

	// When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded.
	"remote.autoForwardPorts": true,

	// Sets the source from which ports are automatically forwarded when `remote.autoForwardPorts` is true. On Windows and Mac remotes, the `process` option has no effect and `output` will be used. Requires a reload to take effect.
	//  - process: Ports will be automatically forwarded when discovered by watching for processes that are started and include a port.
	//  - output: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be "un-forwarded" until reload or until the port is closed by the user in the Ports view.
	"remote.autoForwardPortsSource": "process",

	// When enabled extensions are downloaded locally and installed on remote.
	"remote.downloadExtensionsLocally": false,

	// Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},

	// Specifies the local host name that will be used for port forwarding.
	"remote.localPortHost": "localhost",

	// Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:
	// 
	// ```
	// {
	//   "onAutoForward": "ignore"
	// }
	// ```
	"remote.otherPortsAttributes": {},

	// Set properties that are applied when a specific port number is forwarded. For example:
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {
		"443": {
			"protocol": "https"
		},
		"8443": {
			"protocol": "https"
		}
	},

	// Restores the ports you forwarded in a workspace.
	"remote.restoreForwardedPorts": true,

	// An array of languages where Emmet abbreviations should not be expanded.
	"emmet.excludeLanguages": [
		"markdown"
	],

	// An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.
	// In case of conflicts, the profiles/snippets of later paths will override those of earlier paths.
	// See https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file.
	"emmet.extensionsPath": [],

	// Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
	//  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},

	// When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.
	"emmet.optimizeStylesheetParsing": true,

	// Preferences used to modify behavior of some actions and resolvers of Emmet.
	"emmet.preferences": {},

	// Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
	"emmet.showAbbreviationSuggestions": true,

	// Shows expanded Emmet abbreviations as suggestions.
	// The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
	// The option `"always"` applies to all parts of the file regardless of markup/css.
	"emmet.showExpandedAbbreviation": "always",

	// If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
	"emmet.showSuggestionsAsSnippets": false,

	// Define profile for specified syntax or use your own profile with specific rules.
	"emmet.syntaxProfiles": {},

	// When enabled, Emmet abbreviations are expanded when pressing TAB.
	"emmet.triggerExpansionOnTab": false,

	// Variables to be used in Emmet snippets.
	"emmet.variables": {},

	// Controls whether force push (with or without lease) is enabled.
	"git.allowForcePush": false,

	// Controls whether commits without running pre-commit and commit-msg hooks are allowed.
	"git.allowNoVerifyCommit": false,

	// Always show the Staged Changes resource group.
	"git.alwaysShowStagedChangesResourceGroup": false,

	// Controls the signoff flag for all commits.
	"git.alwaysSignOff": false,

	// When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
	"git.autofetch": false,

	// Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
	"git.autofetchPeriod": 180,

	// Whether auto refreshing is enabled.
	"git.autorefresh": true,

	// Configures when repositories should be automatically detected.
	//  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
	//  - false: Disable automatic repository scanning.
	//  - subFolders: Scan for subfolders of the currently opened folder.
	//  - openEditors: Scan for parent folders of open files.
	"git.autoRepositoryDetection": true,

	// Stash any changes before pulling and restore them after successful pull.
	"git.autoStash": false,

	// Controls the sort order for branches.
	"git.branchSortOrder": "committerdate",

	// A regular expression to validate new branch names.
	"git.branchValidationRegex": "",

	// The character to replace whitespace in new branch names.
	"git.branchWhitespaceChar": "-",

	// Controls what type of git refs are listed when running `Checkout to...`.
	//  - local: Local branches
	//  - tags: Tags
	//  - remote: Remote branches
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],

	// Controls whether the diff editor should be automatically closed when changes are committed, discarded, staged, or unstaged.
	"git.closeDiffOnOperation": false,

	// List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).
	"git.commandsToLog": [],

	// Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
	"git.confirmEmptyCommits": true,

	// Controls whether to ask for confirmation before force-pushing.
	"git.confirmForcePush": true,

	// Controls whether to ask for confirmation before committing without verification.
	"git.confirmNoVerifyCommit": true,

	// Confirm before synchronizing git repositories.
	"git.confirmSync": true,

	// Controls the Git count badge.
	//  - all: Count all changes.
	//  - tracked: Count only tracked changes.
	//  - off: Turn off counter.
	"git.countBadge": "all",

	// Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
	"git.decorations.enabled": true,

	// The default location to clone a git repository.
	"git.defaultCloneDirectory": null,

	// Controls whether to automatically detect git submodules.
	"git.detectSubmodules": true,

	// Controls the limit of git submodules detected.
	"git.detectSubmodulesLimit": 10,

	// Enables commit signing with GPG or X.509.
	"git.enableCommitSigning": false,

	// Whether git is enabled.
	"git.enabled": true,

	// Commit all changes when there are no staged changes.
	"git.enableSmartCommit": false,

	// Controls whether the Git Sync command appears in the status bar.
	"git.enableStatusBarSync": true,

	// Experimental improvements for the git setup flow.
	"git.experimental.installGuide": "default",

	// When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
	"git.fetchOnPull": false,

	// Follow push all tags when running the sync command.
	"git.followTagsWhenSync": false,

	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,

	// List of git repositories to ignore.
	"git.ignoredRepositories": [],

	// Ignores the legacy Git warning.
	"git.ignoreLegacyWarning": false,

	// Ignores the warning when there are too many changes in a repository.
	"git.ignoreLimitWarning": false,

	// Ignores the warning when Git is missing.
	"git.ignoreMissingGitWarning": false,

	// Ignores the warning when it looks like the branch might have been rebased when pulling.
	"git.ignoreRebaseWarning": false,

	// Ignore modifications to submodules in the file tree.
	"git.ignoreSubmodules": false,

	// Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
	"git.ignoreWindowsGit27Warning": false,

	// Controls when to show commit message input validation.
	"git.inputValidation": "warn",

	// Controls the commit message length threshold for showing a warning.
	"git.inputValidationLength": 72,

	// Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.
	"git.inputValidationSubjectLength": 50,

	// Controls whether to open a repository automatically after cloning.
	//  - always: Always open in current window.
	//  - alwaysNewWindow: Always open in a new window.
	//  - whenNoFolderOpen: Only open in current window when no folder is opened.
	//  - prompt: Always prompt for action.
	"git.openAfterClone": "prompt",

	// Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
	"git.openDiffOnClick": true,

	// Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.
	"git.path": null,

	// Runs a git command after a successful commit.
	//  - none: Don't run any command after a commit.
	//  - push: Run 'Git Push' after a successful commit.
	//  - sync: Run 'Git Sync' after a successful commit.
	"git.postCommitCommand": "none",

	// Controls whether Git should check for unsaved files before committing.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeCommit": "always",

	// Controls whether Git should check for unsaved files before stashing changes.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeStash": "always",

	// Prune when fetching.
	"git.pruneOnFetch": false,

	// Fetch all tags when pulling.
	"git.pullTags": true,

	// Force git to use rebase when running the sync command.
	"git.rebaseWhenSync": false,

	// List of folders that are ignored while scanning for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`.
	"git.repositoryScanIgnoredFolders": [
		"node_modules"
	],

	// Controls the depth used when scanning workspace folders for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`. Can be set to `-1` for no limit.
	"git.repositoryScanMaxDepth": 1,

	// Controls whether to require explicit Git user configuration or allow Git to guess if missing.
	"git.requireGitUserConfig": true,

	// List of paths to search for git repositories in.
	"git.scanRepositories": [],

	// Controls whether to show the commit input in the Git source control panel.
	"git.showCommitInput": true,

	// Controls whether to show an inline Open File action in the Git changes view.
	"git.showInlineOpenFileAction": true,

	// Controls whether git actions should show progress.
	"git.showProgress": true,

	// Controls whether to show a notification when a push is successful.
	"git.showPushSuccessNotification": false,

	// Controls whether to show an action button to sync or publish, if there are unpublished commits.
	//  - always: Always shows the action button, if there are unpublished commits.
	//  - whenEmpty: Only shows the action button if there are no other changes and there are unpublished commits.
	//  - never: Never shows the action button.
	"git.showUnpublishedCommitsButton": "whenEmpty",

	// Control which changes are automatically staged by Smart Commit.
	//  - all: Automatically stage all changes.
	//  - tracked: Automatically stage tracked changes only.
	"git.smartCommitChanges": "all",

	// Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
	"git.statusLimit": 10000,

	// Suggests to enable smart commit (commit all changes when there are no staged changes).
	"git.suggestSmartCommit": true,

	// Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
	"git.supportCancellation": false,

	// Controls whether to enable VS Code to be the authentication handler for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.
	"git.terminalAuthentication": true,

	// Controls which date to use for items in the Timeline view.
	//  - committed: Use the committed date
	//  - authored: Use the authored date
	"git.timeline.date": "committed",

	// Controls whether to show the commit author in the Timeline view.
	"git.timeline.showAuthor": true,

	// Controls how untracked changes behave.
	//  - mixed: All changes, tracked and untracked, appear together and behave equally.
	//  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
	//  - hidden: Untracked changes are hidden and excluded from several actions.
	"git.untrackedChanges": "mixed",

	// Controls whether to use the message from the commit input box as the default stash message.
	"git.useCommitInputAsStashMessage": false,

	// Controls whether force pushing uses the safer force-with-lease variant.
	"git.useForcePushWithLease": true,

	// URI of your GitHub Enterprise Instance
	"github-enterprise.uri": "",

	// Controls enablement of Grunt task detection. Grunt task detection can cause files in any open workspace to be executed.
	"grunt.autoDetect": "off",

	// Controls enablement of Gulp task detection. Gulp task detection can cause files in any open workspace to be executed.
	"gulp.autoDetect": "off",

	// Controls enablement of Jake task detection. Jake task detection can cause files in any open workspace to be executed.
	"jake.autoDetect": "off",

	// Enable/disable rendering math in the built-in Markdown preview.
	"markdown.math.enabled": true,

	// Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
	//  - always: Auto attach to every Node.js process launched in the terminal.
	//  - smart: Auto attach when running scripts that aren't in a node_modules folder.
	//  - onlyWithFlag: Only auto attach when the `--inspect` is given.
	//  - disabled: Auto attach is disabled and not shown in status bar.
	"debug.javascript.autoAttachFilter": "disabled",

	// Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],

	// Configures whether property getters will be expanded automatically. If this is false, the getter will appear as `get propertyName` and will only be evaluated when you click on it.
	"debug.javascript.autoExpandGetters": false,

	// When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
	"debug.javascript.automaticallyTunnelRemoteServer": true,

	// Whether to stop when conditional breakpoints throw an error.
	"debug.javascript.breakOnConditionalError": false,

	// Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
	"debug.javascript.codelens.npmScripts": "top",

	// Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
	"debug.javascript.debugByLinkOptions": "on",

	// The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},

	// Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
	"debug.javascript.pickAndAttachOptions": {},

	// Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
	// 
	// A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
	"debug.javascript.resourceRequestOptions": {},

	// Whether to suggest pretty printing JavaScript code that looks minified when you step into it.
	"debug.javascript.suggestPrettyPrinting": true,

	// Default launch options for the JavaScript debug terminal and npm scripts.
	"debug.javascript.terminalOptions": {},

	// Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
	"debug.javascript.unmapMissingSources": false,

	// Controls whether 'Peek References' or 'Find References' is invoked when selecting code lens references
	//  - peek: Show references in peek editor.
	//  - view: Show references in separate view.
	"references.preferredLocation": "peek",

	// Enable/disable the floating indicator that shows when focused in the simple browser.
	"simpleBrowser.focusLockIndicator.enabled": true,

	// List of folder to exclude when formatting all files.
	"formatAll.excludeFolders": [
		"node_modules",
		"out",
		".vscode-test",
		"media"
	],

	// List of file extensions to include when formating all files.
	"formatAll.includeFileExtensions": [
		".ts",
		".json"
	],

	// Activates the i18n features for snippets (eg.: _(""))
	"django.i18n": true,

	// Seldom show notifications about this extension
	"django.showContributeNotification": true,

	// Exclude Python snippets by their file name. Can be 'import', 'postgres'...
	"django.snippets.exclude": [
		"cms",
		"wagtail"
	],

	// Activates the Python snippets
	"django.snippets.use": true,

	// Color theme for the styling of the Markdown preview.
	//  - auto: Automatically match the editor color theme.
	//  - system: Sync to the system/OS color theme.
	//  - light: Always use the Github site's light theme.
	//  - dark: Always use the Github site's dark theme.
	"markdown-preview-github-styles.colorTheme": "auto",

	// Disable the paged search and perform live filtering on the entire Unicode set. Can have performance issues.
	"insert-unicode.disable-pre-filtering": true,

	// Enables showing and searching Unicode character aliases.
	"insert-unicode.enableAliases": true,

	// Shows recently inserted characters at the top of the list.
	"insert-unicode.enableRecentlyUsed": true,

	// Directory tree of favorite unicode characters which can be accessed via the 'Insert from Favorites' commands.
	// Use the 'Manage Favorites' command to edit this setting.
	// (Every tree node can have a 'directories' and 'items' property. 'directories' is a dictionary where the keys are the directory names and the values are tree nodes. 'items' is an array of arrays, because some emoji are constructed from sequences of code points. Any sequence of code points can be used.
	// JSON does not support hex notation, but it can be passed wrapped in a string, e.g.: "0x1f525".)
	"insert-unicode.favorites": {},

	// Determines whether user and workspace favorite directory trees are separated into their own folders or merged when using the insert favorite command.
	"insert-unicode.favoritesScopeBehavior": "merge",

	// The maximal number of characters identified in the 'Identify' panel. Lower this limit if you experience performance issues.
	"insert-unicode.identifyViewCharacterLimit": 100,

	// The number of milliseconds to wait before updating the 'Identify' panel after the selection has changed. Increase this delay if you experience performance issues.
	"insert-unicode.identifyViewUpdateDelay": 100,

	// Include entries made up of a sequence of Unicode code points; some Emoji are defined this way.
	"insert-unicode.include-sequences": true,

	// Include skin tone variations of Emoji in the search. This adds five entries for every Emoji that supports skin tone modifiers. (Only has an impact if sequences are enabled; See: include-sequences)
	"insert-unicode.include-skin-tone-variants": false,

	// The maximal number of items shown on one search page.
	"insert-unicode.page-size": 500,

	// The maximal number of recently used characters to show at the top of the list.
	"insert-unicode.recentlyUsedLimit": 20,

	// Relevant for the 'Identify Unicode Characters' command. If set to 'true', the results of the 'Identify Unicode Characters' command will always be displayed in a new file. When 'false', an info notification is shown which also offers the option to open the contents as file.
	"insert-unicode.show-identified-characters-in-file": false,

	// Always use a normal space character instead of higher width spaces when using the 'insertFont' command. Some of the fonts use a different space character to account for larger character widths.
	"insert-unicode.unicode-font-use-regular-space": false,

	// For import command. The declaration type used for require()
	"npm-intellisense.importDeclarationType": "const",

	// For import command. Use import statements instead of require()
	"npm-intellisense.importES6": true,

	// For import command. The linebreak used after the snippet
	"npm-intellisense.importLinebreak": ";\r\n",

	// For import command. The type of quotes to use in the snippet
	"npm-intellisense.importQuotes": "'",

	// (experimental) Enables path intellisense in subfolders of modules
	"npm-intellisense.packageSubfoldersIntellisense": false,

	// Look for package.json inside nearest directory instead of workspace root
	"npm-intellisense.recursivePackageJsonLookup": true,

	// Scans devDependencies as well
	"npm-intellisense.scanDevDependencies": false,

	// shows build in node modules like 'path' of 'fs'
	"npm-intellisense.showBuildInLibs": false,

	// Specifies when to automatically run the code for a swing.
	"codeswing.autoRun": "onEdit",

	// Specifies whether to automatically save your swing files (every 30s).
	"codeswing.autoSave": false,

	// Specifies whether to automatically clear the console when running a swing.
	"codeswing.clearConsoleOnRun": true,

	// Specifies how CodeSwing should behave when you open a swing workspace.
	"codeswing.launchBehavior": "openSwing",

	// Specifies how to layout the editor windows when opening a swing.
	"codeswing.layout": "splitLeft",

	// Specifies how the swing's readme content should be displayed.
	"codeswing.readmeBehavior": "none",

	// Specifies the directory to create swings in within the open workspace.
	"codeswing.rootDirectory": null,

	// Specifies whether to automatically show the console when opening a swing.
	"codeswing.showConsole": false,

	// Specifies one or more URLs that point of template galleries for creating swings.
	"codeswing.templateGalleries": [
		"web:basic",
		"web:components",
		"web:languages"
	],

	// Specifies whether to apply Visual Studio Code theme to the preview window.
	"codeswing.themePreview": false,

	// Viewer follow vscode theme.
	"vscode-office.autoTheme": false,

	// Open markdown outline.
	"vscode-office.openOutline": true,

	// Support view absolute path image from markdown viewer.
	"vscode-office.viewAbsoluteLocal": false,

	// The left and right padding value expressed in number of spaces.
	"markdownTablePrettify.columnPadding": 0,

	// Additional VSCode language identifiers to register the formatter for. Eg: [ 'ruby' ]
	"markdownTablePrettify.extendedLanguages": [],

	// The maximum text length to apply formatting to.
	"markdownTablePrettify.maxTextLength": 1000000,

	// Whether or not show window messages.
	"markdownTablePrettify.showWindowMessages": true,

	// Deprecated, honors VS Code's Workspace Trust setting
	// Prevents running JavaScript in custom rules, markdown-it plugins, and configuration files
	"markdownlint.blockJavaScript": false,

	// markdownlint config object
	"markdownlint.config": {},

	// Array of paths for custom rules to include when linting
	"markdownlint.customRules": [],

	// Deprecated, see CHANGELOG.md and markdownlint.blockJavaScript
	// Array of workspace paths that load custom rules without prompting
	"markdownlint.customRulesAlwaysAllow": [],

	// Makes it easier to focus while typing by hiding issues on or near the current line
	"markdownlint.focusMode": false,

	// Array or file of glob expressions to ignore when linting
	"markdownlint.ignore": ".markdownlintignore",

	// Array of glob expressions to include or ignore when linting the workspace
	"markdownlint.lintWorkspaceGlobs": [
		"**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
		"!**/bower_components",
		"!**/node_modules",
		"!**/vendor",
		"!**/.git"
	],

	// Run the linter on save (onSave) or on type (onType)
	"markdownlint.run": "onType",

	// Always show the ESlint status bar item.
	"eslint.alwaysShowStatus": false,

	// The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.
	// Turns auto fix on save on or off.
	"eslint.autoFixOnSave": false,

	// Show disable lint rule in the quick fix menu.
	"eslint.codeAction.disableRuleComment": {
		"enable": true,
		"location": "separateLine"
	},

	// Show open lint rule documentation web page in the quick fix menu.
	"eslint.codeAction.showDocumentation": {
		"enable": true
	},

	// Specifies the code action mode. Possible values are 'all' and 'problems'.
	//  - all: Fixes all possible problems in the file. This option might take some time.
	//  - problems: Only fixes reported problems that have non overlapping textual edits. This options runs a lot faster.
	"eslint.codeActionsOnSave.mode": "all",

	// The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration
	"eslint.codeActionsOnSave.rules": null,

	// Enables ESLint debug mode (same as `--debug` on the command line)
	"eslint.debug": false,

	// Controls whether eslint is enabled or not.
	"eslint.enable": true,

	// Additional exec argv argument passed to the runtime. This can for example be used to control the maximum heap space using --max_old_space_size
	"eslint.execArgv": null,

	// Enables ESLint as a formatter.
	"eslint.format.enable": false,

	// Controls whether a task for linting the whole workspace will be available.
	"eslint.lintTask.enable": false,

	// Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).
	"eslint.lintTask.options": ".",

	// Whether ESlint should migrate auto fix on save settings.
	"eslint.migration.2_x": "on",

	// The value of `NODE_ENV` to use when running eslint tasks.
	"eslint.nodeEnv": null,

	// A path added to `NODE_PATH` when resolving the eslint module.
	"eslint.nodePath": null,

	// Whether ESLint should issue a warning on ignored files.
	"eslint.onIgnoredFiles": "off",

	// The eslint options object to provide args normally passed to eslint when executed from a command line (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class).
	"eslint.options": {},

	// The package manager you use to install node modules.
	"eslint.packageManager": "npm",

	// An array of language ids for which the extension should probe if support is installed.
	"eslint.probe": [
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"html",
		"vue",
		"markdown"
	],

	// This option is deprecated. Use eslint.lintTask.enable instead.
	// Controls whether a task for linting the whole workspace will be available.
	"eslint.provideLintTask": false,

	// Turns on quiet mode, which ignores warnings.
	"eslint.quiet": false,

	// Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules.
	"eslint.rules.customizations": [],

	// Run the linter on save (onSave) or on type (onType)
	"eslint.run": "onType",

	// The location of the node binary to run ESLint under.
	"eslint.runtime": null,

	// Traces the communication between VSCode and the eslint linter service.
	"eslint.trace.server": "off",

	// Since version 7 ESLint offers a new API call ESLint. Use it even if the old CLIEngine is available. From version 8 on forward on ESLint class is available.
	"eslint.useESLintClass": false,

	// An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.
	"eslint.validate": [],

	// Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly.
	"eslint.workingDirectories": [],

	// Used to add the front_matter_title parameter (MD025) to the markdownlint.config file.
	"markdown.addFrontMatterTitle": true,

	// Provide all available languages when suggesting code-fence language identifiers. Overrides [Markdown: Docset Languages](#markdown.docsetLanguages) setting.
	"markdown.allAvailableLanguages": false,

	// 
	"markdown.allowlistUrl": "https://taxonomy.docs.microsoft.com/taxonomies?name=devlang&name=product&name=ms.service&name=ms.prod",

	// Always include loc-scope for images.
	"markdown.alwaysIncludeLocScope": false,

	// When the [Markdown: All Available Languages](#markdown.allAvailableLanguages) flag is set to `false`, the suggested completion list displayed when typing an opening code-block (` ``` `) is filtered to the provided language identifiers.
	"markdown.docsetLanguages": null,

	// The name of the docset, most often the route segment immediately following the locale in the URL, (i.e.; https://docs.microsoft.com/en-us/azure/ would be 'azure'). Sometimes this value is specified in the `docfx.json` file under the `build/dest` node.
	"markdown.docsetName": "",

	// The name of the docset root folder. Sometimes this value is specified in the `docfx.json` file under the `build/resource/src` node.
	"markdown.docsetRootFolderName": "",

	// On save prompt to update ms.date if it's not up-to-date
	"markdown.enableMetadataDateReminder": false,

	// When `true` omits default JSON values when serializing objects, i.e.; the `.openpublishing.redirection.json` file would have the `redirect_document_id` properties omitted when they are `false`.
	"markdown.omitDefaultJsonProperties": false,

	// When enabled, beta features will become available.
	"markdown.previewFeatures": false,

	// When `true`, automatically replace smart quotes (`“, ”, ‘, and ’`) with standard quotes (`" and '`) in markdown files. This feature extends to other characters as well, i.e.; (`©, ™, ®, •`, subscript and superscript characters). This is useful when pasting text from Word documents.
	"markdown.replaceSmartQuotes": false,

	// Show the legacy toolbar in the bottom status bar.
	"markdown.showToolbar": false,

	// Set whether all modules can be imported.
	"pythonPreview.allowAllModules": true,

	// Set code and navigation area width.
	"pythonPreview.codAndNavWidth": 510,

	// Control the font family used in the code display area.
	"pythonPreview.code.fontFamily": "Andale mono, monospace",

	// Control the font size in pixels in the code display area.
	"pythonPreview.code.fontSize": 15,

	// Control the line height used in the code.
	"pythonPreview.code.lineHeight": 1.2,

	// Control the font family used in the code footer docs.
	"pythonPreview.codeFooterDocs.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the code footer docs.
	"pythonPreview.codeFooterDocs.fontSize": 12,

	// Render functions with a 'func' prefix and not type label.
	"pythonPreview.compactFuncLabels": false,

	// Display all stack frames that have ever exited rather than only currently on the stack.
	"pythonPreview.cumulativeMode": true,

	// Control the background color used in dict, class and instance key in vscode dark theme.
	"pythonPreview.dark.dict-class-instKey.bgColor": "#f9906f",

	// Control the background color used in dict, class and instance value in vscode dark theme.
	"pythonPreview.dark.dict-class-instVal.bgColor": "#b35c44",

	// Control the color used in highlighted arrow in vscode dark theme.
	"pythonPreview.dark.highlightedArrow.color": "#005583",

	// Control the background color used in highlighted stack frame in vscode dark theme.
	"pythonPreview.dark.highlightedStackFrame.bgColor": "#800080",

	// Control the background color used in list, tuple and set in vscode dark theme.
	"pythonPreview.dark.list-tuple-setTbl.bgColor": "#ca6924",

	// Set how heap objects should be rendered. "true" render all heap objects at the top level. Otherwise, nest heap objects.
	"pythonPreview.disableHeapNesting": false,

	// Control the font family used in the python preview.
	"pythonPreview.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the python preview.
	"pythonPreview.fontSize": 16,

	// Control the font family used in the heap object.
	"pythonPreview.heapObject.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the heap object.
	"pythonPreview.heapObject.fontSize": 14,

	// Hide the code display.
	"pythonPreview.hideCode": false,

	// Control the background color used in dict, class and instance key in vscode high-contrast theme.
	"pythonPreview.high-contrast.dict-class-instKey.bgColor": "#f9906f",

	// Control the background color used in dict, class and instance value in vscode high-contrast theme.
	"pythonPreview.high-contrast.dict-class-instVal.bgColor": "#b35c44",

	// Control the color used in highlighted stack frame in vscode high-contrast theme.
	"pythonPreview.high-contrast.highlightedArrow.color": "#005583",

	// Control the background color used in highlighted stack frame in vscode high-contrast theme.
	"pythonPreview.high-contrast.highlightedStackFrame.bgColor": "#ff7500",

	// Control the background color used in list, tuple and set in vscode high-contrast theme.
	"pythonPreview.high-contrast.list-tuple-setTbl.bgColor": "#ca6924",

	// Control the font family used in the lang display area.
	"pythonPreview.langDisplay.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the lang display area.
	"pythonPreview.langDisplay.fontSize": 14,

	// Control the font family used in the arrow legend.
	"pythonPreview.legend.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the arrow legend.
	"pythonPreview.legend.fontSize": 12,

	// Control the background color used in dict, class and instance key in vscode light theme.
	"pythonPreview.light.dict-class-instKey.bgColor": "#faebbf",

	// Control the background color used in dict, class and instance value in vscode light theme.
	"pythonPreview.light.dict-class-instVal.bgColor": "#ffffc6",

	// Control the color used in highlighted arrow in vscode light theme.
	"pythonPreview.light.highlightedArrow.color": "#005583",

	// Control the background color used in highlighted stack frame in vscode light theme.
	"pythonPreview.light.highlightedStackFrame.bgColor": "#e9f1f6",

	// Control the background color used in list, tuple and set in vscode light theme.
	"pythonPreview.light.list-tuple-setTbl.bgColor": "#ffffc6",

	// Set the max number of executed lines, in order to against infinite loops.
	"pythonPreview.maxExecutedLines": 1000,

	// Control the font family used int the print output docs.
	"pythonPreview.printOutputDocs.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels in the print output docs.
	"pythonPreview.printOutputDocs.fontSize": 12,

	// Control the font family used in the python stdout window.
	"pythonPreview.pyStdout.fontFamily": "Andale mono, monospace",

	// Control the font size in pixels used in the python stdout window.
	"pythonPreview.pyStdout.fontSize": 14,

	// Control the font size in pixels used in the function return value.
	"pythonPreview.retVal.fontSize": 12,

	// Display frame and parent frame labels for all functions.
	"pythonPreview.showAllFrameLabels": false,

	// Control the font family used in the stack header and heap header.
	"pythonPreview.stackAndHeapHeader.fontFamily": "erdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the stack header and heap header.
	"pythonPreview.stackAndHeapHeader.fontSize": 14,

	// Control the font family used in the stack frame.
	"pythonPreview.stackFrame.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the stack frame.
	"pythonPreview.stackFrame.fontSize": 14,

	// Control the font family used in the stack frame header.
	"pythonPreview.stackFrameHeader.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the stack frame header.
	"pythonPreview.stackFrameHeader.fontSize": 14,

	// Render refrences using textual memory labels rather than as jsPlumb arrows.
	"pythonPreview.textualMemoryLabels": false,

	// Enable debug logging for the python-preview extension.
	"pythonPreview.trace": "off",

	// Control the font family used in the type label of heap object.
	"pythonPreview.typeLabel.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the type label of heap object.
	"pythonPreview.typeLabel.fontSize": 12,

	// npm bin name
	"npm.bin": "npm",

	// Enable npm commands in the macOS touchbar.
	"npm.enableTouchbar": false,

	// Look for 'package.json' files in these directories
	"npm.includeDirectories": [],

	// Run npm commands in a terminal, otherwise shows the output in the output panel
	"npm.runInTerminal": true,

	// Look for 'package.json' in the root directory of the workspace
	"npm.useRootDirectory": true,

	// Validate installed modules
	"npm.validate.enable": true,

	// Specify if you want to reset to the default behaviour when you start a new Visual Studio Code instance.
	"hideComments.cleanStart": true,

	// Specify if the hide comments extension is by default enabled on start of the project.
	"hideComments.defaultEnabled": false,

	// Include parentheses around a sole arrow function parameter
	"prettier.arrowParens": "always",

	// Controls the printing of spaces inside object literals
	"prettier.bracketSpacing": true,

	// Path to the prettier configuration file
	"prettier.configPath": "",

	// This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
	// A list of languages IDs to disable this extension on
	"prettier.disableLanguages": [],

	// A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter
	"prettier.documentSelectors": [],

	// Control whether Prettier formats quoted code embedded in the file.
	"prettier.embeddedLanguageFormatting": "auto",

	// Controls whether prettier is enabled or not.
	"prettier.enable": true,

	// Enable debug logs for troubleshooting.
	"prettier.enableDebugLogs": false,

	// Specify the end of line used by prettier
	"prettier.endOfLine": "lf",

	// Specify the global whitespace sensitivity for HTML files.
	//  Valid options:
	// - `css` - Respect the default value of CSS display property.
	// - `strict` - Whitespaces are considered sensitive.
	// - `ignore` - Whitespaces are considered insensitive.
	"prettier.htmlWhitespaceSensitivity": "css",

	// Path to a .prettierignore file
	"prettier.ignorePath": ".prettierignore",

	// Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
	"prettier.insertPragma": false,

	// If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line
	"prettier.jsxBracketSameLine": false,

	// Use single quotes instead of double quotes in JSX
	"prettier.jsxSingleQuote": false,

	// Package manager is now automatically detected by VS Code. This setting is no longer used.
	// The package manager you use to install node modules.
	"prettier.packageManager": "npm",

	// Path to the prettier module
	"prettier.prettierPath": "",

	// Fit code within this line limit
	"prettier.printWidth": 80,

	// (Markdown) wrap prose over multiple lines
	"prettier.proseWrap": "preserve",

	// Change when properties in objects are quoted
	"prettier.quoteProps": "as-needed",

	// Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
	// 
	// > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
	"prettier.requireConfig": false,

	// Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
	"prettier.requirePragma": false,

	// When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
	// > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
	"prettier.resolveGlobalModules": false,

	// Whether to add a semicolon at the end of every line
	"prettier.semi": true,

	// If true, will use single instead of double quotes
	"prettier.singleQuote": false,

	// Number of spaces it should use per tab
	"prettier.tabWidth": 2,

	// Controls the printing of trailing commas wherever possible. Valid options:
	// - `none` - No trailing commas
	// - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
	// - `all` - Trailing commas wherever possible (function arguments)
	"prettier.trailingComma": "es5",

	// Whether or not to take `.editorconfig` into account when parsing configuration. See the [prettier.resolveConfig](https://prettier.io/docs/en/api.html) docs for details.
	"prettier.useEditorConfig": true,

	// Indent lines with tabs
	"prettier.useTabs": false,

	// Whether or not to indent the code inside `<script>` and `<style>` tags in Vue files. Some people (like the creator of Vue) don’t indent to save an indentation level, but this might break code folding in your editor.
	"prettier.vueIndentScriptAndStyle": false,

	// If true, this extension will process files in node_modules
	"prettier.withNodeModules": false,

	// Specifies the base folders to search for git repositories
	"gitProjectManager.baseProjectsFolders": [],

	// Indicates if extension will validate and get the remote origin of the git repository
	"gitProjectManager.checkRemoteOrigin": true,

	// Indicates if project path will be displayed in project picker.
	"gitProjectManager.displayProjectPath": false,

	// Specifies folders to be ignored. (node_modules for example), improving search performance
	"gitProjectManager.ignoredFolders": [],

	// Indicate the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"gitProjectManager.maxDepthRecursion": 4,

	// Define the behavior when opening a new project, if true a new VSCode will be opened with the selected project
	"gitProjectManager.openInNewWindow": false,

	// Number of recent projects to be kept to use with GPM - Open Recent
	"gitProjectManager.recentProjectsListSize": 5,

	// Define if extension should look for Git projects inside other Git projects.
	"gitProjectManager.searchInsideProjects": true,

	// Specifies whether saves repository folders' data between sessions
	"gitProjectManager.storeRepositoriesBetweenSessions": false,

	// Define if extension should look for Mercurial projects too.
	"gitProjectManager.supportsMercurial": false,

	// Define if extension should look for for SVN projects too.
	"gitProjectManager.supportsSVN": false,

	// Allows to list projects that are not versioned in "List Repositories" command
	"gitProjectManager.unversionedProjects": [],

	// Define if extension should show a warn if a configured project folder is not found while searching for projects
	"gitProjectManager.warnIfFolderNotFound": false,

	// Whether to clear previous output before each run.
	"code-runner.clearPreviousOutput": false,

	// Set the custom command to run.
	"code-runner.customCommand": "echo Hello",

	// Set the working directory.
	"code-runner.cwd": "",

	// Set the default language to run.
	"code-runner.defaultLanguage": "",

	// Whether to enable AppInsights to track user telemetry data.
	"code-runner.enableAppInsights": true,

	// Set the executor of each language.
	"code-runner.executorMap": {
		"javascript": "node",
		"java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
		"c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"php": "php",
		"python": "python -u",
		"perl": "perl",
		"perl6": "perl6",
		"ruby": "ruby",
		"go": "go run",
		"lua": "lua",
		"groovy": "groovy",
		"powershell": "powershell -ExecutionPolicy ByPass -File",
		"bat": "cmd /c",
		"shellscript": "bash",
		"fsharp": "fsi",
		"csharp": "scriptcs",
		"vbscript": "cscript //Nologo",
		"typescript": "ts-node",
		"coffeescript": "coffee",
		"scala": "scala",
		"swift": "swift",
		"julia": "julia",
		"crystal": "crystal",
		"ocaml": "ocaml",
		"r": "Rscript",
		"applescript": "osascript",
		"clojure": "lein exec",
		"haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
		"rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
		"racket": "racket",
		"scheme": "csi -script",
		"ahk": "autohotkey",
		"autoit": "autoit3",
		"dart": "dart",
		"pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		"d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
		"haskell": "runhaskell",
		"nim": "nim compile --verbosity:0 --hints:off --run",
		"lisp": "sbcl --script",
		"kit": "kitc --run",
		"v": "v run",
		"sass": "sass --style expanded",
		"scss": "scss --style expanded",
		"less": "cd $dir && lessc $fileName $fileNameWithoutExt.css",
		"FortranFreeForm": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"fortran-modern": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"fortran_fixed-form": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"fortran": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt"
	},

	// Set the executor of each file extension.
	"code-runner.executorMapByFileExtension": {
		".vb": "cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",
		".vbs": "cscript //Nologo",
		".scala": "scala",
		".jl": "julia",
		".cr": "crystal",
		".ml": "ocaml",
		".exs": "elixir",
		".hx": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
		".rkt": "racket",
		".scm": "csi -script",
		".ahk": "autohotkey",
		".au3": "autoit3",
		".kt": "cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",
		".kts": "kotlinc -script",
		".dart": "dart",
		".pas": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		".pp": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		".d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
		".hs": "runhaskell",
		".nim": "nim compile --verbosity:0 --hints:off --run",
		".csproj": "dotnet run --project",
		".fsproj": "dotnet run --project",
		".lisp": "sbcl --script",
		".kit": "kitc --run",
		".v": "v run",
		".vsh": "v run",
		".sass": "sass --style expanded",
		".cu": "cd $dir && nvcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		".ring": "ring"
	},

	// Set the executor by glob.
	"code-runner.executorMapByGlob": {
		"pom.xml": "cd $dir && mvn clean package"
	},

	// Whether to use the directory of the file to be executed as the working directory.
	"code-runner.fileDirectoryAsCwd": false,

	// Whether to ignore selection to always run entire file.
	"code-runner.ignoreSelection": false,

	// Set the mapping of languageId to file extension.
	"code-runner.languageIdToFileExtensionMap": {
		"bat": ".bat",
		"powershell": ".ps1",
		"typescript": ".ts"
	},

	// Whether to preserve focus on code editor after code run is triggered.
	"code-runner.preserveFocus": true,

	// Whether to respect Shebang to run code.
	"code-runner.respectShebang": true,

	// Whether to run code in Integrated Terminal.
	"code-runner.runInTerminal": false,

	// Whether to save all files before running.
	"code-runner.saveAllFilesBeforeRun": false,

	// Whether to save the current file before running.
	"code-runner.saveFileBeforeRun": false,

	// Whether to show extra execution message like [Running] ... and [Done] ...
	"code-runner.showExecutionMessage": true,

	// Whether to show 'Run Code' command in editor context menu.
	"code-runner.showRunCommandInEditorContextMenu": true,

	// Whether to show 'Run Code' command in explorer context menu.
	"code-runner.showRunCommandInExplorerContextMenu": true,

	// Whether to show 'Run Code' icon in editor title menu.
	"code-runner.showRunIconInEditorTitleMenu": true,

	// Whether to show 'Stop code run' icon in the editor title menu when code is running.
	"code-runner.showStopIconInEditorTitleMenu": true,

	// Temporary file name used in running selected code snippet. When it is set as empty, the file name will be random.
	"code-runner.temporaryFileName": "tempCodeRunnerFile",

	// For Windows system, replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash or Cgywin. Example: Setting this to '/mnt/' will replace 'C:\path' with '/mnt/c/path'
	"code-runner.terminalRoot": "",

	// Connection type
	//  - main thread: Connection is created on the main thread.
	//  - separate thread: Connection is created on a spearate thread.
	//  - any: Either main or separate thread connection, whichever succeeds first.
	"github.codespaces.connectionType": "main thread",

	// When a new codespace is created, open it in a new window.
	"github.codespaces.createCodespaceInNewWindow": false,

	// Default extensions to install in GitHub Codespaces
	"github.codespaces.defaultExtensions": [
		"GitHub.codespaces",
		"GitHub.vscode-pull-request-github"
	],

	// Select which type of notification to show when devcontainer content changes
	//  - none: No notification when devcontainer changes
	//  - notification: Standard toast notification when devcontainer changes
	//  - modal: Modal dialog notification when devcontainer changes
	"github.codespaces.devcontainerChangedNotificationStyle": "notification",

	// Display the Codespace Performance window in the Remote Explorer.
	"github.codespaces.showPerformanceExplorer": false,

	// When enabled, HTTPS services will be forwarded through our port forwarding service instead of local TCP server.
	"github.codespaces.usePortForwardingServiceForHTTPS": true,

	// 
	"github.copilot.advanced": {},

	// Enable or disable Copilot for specified [languages](https://code.visualstudio.com/docs/languages/identifiers)
	"github.copilot.enable": {
		"*": true,
		"yaml": false,
		"plaintext": false,
		"markdown": false
	},

	// Show inline suggestions
	"github.copilot.inlineSuggest.enable": true,

	// Specifies whether column headers in CSV files are capitalized.
	"csv-preview.capitalizeHeaders": true,

	// Specifies the character used to mark comment lines in CSV files.
	"csv-preview.commentCharacter": "#",

	// Specifies whether to format numeric values in CSV files, or to treat them as strings.
	"csv-preview.formatValues": "always",

	// Specifies whether the first row in a CSV file represents column headers.
	"csv-preview.hasHeaders": true,

	// Specifies whether to display line numbers for CSV files.
	"csv-preview.lineNumbers": "none",

	// Specifies a .NET-style format string used to format numeric columns in CSV files.
	"csv-preview.numberFormat": "g2",

	// Specifies whether text piped to stdin is automatically opened as a CSV preview.
	"csv-preview.openStdin": false,

	// Specifies the optional character used to surround individual values in a CSV file.
	"csv-preview.quoteMark": "\"",

	// Specifies whether columns are automatically resized to fit the data for CSV files.
	"csv-preview.resizeColumns": "none",

	// Specifies the separator used in a CSV file (normally , but also ; is common).
	"csv-preview.separator": ",",

	// Specifies whether lines that begin with the comment character should be omitted from the CSV preview.
	"csv-preview.skipComments": false,

	// Add menu items to the editor context menu for running and debugging the tests in the current file
	"testExplorer.addToEditorContextMenu": false,

	// Show a CodeLens above each test or suite for running or debugging the tests
	"testExplorer.codeLens": true,

	// Show error messages from test failures as decorations in the editor
	"testExplorer.errorDecoration": true,

	// Provide hover messages for the error decorations in the editor
	"testExplorer.errorDecorationHover": true,

	// Show the state of each test in the editor using Gutter Decorations
	"testExplorer.gutterDecoration": true,

	// Hide the output channel used to show a test's log when the user clicks on a test whose log is empty
	"testExplorer.hideEmptyLog": true,

	// Hide the Test Explorer when no test adapters have been registered or when no tests have been found
	"testExplorer.hideWhen": "never",

	// Merge suites with the same label and parent
	"testExplorer.mergeSuites": false,

	// Retire or reset all test states whenever the test tree is reloaded
	//  - retire: Retire all test states whenever the test tree is reloaded
	//  - reset: Reset all test states whenever the test tree is reloaded
	//  - null: Don't change the test states when the test tree is reloaded
	"testExplorer.onReload": null,

	// Retire or reset all test states whenever a test run is started
	//  - retire: Retire all test states whenever a test run is started
	//  - reset: Reset all test states whenever a test run is started
	//  - null: Don't change the test states when a test run is started
	"testExplorer.onStart": null,

	// Show a button for collapsing the nodes of the test tree
	"testExplorer.showCollapseButton": true,

	// Show a button for expanding the top nodes of the test tree, recursively for the given number of levels
	"testExplorer.showExpandButton": 3,

	// Switch to the Test Explorer view whenever a test run is started
	"testExplorer.showOnRun": false,

	// Sort the tests and suites by label or location. If this is not set (or set to null), they will be shown in the order that they were received from the adapter
	//  - byLabel: sort by label
	//  - byLocation: sort by location (filename and line), if multiple tests or suites appear at the same location, they are sorted by label
	//  - byLabelWithSuitesFirst: sort by label, but always put the suites on top
	//  - byLocationWithSuitesFirst: sort by location, but always put the suites on top
	//  - null: don't sort, the tests and suites will be shown in the order that they were received from the adapter
	"testExplorer.sort": null,

	// Disable the Test Explorer UI and use VSCode's native Testing UI instead
	"testExplorer.useNativeTesting": false,

	// Explicitly enable/disble the formatter
	"remarkHugo.disableFormatter": false,

	// Whether to parse inline shortcodes
	"remarkHugo.inlineMode": true,

	// Attributes where value contains markdown
	"remarkHugo.markdownAttributes": [
		"title",
		"alt",
		"caption"
	],

	// Array of shortcode tokens as `[start, end]`
	"remarkHugo.tokens": [
		[
			"{{<",
			">}}"
		],
		[
			"{{%",
			"%}}"
		]
	],

	// A path to a file, or an object containing the configuration options for js-beautify. If the .jsbeautifyrc file exists in project root, it overrides this configuration.
	"beautify.config": null,

	// List of paths to ignore when using VS Code format command, including format on save. Uses glob pattern matching.
	"beautify.ignore": [],

	// Link file types to the beautifier type
	"beautify.language": {
		"js": {
			"type": [
				"javascript",
				"json",
				"jsonc"
			],
			"filename": [
				".jshintrc",
				".jsbeautifyrc"
			]
		},
		"css": [
			"css",
			"less",
			"scss"
		],
		"html": [
			"htm",
			"html"
		]
	},

	// Add line indentation around brackets(`{}`, `<>`, `[]`) in request body when pressing enter.
	"rest-client.addRequestBodyLineIndentationAroundBrackets": true,

	// Certificate paths for different hosts. The path can be absolute path or relative path(relative to workspace or current http file)
	"rest-client.certificates": {},

	// Decode escaped unicode characters in response body.
	"rest-client.decodeEscapedUnicodeCharacters": false,

	// If particular headers are omitted in request headers, these will be added as headers for each request.
	"rest-client.defaultHeaders": {
		"User-Agent": "vscode-restclient"
	},

	// Controls whether to add href link in previewed response for response whose size is larger than limit specified by `rest-client.largeResponseSizeLimitInMB`
	"rest-client.disableAddingHrefLinkForLargeResponse": true,

	// Controls whether to highlight response body for response whose size is larger than limit specified by `rest-client.largeResponseSizeLimitInMB`
	"rest-client.disableHighlightResonseBodyForLargeResponse": true,

	// Enable/disable custom variable references CodeLens in request file
	"rest-client.enableCustomVariableReferencesCodeLens": true,

	// Enable/disable sending request CodeLens in request file
	"rest-client.enableSendRequestCodeLens": true,

	// Send out anonymous usage data
	"rest-client.enableTelemetry": true,

	// Sets the environments and custom variables belongs to it, especially the special environment name '$shared' is used to create variables shared across all the individual environments (e.g., `{"$shared": {"version": "v1"}, "production": {"host": "api.example.com"}, "sandbox":{"host":"sandbox.api.example.com"}}`)
	"rest-client.environmentVariables": {
		"$shared": {}
	},

	// Excluded hosts when using using proxy settings
	"rest-client.excludeHostsForProxy": [],

	// Follow HTTP 3xx responses as redirects.
	"rest-client.followredirect": true,

	// Controls the font family used in the response preview
	"rest-client.fontFamily": null,

	// Controls the font size in pixels used in the response preview. When set to `0`, the value of `editor.fontSize` is used.
	"rest-client.fontSize": 0,

	// Controls the font weight used in the response preview
	"rest-client.fontWeight": "",

	// Form param encoding strategy for request body of `x-www-form-urlencoded`.
	//  - automatic: Detecting encoding or not automatically and do the encoding job if necessary
	//  - never: Treat provided request body as is, no encoding job will be applied
	//  - always: Use for the scenario that `automatic` option not working properly, e.g., some special characters(`+`) are not encoded correctly
	"rest-client.formParamEncodingStrategy": "automatic",

	// Set the response body size threshold of MB to identify whether a response is a so-called 'large response', only used when `rest-client.disableHighlightResonseBodyForLargeResponse` and/or `rest-client.disableAddingHrefLinkForLargeResponse` is set to true
	"rest-client.largeResponseBodySizeLimitInMB": 5,

	// The verbosity of logging in the REST output panel
	"rest-client.logLevel": "error",

	// Sets the custom mapping of mime type and file extension of saved response body (e.g., `{"application/atom+xml": "xml"}`)
	"rest-client.mimeAndFileExtensionMapping": {},

	// Response preview column option
	//  - current: Preview in the column of current request file
	//  - beside: previewing at the side of the current active column and the side direction depends on `workbench.editor.openSideBySideDirection` setting, either right or below the current editor column
	"rest-client.previewColumn": "beside",

	// Response preview output option
	//  - full: Response headers, body and status line
	//  - headers: Response headers and status line
	//  - body: Response body only
	//  - exchange: Whole HTTP exchange including both request and response
	"rest-client.previewOption": "full",

	// Preview response in untitled document if set to true, otherwise displayed in html view
	"rest-client.previewResponseInUntitledDocument": false,

	// Preview response panel will take focus after receiving response.
	"rest-client.previewResponsePanelTakeFocus": true,

	// Remember cookies for subsequent requests
	"rest-client.rememberCookiesForSubsequentRequests": true,

	// Show request name as the response tab title
	"rest-client.requestNameAsResponseTabTitle": false,

	// Show response in different tab
	"rest-client.showResponseInDifferentTab": false,

	// Suppress response body content type validation
	"rest-client.suppressResponseBodyContentTypeValidationWarning": false,

	// Timeout in milliseconds. 0 for infinity
	"rest-client.timeoutinmilliseconds": 0,

	// Enable/disable using filename from 'content-disposition' header, when saving response body
	"rest-client.useContentDispositionFilename": true,

	// After created folders under src/pages/, src/components/, create a index.j[t]sx file automatically
	"appworks.autoCreateIndexFile": true,

	// After created the index.j[t]sx file in src/ folder, automatically complete the component declaration code according to the filename
	"appworks.autoFillComponentCode": true,

	// Comma seperated glob pattern of files to exclude
	"formatFiles.excludedFolders": [
		"node_modules",
		".vscode",
		".git",
		"dist",
		".chrome"
	],

	// Comma seperated glob pattern of files to exclude
	"formatFiles.excludePattern": "",

	// Glob pattern of file extensions to include
	"formatFiles.extensionsToInclude": "",

	// Determines if Format Files will inherit workspace excluded files
	"formatFiles.inheritWorkspaceExcludedFiles": true,

	// 
	"formatFiles.logLevel": "debug",

	// Whether or not to run 'Organize Imports' when formatting files
	"formatFiles.runOrganizeImports": false,

	// If the workspace folder is a git repository, skips files that git ignores
	"formatFiles.useGitIgnore": true,

	// Disable some plugins intergrated by this extension. E.g.: 'underline, toc'. 
	// * Restart VSCode required.
	"markdownExtended.disabledPlugins": "",

	// Export files will be organized in a directory named with value specified here.
	"markdownExtended.exportOutDirName": "out",

	// Hides default white background and allows capturing screenshots with transparency.
	"markdownExtended.imageOmitBackground": false,

	// The quality of the image, between 0-100. Not applicable to png images.
	"markdownExtended.imageQuality": 100,

	// PDF display header and footer.
	"markdownExtended.pdfDisplayHeaderFooter": true,

	// HTML template for the print footer. Should be valid HTML markup with following classes used to inject printing values into them:
	// date: formatted print date
	// title: document title
	// url: document location
	// pageNumber: current page number
	// totalPages: total pages in the document.
	"markdownExtended.pdfFooterTemplate": "<div style=\"font-size: 9px; margin: 0 auto;\"> <span class='pageNumber'></span> / <span class='totalPages'></span></div>",

	// Paper format. If set, takes priority over pdfWidth or pdfHeight options.
	"markdownExtended.pdfFormat": "A4",

	// HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them:
	// date: formatted print date
	// title: document title
	// url: document location
	// pageNumber: current page number
	// totalPages: total pages in the document.
	"markdownExtended.pdfHeaderTemplate": "<div style=\"font-size: 9px; margin-left: 1cm;\"> <span class='title'></span></div> <div style=\"font-size: 9px; margin-left: auto; margin-right: 1cm; \"> <span class='date'></span></div>",

	// PDF paper height, accepts values labeled with units
	"markdownExtended.pdfHeight": "",

	// PDF paper orientation. true: landscape, false: portrait.
	"markdownExtended.pdfLandscape": false,

	// PDF bottom margin, accepts values labeled with units.
	"markdownExtended.pdfMarginBottom": "1cm",

	// PDF left margin, accepts values labeled with units.
	"markdownExtended.pdfMarginLeft": "1cm",

	// PDF right margin, accepts values labeled with units.
	"markdownExtended.pdfMarginRight": "1cm",

	// PDF top margin, accepts values labeled with units.
	"markdownExtended.pdfMarginTop": "1.5cm",

	// Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.
	"markdownExtended.pdfPageRanges": "",

	// PDF paper width, accepts values labeled with units
	"markdownExtended.pdfWidth": "",

	// Customize puppeteer executable for exporting PDF and images.
	// Could be path of Chromium or Chrome
	// e.g. '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
	// e.g. 'C:/Users/<username>/AppData/Local/Google/Chrome/Application/chrome.exe'
	"markdownExtended.puppeteerExecutable": "",

	// Headings levels to use when generating TOC (2 for h2, etc)
	// * Restart VSCode required.
	"markdownExtended.tocLevels": [
		1,
		2,
		3
	],

	// Customize the shorcuts in editors.
	"markdown-code-runner.editor.shortcuts": [
		"run"
	],

	// Set the executor of each language.
	"markdown-code-runner.executorMap": {
		"javascript": "node",
		"java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
		"c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"php": "php",
		"python": "python2 -u",
		"python3": "python3 -u",
		"bash": "bash -x",
		"perl": "perl",
		"perl6": "perl6",
		"ruby": "ruby",
		"golang": "go run",
		"lua": "lua",
		"groovy": "groovy",
		"powershell": "powershell -ExecutionPolicy ByPass -File",
		"bat": "cmd /c",
		"shellscript": "bash",
		"fsharp": "fsi",
		"csharp": "scriptcs",
		"vbscript": "cscript //Nologo",
		"typescript": "ts-node",
		"coffeescript": "coffee",
		"scala": "scala",
		"swift": "swift",
		"julia": "julia",
		"crystal": "crystal",
		"ocaml": "ocaml",
		"r": "Rscript",
		"applescript": "osascript",
		"clojure": "lein exec",
		"haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
		"rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
		"racket": "racket",
		"scheme": "csi -script",
		"ahk": "autohotkey",
		"autoit": "autoit3",
		"dart": "dart",
		"pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		"d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
		"haskell": "runhaskell",
		"nim": "nim compile --verbosity:0 --hints:off --run",
		"lisp": "sbcl --script",
		"kit": "kitc --run",
		"v": "v run",
		"sass": "sass --style expanded",
		"scss": "scss --style expanded",
		"less": "cd $dir && lessc $fileName $fileNameWithoutExt.css"
	},

	// Run in terminal otherwise output channel.
	"markdown-code-runner.runInTerminal": true,

	// show execution detail message.
	"markdown-code-runner.showExecutionMessage": true,

	// terminal root in win32.
	"markdown-code-runner.terminalRoot": true,

	// The path of the workspace folder to store the problem files.
	"markdown-code-runner.workspaceFolder": "",

	// Show a notification when a script is run.
	"npm-scripts.showStartNotification": true,

	// If you want MinifyAll to not showing a context menu when right-clicking in your code. (True for disabling).
	"MinifyAll.disableCodeContextMenu": false,

	// If you want MinifyAll to stop minimizing CSS. (True for disabling)
	"MinifyAll.disableCss": false,

	// If you want MinifyAll to not showing a context menu when right-clicking in the file explorer. (True for disabling)..
	"MinifyAll.disableFileExplorerContextMenu": false,

	// If you want MinifyAll to stop shortening colors, such as rgb to 3 digit hex, or rgba to hex, or 6 digit hex to 3 digit hex. (True for disabling hex.)
	"MinifyAll.disableHexadecimalShortener": true,

	// If you want MinifyAll to stop minimizing HTML. (True for disabling)
	"MinifyAll.disableHtml": false,

	// If you want MinifyAll to stop minimizing JavaScript. (True for disabling)
	"MinifyAll.disableJavascript": false,

	// If you want MinifyAll to stop minimizing JavaScriptReact. (True for disabling)
	"MinifyAll.disableJavascriptReact": true,

	// If you want MinifyAll to stop minimizing JSON. (True for disabling)
	"MinifyAll.disableJson": false,

	// If you want MinifyAll to stop minimizing JSONC. (True for disabling)
	"MinifyAll.disableJsonc": false,

	// If you want MinifyAll to stop minimizing LESS. (True for disabling)
	"MinifyAll.disableLess": false,

	// If you want MinifyAll to stop showing error, warning or information messages. (True for disabling)
	"MinifyAll.disableMessages": false,

	// If you want MinifyAll to stop minimizing PHP. (True for disabling)
	"MinifyAll.disablePhp": false,

	// If you want MinifyAll to stop minimizing SASS. (True for disabling)
	"MinifyAll.disableSass": false,

	// If you want MinifyAll to stop minimizing SCSS. (True for disabling)
	"MinifyAll.disableScss": false,

	// If you want MinifyAll to stop minimizing TWIG. (True for disabling)
	"MinifyAll.disableTwig": false,

	// If you want MinifyAll to stop minimizing XML. (True for disabling)
	"MinifyAll.disableXml": false,

	// If you want MinifyAll to minify every time you save in the same file. (True for enabling)
	"MinifyAll.minifyOnSave": false,

	// If you want MinifyAll to minify every time you save in other file. (True for enabling)
	"MinifyAll.minifyOnSaveToNewFile": false,

	// [DEPRECATED use 'minifyOnSaveToNewFile' instead]If you want MinifyAll to minify every time you save in other file. (True for enabling)
	"MinifyAll.minifyOnSaveToNewFIle": false,

	// If you want MinifyAll to open the new minified document after you minify. (False for not opening it every time you create a minified file)
	"MinifyAll.openMinifiedDocument": true,

	// The prefix of the extension of the new file. Default (-min)
	//  - -min: Sets the future filename to example-min.extension
	//  - .min: Sets the future filename to example.min.extension
	//  - -minified: Sets the future filename to example-minified.extension
	//  - .minified: Sets the future filename to example.minified.extension
	"MinifyAll.PrefixOfNewMinifiedFiles": "-min",

	// Terser options, please visit: https://github.com/terser/terser#minify-options for more information.
	"MinifyAll.terserMinifyOptions": {
		"mangle": true,
		"compress": {
			"drop_console": true,
			"dead_code": false,
			"keep_fnames": false,
			"keep_classnames": false
		}
	},

	// When creating a hanging indent, do not put the closing bracket on its own line.
	"pythonIndent.keepHangingBracketOnLine": false,

	// Trims lines that contain only whitespace after pressing Enter on them.
	"pythonIndent.trimLinesWithOnlyWhitespace": false,

	// After creating a hanging indent, press tab to leave the indented section and go to the ending bracket.
	"pythonIndent.useTabOnHangingIndent": false,

	// Clear terminal before run?
	"runInTerminal.clearBeforeRun": false,

	// 
	"runInTerminal.commands": [],

	// Close file after saving. This does nothing unless you have enabled saving after formatting.
	"formatContextMenu.closeAfterSave": false,

	// Save file after formatting.
	"formatContextMenu.saveAfterFormat": true,

	// Test framework to use for Python Test Explorer (default is null and Python extension settings are used)
	"pythonTestExplorer.testFramework": null,

	// Arguments passed in. Each argument is a separate item in the array.
	"pythonTestExplorer.testplanArgs": [],

	// Enable testing using Testplan. Note that Testplan is only supported for Python 3.7+.
	"pythonTestExplorer.testplanEnabled": false,

	// Relative path to testplan main suite.
	"pythonTestExplorer.testplanPath": "test_plan.py",

	// The base path of image url.You can use variable ${currentFileDir} and ${projectRoot}. ${currentFileDir} will be replace by the path of directory that contain current editing file. ${projectRoot} will be replace by path of the project opened in vscode. If you set basePath to empty String, it will insert absolute path to file.
	"pasteImageToMarkdown.basePath": "${currentFileDir}",

	// The default image file name. The value of this config will be pass to the 'format' function of moment library(a js time manipulation library), you can read document https://momentjs.com/docs/#/displaying/format/ for advanced usage.
	"pasteImageToMarkdown.defaultName": "Y-MM-DD-HH-mm-ss",

	// The string append to the image file name.How to encode image path before insert to editor. Support options: none, urlEncode, urlEncodeSpace
	"pasteImageToMarkdown.encodePath": "urlEncodeSpace",

	// Set the mode of file path confirm inputbox
	"pasteImageToMarkdown.filePathConfirmInputBoxMode": "fullPath",

	// Force set the file separator styel to unix style. If set false, separator style will follow the system style.
	"pasteImageToMarkdown.forceUnixStyleSeparator": true,

	// The pattern of string that would be pasted to text.
	"pasteImageToMarkdown.insertPattern": "${imageSyntaxPrefix}${imageFilePath}${imageSyntaxSuffix}",

	// The terminal to save image file. There're Local Disk, QiNiu cloud and so on. If you choose QiNiu mode, the image will store on the local disk before uploading to the cloud. And the temporary image will be clear after image upload. (QiNiu mode is internal use.)
	"pasteImageToMarkdown.mode": "Disk",

	// The string prepend to the image file name.
	"pasteImageToMarkdown.namePrefix": "",

	// The string append to the image file name.
	"pasteImageToMarkdown.nameSuffix": "",

	// The destination to save image file.You can use variable ${currentFileDir} and ${projectRoot}. ${currentFileDir} will be replace by the path of directory that contain current editing file. ${projectRoot} will be replace by path of the project opened in vscode.
	"pasteImageToMarkdown.path": "${currentFileDir}",

	// The string prepend to the resolved image path before paste.
	"pasteImageToMarkdown.prefix": "",

	// 应用的 appId. (QiNiu Mode only)
	"pasteImageToMarkdown.qiniu.appId": "",

	// 应用的 appSecret. (QiNiu Mode only)
	"pasteImageToMarkdown.qiniu.appSecret": "",

	// 七牛的 url. (QiNiu Mode only)
	"pasteImageToMarkdown.qiniu.url": "",

	// Set to true if you want to be able to change the file path or name prior to saving the file to disk
	"pasteImageToMarkdown.showFilePathConfirmInputBox": false,

	// The string append to the resolved image path before paste.
	"pasteImageToMarkdown.suffix": "",

	// Specifies the name of the directory that daily pages are organized within.
	"wikilens.daily.directoryName": "Daily",

	// Specifies the date format (using Moment/Day.js syntax) that is used for the title of daily pages.
	// 
	// **Examples:** `dd/mm/yyyy`, `mm/dd/yyyy`, `yyyy/mm/dd`, `L`, `LL` ([details](https://momentjs.com/docs/#/displaying/format/)).
	"wikilens.daily.titleFormat": "LL",

	// Specifies whether to enable the wiki for the current workspace.
	"wikilens.enabled": true,

	// Specifies a list of file globs to ignore when processing for wiki pages.
	"wikilens.ignoredFiles": [
		"**/node_modules/**",
		"**/.vscode/**",
		"**/.github/**"
	],

	// Bold marker
	"markdownShortcuts.bold.marker": "**",

	// Bullets marker
	"markdownShortcuts.bullets.marker": "*",

	// Show bold icon in title bar
	"markdownShortcuts.icons.bold": true,

	// Show bullets icon in title bar
	"markdownShortcuts.icons.bullets": true,

	// Show citations icon in title bar
	"markdownShortcuts.icons.citations": false,

	// Show image icon in title bar
	"markdownShortcuts.icons.image": false,

	// Show italic icon in title bar
	"markdownShortcuts.icons.italic": true,

	// Show link icon in title bar
	"markdownShortcuts.icons.link": false,

	// Show strikethrough icon in title bar
	"markdownShortcuts.icons.strikethrough": true,

	// Italics marker
	"markdownShortcuts.italics.marker": "_",

	// Array of languages for which shortcuts will be available
	"markdownShortcuts.languages": [
		"markdown"
	],

	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.autoCenter`
	// Automatically center the commit details view when it is opened.
	"git-graph.autoCenterCommitDetailsView": true,

	// Depreciated: This setting has been renamed to `git-graph.referenceLabels.combineLocalAndRemoteBranchLabels`
	// Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
	"git-graph.combineLocalAndRemoteBranchLabels": true,

	// Automatically center the Commit Details View when it is opened.
	"git-graph.commitDetailsView.autoCenter": true,

	// Render the File Tree in the Commit Details View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
	"git-graph.commitDetailsView.fileView.fileTree.compactFolders": true,

	// Sets the default type of File View used in the Commit Details View. This can be overridden per repository using the controls on the right side of the Commit Details View.
	//  - File Tree: Display files in a tree structure.
	//  - File List: Display files in a list (useful for repositories with deep folder structures).
	"git-graph.commitDetailsView.fileView.type": "File Tree",

	// Specifies where the Commit Details View is rendered in the Git Graph View.
	//  - Inline: Show the Commit Details View inline with the graph & commits.
	//  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph View.
	"git-graph.commitDetailsView.location": "Inline",

	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.fileTree.compactFolders`
	// Render the File Tree in the Commit Details / Comparison View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
	"git-graph.commitDetailsViewFileTreeCompactFolders": true,

	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.location`
	// Specifies where the Commit Details View is rendered in the Git Graph view.
	//  - Inline: Show the Commit Details View inline with the graph
	//  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph view
	"git-graph.commitDetailsViewLocation": "Inline",

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.order`
	// Specifies the order of commits on the Git Graph view. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option.
	//  - date: Show commits in the commit timestamp order.
	//  - author-date: Show commits in the author timestamp order.
	//  - topo: Avoid showing commits on multiple lines of history intermixed.
	"git-graph.commitOrdering": "date",

	// Customise which context menu actions are visible. For example, if you want to hide the rebase action from the branch context menu, a suitable value for this setting is `{ "branch": { "rebase": false } }`. For more information of how to configure this setting, view the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Extension-Settings#context-menu-actions-visibility).
	"git-graph.contextMenuActionsVisibility": {},

	// An array of Custom Branch Glob Patterns to be shown in the 'Branches' dropdown. Example: [{"name": "Feature Requests", "glob": "heads/feature/*"}]
	"git-graph.customBranchGlobPatterns": [],

	// An array of custom Emoji Shortcode mappings. Example: [{"shortcode": ":sparkles:", "emoji":"✨"}]
	"git-graph.customEmojiShortcodeMappings": [],

	// An array of custom Pull Request providers that can be used in the "Pull Request Creation" Integration. For information on how to configure this setting, see the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Configuring-a-custom-Pull-Request-Provider).
	"git-graph.customPullRequestProviders": [],

	// Specifies the date format to be used in the "Date" column on the Git Graph View.
	//  - Date & Time: Show the date and time (e.g. "24 Mar 2019 21:34")
	//  - Date Only: Show the date only (e.g. "24 Mar 2019")
	//  - ISO Date & Time: Show the ISO date and time (e.g. "2019-03-24 21:34")
	//  - ISO Date Only: Show the ISO date only (e.g. "2019-03-24")
	//  - Relative: Show relative times (e.g. "5 minutes ago")
	"git-graph.date.format": "Date & Time",

	// Specifies the date type to be displayed in the "Date" column on the Git Graph View.
	//  - Author Date: Use the author date of a commit.
	//  - Commit Date: Use the committer date of a commit.
	"git-graph.date.type": "Author Date",

	// Depreciated: This setting has been renamed to `git-graph.date.format`
	// Specifies the date format to be used in the "Date" column on the Git Graph View.
	//  - Date & Time: Show the date and time, for example "24 Mar 2019 21:34"
	//  - Date Only: Show the date only, for example "24 Mar 2019"
	//  - ISO Date & Time: Show the ISO date and time, for example "2019-03-24 21:34"
	//  - ISO Date Only: Show the ISO date only, for example "2019-03-24"
	//  - Relative: Show relative times, for example "5 minutes ago"
	"git-graph.dateFormat": "Date & Time",

	// Depreciated: This setting has been renamed to `git-graph.date.type`
	// Specifies the date type to be displayed in the "Date" column on the Git Graph View.
	//  - Author Date: Use the author date of a commit
	//  - Commit Date: Use the committer date of a commit
	"git-graph.dateType": "Author Date",

	// An object specifying the default visibility of the Date, Author & Commit columns. Example: {"Date": true, "Author": true, "Commit": true}
	"git-graph.defaultColumnVisibility": {
		"Date": true,
		"Author": true,
		"Commit": true
	},

	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.type`
	// Sets the default type of File View used in the Commit Details / Comparison Views. This can be overridden per repository using the controls on the right side of the Commit Details / Comparison Views.
	//  - File Tree: Display files in a tree structure
	//  - File List: Display files in a list (useful for repositories with deep folder structures)
	"git-graph.defaultFileViewType": "File Tree",

	// Default state of the field indicating whether the tag should be pushed to a remote once it is added.
	"git-graph.dialog.addTag.pushToRemote": false,

	// Default type of the tag being added.
	"git-graph.dialog.addTag.type": "Annotated",

	// Default state of the "Reinstate Index" checkbox.
	"git-graph.dialog.applyStash.reinstateIndex": false,

	// Default state of the "No Commit" checkbox.
	"git-graph.dialog.cherryPick.noCommit": false,

	// Default state of the "Record Origin" checkbox.
	"git-graph.dialog.cherryPick.recordOrigin": false,

	// Default state of the "Check out" checkbox.
	"git-graph.dialog.createBranch.checkOut": false,

	// Default state of the "Force Delete" checkbox.
	"git-graph.dialog.deleteBranch.forceDelete": false,

	// Default state of the "Force Fetch" checkbox.
	"git-graph.dialog.fetchIntoLocalBranch.forceFetch": false,

	// Default state of the "Prune" checkbox.
	"git-graph.dialog.fetchRemote.prune": false,

	// Default state of the "Prune Tags" checkbox.
	"git-graph.dialog.fetchRemote.pruneTags": false,

	// Specifies a substitution that is automatically performed when space characters are entered or pasted into reference inputs on dialogs (e.g. Create Branch, Add Tag, etc.).
	//  - None: Don't replace spaces.
	//  - Hyphen: Replace space characters with hyphens, for example: "new branch" -> "new-branch".
	//  - Underscore: Replace space characters with underscores, for example: "new branch" -> "new_branch".
	"git-graph.dialog.general.referenceInputSpaceSubstitution": "None",

	// Default state of the "No Commit" checkbox.
	"git-graph.dialog.merge.noCommit": false,

	// Default state of the "Create a new commit even if fast-forward is possible" checkbox.
	"git-graph.dialog.merge.noFastForward": true,

	// Default state of the "Squash Commits" checkbox.
	"git-graph.dialog.merge.squashCommits": false,

	// Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
	//  - Default: Use the squash message generated by Git Graph.
	//  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
	"git-graph.dialog.merge.squashMessageFormat": "Default",

	// Default state of the "Reinstate Index" checkbox.
	"git-graph.dialog.popStash.reinstateIndex": false,

	// Default state of the "Create a new commit even if fast-forward is possible" checkbox.
	"git-graph.dialog.pullBranch.noFastForward": false,

	// Default state of the "Squash Commits" checkbox.
	"git-graph.dialog.pullBranch.squashCommits": false,

	// Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
	//  - Default: Use the squash message generated by Git Graph.
	//  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
	"git-graph.dialog.pullBranch.squashMessageFormat": "Default",

	// Default state of the "Ignore Date (non-interactive rebase only)" checkbox.
	"git-graph.dialog.rebase.ignoreDate": true,

	// Default state of the "Launch Interactive Rebase in new Terminal" checkbox.
	"git-graph.dialog.rebase.launchInteractiveRebase": false,

	// Default mode to be used for the reset action.
	//  - Soft: Soft - Keep all changes, but reset head
	//  - Mixed: Mixed - Keep working tree, but reset index
	//  - Hard: Hard - Discard all changes
	"git-graph.dialog.resetCurrentBranchToCommit.mode": "Mixed",

	// Default mode to be used for the reset action.
	//  - Mixed: Mixed - Keep working tree, but reset index
	//  - Hard: Hard - Discard all changes
	"git-graph.dialog.resetUncommittedChanges.mode": "Mixed",

	// Default state of the "Include Untracked" checkbox.
	"git-graph.dialog.stashUncommittedChanges.includeUntracked": true,

	// Visual file change A|M|D|R|U indicators in the Commit Details View for users with colour blindness. In the future, this setting will enable any additional accessibility related features of Git Graph that aren't enabled by default.
	"git-graph.enhancedAccessibility": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.fetchAndPrune`
	// Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
	"git-graph.fetchAndPrune": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.fetchAvatars`
	// Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
	"git-graph.fetchAvatars": false,

	// The character set encoding used when retrieving a specific version of repository files (e.g. in the Diff View). A list of all supported encodings can be found [here](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).
	"git-graph.fileEncoding": "utf8",

	// Specifies the colours used on the graph.
	"git-graph.graph.colours": [
		"#0085d9",
		"#d9008f",
		"#00d90a",
		"#d98500",
		"#a300d9",
		"#ff0000",
		"#00d9cc",
		"#e138e8",
		"#85d900",
		"#dc5b23",
		"#6f24d6",
		"#ffcc00"
	],

	// Specifies the style of the graph.
	//  - rounded: Use smooth curves when transitioning between branches on the graph.
	//  - angular: Use angular lines when transitioning between branches on the graph.
	"git-graph.graph.style": "rounded",

	// Specifies how the Uncommitted Changes are displayed on the graph.
	//  - Open Circle at the Uncommitted Changes: Display the Uncommitted Changes as a grey open circle, connected to the commit referenced by HEAD with a solid grey line. The current file system's state is therefore always displayed as an open circle.
	//  - Open Circle at the Checked Out Commit: Display the Uncommitted Changes as a grey closed circle, connected to the commit referenced by HEAD with a dotted grey line. The commit referenced by HEAD is therefore always displayed as an open circle.
	"git-graph.graph.uncommittedChanges": "Open Circle at the Uncommitted Changes",

	// Depreciated: This setting has been renamed to `git-graph.graph.colours`
	// Specifies the colours used on the graph.
	"git-graph.graphColours": [
		"#0085d9",
		"#d9008f",
		"#00d90a",
		"#d98500",
		"#a300d9",
		"#ff0000",
		"#00d9cc",
		"#e138e8",
		"#85d900",
		"#dc5b23",
		"#6f24d6",
		"#ffcc00"
	],

	// Depreciated: This setting has been renamed to `git-graph.graph.style`
	// Specifies the style of the graph.
	//  - rounded: Use smooth curves when transitioning between branches on the graph
	//  - angular: Use angular lines when transitioning between branches on the graph
	"git-graph.graphStyle": "rounded",

	// Depreciated: This setting has been renamed to `git-graph.repository.includeCommitsMentionedByReflogs`
	// Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.includeCommitsMentionedByReflogs": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.initialLoad`
	// Specifies the number of commits to initially load.
	"git-graph.initialLoadCommits": 300,

	// Specifies the path and filename of the Shell executable to be used by the Visual Studio Code Integrated Terminal, when it is opened by Git Graph. For example, to use Git Bash on Windows this setting would commonly be set to "C:\Program Files\Git\bin\bash.exe". If this setting is left blank, the default Shell is used.
	"git-graph.integratedTerminalShell": "",

	// The keybinding for the keyboard shortcut that opens the Find Widget in the Git Graph View.
	"git-graph.keyboardShortcut.find": "CTRL/CMD + F",

	// The keybinding for the keyboard shortcut that refreshes the Git Graph View.
	"git-graph.keyboardShortcut.refresh": "CTRL/CMD + R",

	// The keybinding for the keyboard shortcut that scrolls the Git Graph View to be centered on the commit referenced by HEAD.
	"git-graph.keyboardShortcut.scrollToHead": "CTRL/CMD + H",

	// The keybinding for the keyboard shortcut that scrolls the Git Graph View to the first (or next) stash in the loaded commits. The Shift Key Modifier can be applied to this keybinding to scroll the Git Graph View to the last (or previous) stash in the loaded commits.
	"git-graph.keyboardShortcut.scrollToStash": "CTRL/CMD + S",

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMore`
	// Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
	"git-graph.loadMoreCommits": 100,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMoreAutomatically`
	// When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
	"git-graph.loadMoreCommitsAutomatically": true,

	// Parse and render a frequently used subset of inline Markdown formatting rules in commit messages and tag details (bold, italics, bold & italics, and inline code blocks).
	"git-graph.markdown": true,

	// Specifies the maximum depth of subfolders to search when discovering repositories in the workspace. Note: Sub-repos are not automatically detected when searching subfolders, however they can be manually added by running the command "Git Graph: Add Git Repository" in the Command Palette.
	"git-graph.maxDepthOfRepoSearch": 0,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead`
	// Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.muteCommitsThatAreNotAncestorsOfHead": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.mergeCommits`
	// Display merge commits with a muted text color.
	"git-graph.muteMergeCommits": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.onlyFollowFirstParent`
	// Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting.
	"git-graph.onlyFollowFirstParent": false,

	// Depreciated: This setting has been renamed to `git-graph.openNewTabEditorGroup`
	// Specifies which Editor Group the Visual Studio Code Diff View is opened in.
	//  - Active: Open the Visual Studio Code Diff View in the Active Editor Group.
	//  - Beside: Open the Visual Studio Code Diff View beside the Active Editor Group.
	//  - One: Open the Visual Studio Code Diff View in the First Editor Group.
	//  - Two: Open the Visual Studio Code Diff View in the Second Editor Group.
	//  - Three: Open the Visual Studio Code Diff View in the Third Editor Group.
	//  - Four: Open the Visual Studio Code Diff View in the Fourth Editor Group.
	//  - Five: Open the Visual Studio Code Diff View in the Fifth Editor Group.
	//  - Six: Open the Visual Studio Code Diff View in the Sixth Editor Group.
	//  - Seven: Open the Visual Studio Code Diff View in the Seventh Editor Group.
	//  - Eight: Open the Visual Studio Code Diff View in the Eighth Editor Group.
	//  - Nine: Open the Visual Studio Code Diff View in the Ninth Editor Group.
	"git-graph.openDiffTabLocation": "Active",

	// Specifies the Editor Group where Git Graph should open new tabs, when performing the following actions from the Git Graph View: Viewing the Visual Studio Code Diff View, Opening a File, Viewing a File at a Specific Revision.
	//  - Active: Open the new tab in the Active Editor Group.
	//  - Beside: Open the new tab beside the Active Editor Group.
	//  - One: Open the new tab in the First Editor Group.
	//  - Two: Open the new tab in the Second Editor Group.
	//  - Three: Open the new tab in the Third Editor Group.
	//  - Four: Open the new tab in the Fourth Editor Group.
	//  - Five: Open the new tab in the Fifth Editor Group.
	//  - Six: Open the new tab in the Sixth Editor Group.
	//  - Seven: Open the new tab in the Seventh Editor Group.
	//  - Eight: Open the new tab in the Eighth Editor Group.
	//  - Nine: Open the new tab in the Ninth Editor Group.
	"git-graph.openNewTabEditorGroup": "Active",

	// Depreciated: This setting has been renamed to `git-graph.repository.onLoad.scrollToHead`
	// When opening or switching repositories in the Git Graph View, automatically scroll the view to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.openRepoToHead": false,

	// Open the Git Graph View to the repository containing the active Text Editor document.
	"git-graph.openToTheRepoOfTheActiveTextEditorDocument": false,

	// Depreciated: This setting has been renamed to `git-graph.referenceLabels.alignment`
	// Specifies how branch and tag reference labels are aligned for each commit.
	//  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
	//  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
	//  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
	"git-graph.referenceLabelAlignment": "Normal",

	// Specifies how branch and tag reference labels are aligned for each commit.
	//  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
	//  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
	//  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
	"git-graph.referenceLabels.alignment": "Normal",

	// Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
	"git-graph.referenceLabels.combineLocalAndRemoteBranchLabels": true,

	// Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
	"git-graph.repository.commits.fetchAvatars": false,

	// Specifies the number of commits to initially load.
	"git-graph.repository.commits.initialLoad": 300,

	// Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
	"git-graph.repository.commits.loadMore": 100,

	// When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
	"git-graph.repository.commits.loadMoreAutomatically": true,

	// Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead": false,

	// Display merge commits with a muted text color.
	"git-graph.repository.commits.mute.mergeCommits": true,

	// Specifies the order of commits on the Git Graph View. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option. This can be overridden per repository via the Git Graph View's Column Header Context Menu.
	//  - date: Show commits in the commit timestamp order.
	//  - author-date: Show commits in the author timestamp order.
	//  - topo: Avoid showing commits on multiple lines of history intermixed.
	"git-graph.repository.commits.order": "date",

	// Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
	"git-graph.repository.commits.showSignatureStatus": false,

	// Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
	"git-graph.repository.fetchAndPrune": false,

	// Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any local tags that no longer exist on the remote(s). Requires Git >= 2.17.0, and the "Repository: Fetch And Prune" setting to be enabled. Caution: If you work in repositories that have multiple remotes, it is not recommended to use this setting (instead you can prune tags for a specific remote via "Fetch Remote" Dialog from the Repository Settings Widget on the Git Graph View).
	"git-graph.repository.fetchAndPruneTags": false,

	// Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.includeCommitsMentionedByReflogs": false,

	// Automatically scroll the Git Graph View to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.repository.onLoad.scrollToHead": false,

	// Show the checked out branch when a repository is loaded in the Git Graph View. This setting can be used in conjunction with "Repository > On Load: Show Specific Branches". Default: false (show all branches)
	"git-graph.repository.onLoad.showCheckedOutBranch": false,

	// Show specific branches when a repository is loaded in the Git Graph View. Branches can be specified as follows: A local branch name (e.g. `master`), a remote-tracking branch name prefixed with "remotes/" (e.g. `remotes/origin/master`), or a glob pattern defined in `git-graph.customBranchGlobPatterns` prefixed with "--glob=" (e.g. `--glob=heads/feature/*`). This setting can be used in conjunction with "Repository > On Load: Show Checked Out Branch". Default: [] (show all branches)
	"git-graph.repository.onLoad.showSpecificBranches": [],

	// Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.onlyFollowFirstParent": false,

	// Show Commits that are only referenced by tags in Git Graph.
	"git-graph.repository.showCommitsOnlyReferencedByTags": true,

	// Show Remote Branches in Git Graph by default. This can be overridden per repository from the Git Graph View's Control Bar.
	"git-graph.repository.showRemoteBranches": true,

	// Show Remote HEAD Symbolic References in Git Graph (e.g. "origin/HEAD").
	"git-graph.repository.showRemoteHeads": true,

	// Show Stashes in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.showStashes": true,

	// Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.showTags": true,

	// Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.repository.showUncommittedChanges": true,

	// Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.repository.showUntrackedFiles": true,

	// Enables commit signing with GPG or X.509.
	"git-graph.repository.sign.commits": false,

	// Enables tag signing with GPG or X.509.
	"git-graph.repository.sign.tags": false,

	// Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
	"git-graph.repository.useMailmap": false,

	// Specifies the order that repositories are sorted in the repository dropdown on the Git Graph View (only visible when more than one repository exists in the current Visual Studio Code Workspace).
	//  - Full Path: Sort repositories alphabetically by the full path of the repository.
	//  - Name: Sort repositories alphabetically by the name of the repository.
	//  - Workspace Full Path: Sort repositories according to the Visual Studio Code Workspace Folder order, then alphabetically by the full path of the repository.
	"git-graph.repositoryDropdownOrder": "Workspace Full Path",

	// Specifies if the Git Graph View's Visual Studio Code context is kept when the panel is no longer visible (e.g. moved to background tab). Enabling this setting will make Git Graph load significantly faster when switching back to the Git Graph tab, however has a higher memory overhead.
	"git-graph.retainContextWhenHidden": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.showCommitsOnlyReferencedByTags`
	// Show commits that are only referenced by tags in Git Graph.
	"git-graph.showCommitsOnlyReferencedByTags": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.onLoad.showCheckedOutBranch`
	// Show the current branch by default when Git Graph is opened. Default: false (show all branches)
	"git-graph.showCurrentBranchByDefault": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.showSignatureStatus`
	// Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
	"git-graph.showSignatureStatus": false,

	// Show a Status Bar Item that opens the Git Graph View when clicked.
	"git-graph.showStatusBarItem": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.showTags`
	// Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.showTags": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.showUncommittedChanges`
	// Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.showUncommittedChanges": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.showUntrackedFiles`
	// Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.showUntrackedFiles": true,

	// Specifies where the "View Git Graph" action appears on the title of SCM Providers.
	//  - Inline: Show the 'View Git Graph' action on the title of SCM Providers
	//  - More Actions: Show the 'View Git Graph' action in the 'More Actions...' menu on the title of SCM Providers
	"git-graph.sourceCodeProviderIntegrationLocation": "Inline",

	// Specifies the colour theme of the icon displayed on the Git Graph tab.
	//  - colour: Show a colour icon which suits most Visual Studio Code colour themes
	//  - grey: Show a grey icon which suits Visual Studio Code colour themes that are predominantly grayscale
	"git-graph.tabIconColourTheme": "colour",

	// Depreciated: This setting has been renamed to `git-graph.repository.useMailmap`
	// Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
	"git-graph.useMailmap": false,

	// The port that SCSS IntelliSense server listens to. Can be used for attaching to the server Node process for debugging / profiling.
	"scss.dev.serverPort": -1,

	// The text of a label that the file imported implicitly. If `null` then label not displayed.
	"scss.implicitlyLabel": "(implicitly)",

	// Allows scan imported files.
	"scss.scanImportedFiles": true,

	// The maximum number of nested directories to scan.
	"scss.scannerDepth": 30,

	// List of glob patterns for directories that are excluded when scanning.
	"scss.scannerExclude": [
		"**/.git",
		"**/node_modules",
		"**/bower_components"
	],

	// Allows to display errors.
	"scss.showErrors": false,

	// Allows prompt Functions.
	"scss.suggestFunctions": true,

	// Allows prompt Functions in String context after specified symbols.
	"scss.suggestFunctionsInStringContextAfterSymbols": " (+-*%",

	// Allows prompt Mixins.
	"scss.suggestMixins": true,

	// Allows prompt Variables.
	"scss.suggestVariables": true,

	// Array of web apps with its connections
	"appService.connections": [],

	// The default web app to use when deploying represented by its full Azure id.  Every subsequent deployment of this workspace will deploy to this web app or slot. Can be disabled by setting to "None"
	"appService.defaultWebAppToDeploy": "",

	// The default subpath of a workspace folder to use when deploying.
	"appService.deploySubpath": "",

	// Prepends each line displayed in the Azure App Service output channel with a timestamp
	"appService.enableOutputTimestamps": true,

	// Enable remote debugging for Python web apps (experimental)
	"appService.enablePythonRemoteDebugging": false,

	// The name of the task to run after zip deployments.
	"appService.postDeployTask": "",

	// The name of the task to run before deploying.
	"appService.preDeployTask": "",

	// Show prompt to improve performance of Zip Deploy by excluding build artifacts from the zip file and running a build during deployment.
	"appService.showBuildDuringDeployPrompt": true,

	// Ask for confirmation before deploying to Azure App Service (deploying will overwrite any previous deployment and cannot be undone).
	"appService.showDeployConfirmation": true,

	// Show a warning when the "deploySubpath" setting does not match the selected folder for deploying.
	"appService.showDeploySubpathWarning": true,

	// Show or hide the App Service Explorer
	"appService.showExplorer": true,

	// Show hidden runtime stacks when creating a web app in Azure. WARNING: These stacks may be in preview or may not be available in all regions.
	"appService.showHiddenStacks": false,

	// Shows a warning that performance may drop when creating an app in an App Service Plan that has more than 3 web apps associated to it
	"appService.showPlanPerformanceWarning": true,

	// Shows warning that project is not configured for VS Code deployments
	"appService.showPreDeployWarning": true,

	// Show warning dialog on remote file uploading.
	"appService.showSavePrompt": true,

	// Defines which files in the workspace to deploy. This applies to Zip deploy only, has no effect on other deployment methods.
	"appService.zipGlobPattern": "**/*",

	// Defines which files in the workspace to ignore for Zip deploy. This applies to Zip deploy only, has no effect on other deployment methods.
	"appService.zipIgnorePattern": [],

	// Create a virtual environment when creating a new Python project.
	"azureFunctions.createPythonVenv": true,

	// The default function app to use when deploying, represented by its full Azure id.  Every subsequent deployment of this workspace will deploy to this function app or slot.
	"azureFunctions.defaultFunctionAppToDeploy": "",

	// The default subpath of a workspace folder to use when deploying. If set, you will not be prompted for the folder path when deploying.
	"azureFunctions.deploySubpath": "",

	// Enable remote debugging for Java Functions Apps running on Windows. (experimental)
	"azureFunctions.enableJavaRemoteDebugging": false,

	// Enable download content and setup project feature using handle uri (experimental)
	"azureFunctions.enableOpenFromPortal": false,

	// Prepends each line displayed in the output channel with a timestamp.
	"azureFunctions.enableOutputTimestamps": true,

	// Enable remote debugging for Node.js Function Apps running on Linux App Service plans. Consumption plans are not supported. (experimental)
	"azureFunctions.enableRemoteDebugging": false,

	// The path to the 'func' executable to use for debug and deploy tasks. For example, set it to 'node_modules/.bin/func' if using the func cli installed as a local npm package.
	"azureFunctions.funcCliPath": "",

	// Build tool for Java Functions project
	"azureFunctions.javaBuildTool": "maven",

	// The timeout (in seconds) to be used when searching for the Azure Functions host process. Since a build is required every time you F5, you may need to adjust this based on how long your build takes.
	"azureFunctions.pickProcessTimeout": 60,

	// The name of the task to run after zip deployments.
	"azureFunctions.postDeployTask": "",

	// The name of the task to run before zip deployments.
	"azureFunctions.preDeployTask": "",

	// The default language to use when performing operations like "Create New Function".
	//  - C#
	//  - F#
	//  - C#Script: (Preview)
	//  - F#Script: (Preview)
	//  - Java
	//  - JavaScript
	//  - PowerShell
	//  - Python
	//  - TypeScript
	//  - Custom
	"azureFunctions.projectLanguage": "",

	// The behavior to use after creating a new project. The options are "AddToWorkspace", "OpenInNewWindow", or "OpenInCurrentWindow".
	"azureFunctions.projectOpenBehavior": "",

	// The default version of the Azure Functions runtime to use when performing operations like "Create New Function".
	//  - ~1: Azure Functions v1
	//  - ~2: Azure Functions v2
	//  - ~3: Azure Functions v3
	//  - ~4: Azure Functions v4
	"azureFunctions.projectRuntime": "",

	// The default subpath of a workspace folder to use for project operations. This is only necessary if you have multiple projects in one workspace. See https://aka.ms/AA4nmfy for more information.
	"azureFunctions.projectSubpath": "",

	// A key used to identify which templates to use for this project. In most cases, this will be automatically detected and should not need to be set.
	"azureFunctions.projectTemplateKey": "",

	// The name of the Python virtual environment used for your project. A virtual environment is required to debug and deploy Python functions.
	"azureFunctions.pythonVenv": "",

	// The timeout (in seconds) to be used when making requests, for example getting the latest templates.
	"azureFunctions.requestTimeout": 15,

	// Set to true to build your project on the server. Currently only applicable for Linux Function Apps.
	"azureFunctions.scmDoBuildDuringDeployment": false,

	// Show a warning to install a 64-bit version of the Azure Functions Core Tools when you create a .NET Framework project.
	"azureFunctions.show64BitWarning": true,

	// Show a warning if your installed version of Azure Functions Core Tools is out-of-date.
	"azureFunctions.showCoreToolsWarning": true,

	// Ask for confirmation before deploying to a Function App in Azure (deploying will overwrite any previous deployment and cannot be undone).
	"azureFunctions.showDeployConfirmation": true,

	// Show a warning when the "deploySubpath" setting does not match the selected folder for deploying.
	"azureFunctions.showDeploySubpathWarning": true,

	// Show deprecated runtime stacks when creating a Function App in Azure. WARNING: These stacks may be removed at any time and may not be available in all regions.
	"azureFunctions.showDeprecatedStacks": false,

	// Show or hide the Azure Functions Explorer
	"azureFunctions.showExplorer": true,

	// Show a warning when an Azure Functions project was detected that has mismatched "extensions.csproj" configuration.
	"azureFunctions.showExtensionsCsprojWarning": true,

	// Show hidden runtime stacks when creating a Function App in Azure. WARNING: These stacks may be in preview or may not be available in all regions.
	"azureFunctions.showHiddenStacks": false,

	// Show a warning if multiple installs of Azure Functions Core Tools are detected.
	"azureFunctions.showMultiCoreToolsWarning": true,

	// Show a warning when an Azure Functions project was detected that has not been initialized for use in VS Code.
	"azureFunctions.showProjectWarning": true,

	// Show a warning when an Azure Functions Python project was detected that does not have a virtual environment.
	"azureFunctions.showPythonVenvWarning": true,

	// Show an option to reload templates when creating a function. This will clear the template cache.
	"azureFunctions.showReloadTemplates": false,

	// Show a warning when an Azure Functions .NET project was detected that has mismatched target frameworks.
	"azureFunctions.showTargetFrameworkWarning": true,

	// Automatically stop the task running the Azure Functions host when a debug sessions ends.
	"azureFunctions.stopFuncTaskPostDebug": true,

	// Set to true if this should not be recognized as an Azure Functions project and you want to hide related functionality.
	"azureFunctions.suppressProject": false,

	// Specify the templates to display when creating a new function. The supported values are 'Verified', 'Core', and 'All'. The 'Verified' category is a subset of 'Core' that has been verified to work with the latest VS Code extension.
	"azureFunctions.templateFilter": "Verified",

	// For development purposes only. You must reload your VS Code window for this to take effect.
	//  - : Default behavior using the best source available.
	//  - Staging: Use the very latest templates from the staging template source.
	//  - Backup: Use backup templates included in the extension's vsix. These may not have the latest updates.
	"azureFunctions.templateSource": "",

	// A runtime release version (any runtime) that species which templates will be used rather than the latest templates.  This version will be used for ALL runtimes. (Requires a restart of VS Code to take effect)
	"azureFunctions.templateVersion": "",

	// Validate the Azure Functions Core Tools is installed before debugging.
	"azureFunctions.validateFuncCoreTools": true,

	// The behavior to use when confirming delete of a resource group.
	//  - EnterName: Prompts with an input box where you enter the resource group name to delete.
	//  - ClickButton: Prompts with a warning dialog where you click a button to delete.
	"azureResourceGroups.deleteConfirmation": "EnterName",

	// Prepends each line displayed in the output channel with a timestamp.
	"azureResourceGroups.enableOutputTimestamps": true,

	// Show some ancillary resources that are created/managed by Azure infrastructure. Displaying them is typically useful when you want to clean up your resource groups or subscriptions.
	"azureResourceGroups.showHiddenTypes": false,

	// Equivalent to setting the DOCKER_CERT_PATH environment variable.
	"docker.certPath": "",

	// Command templates for `docker attach` / `docker exec -it` commands.
	"docker.commands.attach": "docker exec -it ${containerId} ${shellCommand}",

	// Command template(s) for `docker build` commands.
	"docker.commands.build": "docker build --pull --rm -f \"${dockerfile}\" -t ${tag} \"${context}\"",

	// Command templates for `docker-compose down` commands.
	"docker.commands.composeDown": [
		{
			"label": "Compose Down",
			"template": "docker-compose ${configurationFile} down",
			"contextTypes": [
				"moby"
			]
		},
		{
			"label": "Compose Down",
			"template": "docker compose ${configurationFile} down"
		}
	],

	// Command templates for `docker-compose up` commands.
	"docker.commands.composeUp": [
		{
			"label": "Compose Up",
			"template": "docker-compose ${configurationFile} up ${detached} ${build}",
			"contextTypes": [
				"moby"
			]
		},
		{
			"label": "Compose Up",
			"template": "docker compose ${configurationFile} up ${detached}"
		}
	],

	// Command templates for `docker-compose up <subset>` commands.
	"docker.commands.composeUpSubset": [
		{
			"label": "Compose Up",
			"template": "docker-compose ${profileList} ${configurationFile} up ${detached} ${build} ${serviceList}",
			"contextTypes": [
				"moby"
			]
		},
		{
			"label": "Compose Up",
			"template": "docker compose ${configurationFile} ${profileList} up ${detached} ${serviceList}"
		}
	],

	// Command templates for `docker logs` commands.
	"docker.commands.logs": "docker logs --tail 1000 -f ${containerId}",

	// Command templates for `docker run` commands.
	"docker.commands.run": "docker run --rm -d ${exposedPorts} ${tag}",

	// Command templates for `docker run -it` (interactive) commands.
	"docker.commands.runInteractive": "docker run --rm -it ${exposedPorts} ${tag}",

	// Any secondary properties to display for a container (an array). Possible elements include: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, and Tag
	"docker.containers.description": [
		"ContainerName",
		"Status"
	],

	// The property to use to group containers in Docker view: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, Tag, or None
	"docker.containers.groupBy": "Compose Project Name",

	// The primary property to display for a container: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, or Tag
	"docker.containers.label": "FullTag",

	// The property to use to sort containers in Docker view: CreatedTime or Label
	"docker.containers.sortBy": "CreatedTime",

	// Equivalent to setting the DOCKER_CONTEXT environment variable.
	"docker.context": "",

	// Any secondary properties to display for a Docker context (an array). Possible elements include: Name, Description and DockerEndpoint
	"docker.contexts.description": [
		"Description"
	],

	// The primary property to display for a Docker context: Name, Description or DockerEndpoint
	"docker.contexts.label": "Name",

	// Set to true to include --build option when docker-compose command is invoked
	"docker.dockerComposeBuild": true,

	// Set to true to include --d (detached) option when docker-compose command is invoked
	"docker.dockerComposeDetached": true,

	// If specified, this object will be passed to the Dockerode constructor. Takes precedence over DOCKER_HOST, the Docker Host setting, and any existing Docker contexts.
	"docker.dockerodeOptions": {},

	// Absolute path to Docker client executable ('docker' command). If the path contains whitespace, it needs to be quoted appropriately.
	"docker.dockerPath": "docker",

	// Whether or not to enable the preview Docker Compose Language Service. Changing requires restart to take effect.
	"docker.enableDockerComposeLanguageService": true,

	// Docker view refresh interval (milliseconds)
	"docker.explorerRefreshInterval": 2000,

	// Equivalent to setting the DOCKER_HOST environment variable, for example, ssh://myuser@mymachine or tcp://1.2.3.4.
	"docker.host": "",

	// Build context PATH to pass to Docker build command.
	"docker.imageBuildContextPath": "",

	// Check for outdated base images once per Visual Studio Code session
	"docker.images.checkForOutdatedImages": true,

	// Any secondary properties to display for a image (an array). Possible elements include: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, and Size
	"docker.images.description": [
		"CreatedTime"
	],

	// The property to use to group images in Docker view: CreatedTime, FullTag, ImageId, None, Registry, Repository, RepositoryName, RepositoryNameAndTag, or Tag
	"docker.images.groupBy": "Repository",

	// The primary property to display for a image: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, or Size
	"docker.images.label": "Tag",

	// The property to use to sort images in Docker view: CreatedTime, Label, or Size
	"docker.images.sortBy": "CreatedTime",

	// Controls the diagnostic severity for the deprecated MAINTAINER instruction
	"docker.languageserver.diagnostics.deprecatedMaintainer": "warning",

	// Controls the diagnostic severity for parser directives that are not written in lowercase
	"docker.languageserver.diagnostics.directiveCasing": "warning",

	// Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines
	"docker.languageserver.diagnostics.emptyContinuationLine": "warning",

	// Controls the diagnostic severity for instructions that are not written in uppercase
	"docker.languageserver.diagnostics.instructionCasing": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions
	"docker.languageserver.diagnostics.instructionCmdMultiple": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions
	"docker.languageserver.diagnostics.instructionEntrypointMultiple": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions
	"docker.languageserver.diagnostics.instructionHealthcheckMultiple": "warning",

	// Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes
	"docker.languageserver.diagnostics.instructionJSONInSingleQuotes": "warning",

	// Controls the diagnostic severity for WORKDIR instructions that do not point to an absolute path
	"docker.languageserver.diagnostics.instructionWorkdirRelative": "warning",

	// Controls whether the Dockerfile formatter should ignore instructions that span multiple lines when formatting
	"docker.languageserver.formatter.ignoreMultilineInstructions": false,

	// Equivalent to setting the DOCKER_MACHINE_NAME environment variable.
	"docker.machineName": "",

	// Any secondary properties to display for a Docker network (an array). Possible elements include CreatedTime, NetworkDriver, NetworkId, and NetworkName
	"docker.networks.description": [
		"NetworkDriver",
		"CreatedTime"
	],

	// The property to use to group networks in Docker view: CreatedTime, NetworkDriver, NetworkId, NetworkName, or None
	"docker.networks.groupBy": "None",

	// The primary property to display for a Docker network: CreatedTime, NetworkDriver, NetworkId, or NetworkName
	"docker.networks.label": "NetworkName",

	// Show the built-in networks in the explorer.
	"docker.networks.showBuiltInNetworks": true,

	// The property to use to sort networks in Docker view: CreatedTime or Label
	"docker.networks.sortBy": "CreatedTime",

	// Prompt for registry selection if the image is not explicitly tagged.
	"docker.promptForRegistryWhenPushingImages": true,

	// The path to use for scaffolding templates.
	"docker.scaffolding.templatePath": "",

	// Set to true to prompt to switch from "UI" extension mode to "Workspace" extension mode if an operation is not supported in UI mode.
	"docker.showRemoteWorkspaceWarning": true,

	// Equivalent to setting the DOCKER_TLS_VERIFY environment variable.
	"docker.tlsVerify": "",

	// Set to true to truncate long image and container registry paths in Docker view
	"docker.truncateLongRegistryPaths": false,

	// Maximum length of a registry paths displayed in Docker view, including ellipsis. The truncateLongRegistryPaths setting must be set to true for truncateMaxLength setting to be effective.
	"docker.truncateMaxLength": 10,

	// Any secondary properties to display for a Docker volume (an array). Possible values include CreatedTime and VolumeName
	"docker.volumes.description": [
		"CreatedTime"
	],

	// The property to use to group volumes in Docker view: CreatedTime, VolumeName, or None
	"docker.volumes.groupBy": "None",

	// The primary property to display for a Docker volume: CreatedTime or VolumeName
	"docker.volumes.label": "VolumeName",

	// The property to use to sort volumes in Docker view: CreatedTime or Label
	"docker.volumes.sortBy": "CreatedTime",

	// Enable Telemetry for the .NET install tool.
	"dotnetAcquisitionExtension.enableTelemetry": true,

	// File Path to an existing installation of .NET.
	"dotnetAcquisitionExtension.existingDotnetPath": [],

	// Timeout for installing .NET in seconds.
	"dotnetAcquisitionExtension.installTimeoutValue": 120,

	// Enable Telemetry for the .NET Education Bundle SDK Install Tool.
	"dotnetSDKAcquisitionExtension.enableTelemetry": true,

	// Timeout for installing .NET SDK in seconds.
	"dotnetSDKAcquisitionExtension.installTimeoutValue": 300,

	// List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
	"python.autoComplete.extraPaths": [],

	// Path to the conda executable to use for activation (version 4.4+).
	"python.condaPath": "",

	// Path to default Python to use when extension loads up for the first time, no longer used once an interpreter is selected for the workspace. See https://aka.ms/AAfekmf to understand when this is used.
	"python.defaultInterpreterPath": "python",

	// Enable source map support for meaningful stack traces in error logs.
	"python.diagnostics.sourceMapsEnabled": false,

	// Whether to check if Python is installed (also warn when using the macOS-installed Python).
	"python.disableInstallationCheck": false,

	// Absolute path to a file containing environment variable definitions.
	"python.envFile": "${workspaceFolder}/.env",

	// Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.
	"python.experiments.enabled": true,

	// List of experiment to opt into. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optInto": [],

	// List of experiment to opt out of. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optOutFrom": [],

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.autopep8Args": [],

	// Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.
	"python.formatting.autopep8Path": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.blackArgs": [],

	// Path to Black, you can use a custom version of Black by modifying this setting to include the full path.
	"python.formatting.blackPath": "black",

	// Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.
	"python.formatting.provider": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.yapfArgs": [],

	// Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.
	"python.formatting.yapfPath": "yapf",

	// Whether to install Python modules globally when not using an environment.
	"python.globalModuleInstallation": false,

	// Set to "weekly" or "daily" to automatically download and install the latest Insiders builds of the python extension, which include upcoming features and bug fixes.
	"python.insidersChannel": "off",

	// Defines type of the language server.
	//  - Default: Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.
	//  - Jedi: Use Jedi behind the Language Server Protocol (LSP) as a language server.
	//  - Pylance: Use Pylance as a language server.
	//  - None: Disable language server capabilities.
	"python.languageServer": "Default",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.banditArgs": [],

	// Whether to lint Python files using bandit.
	"python.linting.banditEnabled": false,

	// Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.
	"python.linting.banditPath": "bandit",

	// Optional working directory for linters.
	"python.linting.cwd": null,

	// Whether to lint Python files.
	"python.linting.enabled": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.flake8Args": [],

	// Severity of Flake8 message type 'E'.
	"python.linting.flake8CategorySeverity.E": "Error",

	// Severity of Flake8 message type 'F'.
	"python.linting.flake8CategorySeverity.F": "Error",

	// Severity of Flake8 message type 'W'.
	"python.linting.flake8CategorySeverity.W": "Warning",

	// Whether to lint Python files using flake8
	"python.linting.flake8Enabled": false,

	// Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.
	"python.linting.flake8Path": "flake8",

	// Patterns used to exclude files or folders from being linted.
	"python.linting.ignorePatterns": [
		"**/site-packages/**/*.py",
		".vscode/*.py"
	],

	// Whether to lint Python files when saved.
	"python.linting.lintOnSave": true,

	// Controls the maximum number of problems produced by the server.
	"python.linting.maxNumberOfProblems": 100,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.mypyArgs": [
		"--follow-imports=silent",
		"--ignore-missing-imports",
		"--show-column-numbers",
		"--no-pretty"
	],

	// Severity of Mypy message type 'Error'.
	"python.linting.mypyCategorySeverity.error": "Error",

	// Severity of Mypy message type 'Note'.
	"python.linting.mypyCategorySeverity.note": "Information",

	// Whether to lint Python files using mypy.
	"python.linting.mypyEnabled": false,

	// Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.
	"python.linting.mypyPath": "mypy",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.prospectorArgs": [],

	// Whether to lint Python files using prospector.
	"python.linting.prospectorEnabled": false,

	// Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.
	"python.linting.prospectorPath": "prospector",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pycodestyleArgs": [],

	// Severity of pycodestyle message type 'E'.
	"python.linting.pycodestyleCategorySeverity.E": "Error",

	// Severity of pycodestyle message type 'W'.
	"python.linting.pycodestyleCategorySeverity.W": "Warning",

	// Whether to lint Python files using pycodestyle
	"python.linting.pycodestyleEnabled": false,

	// Path to pycodestyle, you can use a custom version of pycodestyle by modifying this setting to include the full path.
	"python.linting.pycodestylePath": "pycodestyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pydocstyleArgs": [],

	// Whether to lint Python files using pydocstyle
	"python.linting.pydocstyleEnabled": false,

	// Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.
	"python.linting.pydocstylePath": "pydocstyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylamaArgs": [],

	// Whether to lint Python files using pylama.
	"python.linting.pylamaEnabled": false,

	// Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.
	"python.linting.pylamaPath": "pylama",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylintArgs": [],

	// Severity of Pylint message type 'Convention/C'.
	"python.linting.pylintCategorySeverity.convention": "Information",

	// Severity of Pylint message type 'Error/E'.
	"python.linting.pylintCategorySeverity.error": "Error",

	// Severity of Pylint message type 'Fatal/F'.
	"python.linting.pylintCategorySeverity.fatal": "Error",

	// Severity of Pylint message type 'Refactor/R'.
	"python.linting.pylintCategorySeverity.refactor": "Hint",

	// Severity of Pylint message type 'Warning/W'.
	"python.linting.pylintCategorySeverity.warning": "Warning",

	// Whether to lint Python files using pylint.
	"python.linting.pylintEnabled": false,

	// Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.
	"python.linting.pylintPath": "pylint",

	// The logging level the extension logs at, defaults to 'error'
	"python.logging.level": "error",

	// Path to the pipenv executable to use for activation.
	"python.pipenvPath": "pipenv",

	// Path to the poetry executable.
	"python.poetryPath": "poetry",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.sortImports.args": [],

	// Path to isort script, default using inner version
	"python.sortImports.path": "",

	// Set this setting to your preferred TensorBoard log directory to skip log directory prompt when starting TensorBoard.
	"python.tensorBoard.logDirectory": "",

	// Activate Python Environment in the current Terminal on load of the Extension.
	"python.terminal.activateEnvInCurrentTerminal": false,

	// Activate Python Environment in Terminal created using the Extension.
	"python.terminal.activateEnvironment": true,

	// When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
	"python.terminal.executeInFileDir": false,

	// Python launch arguments to use when executing a file in the terminal.
	"python.terminal.launchArgs": [],

	// Enable auto run test discovery when saving a test file.
	"python.testing.autoTestDiscoverOnSaveEnabled": true,

	// Optional working directory for tests.
	"python.testing.cwd": null,

	// Port number used for debugging of tests.
	"python.testing.debugPort": 3000,

	// Prompt to configure a test framework if potential tests directories are discovered.
	"python.testing.promptToConfigure": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.pytestArgs": [],

	// Enable testing using pytest.
	"python.testing.pytestEnabled": false,

	// Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.
	"python.testing.pytestPath": "pytest",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.unittestArgs": [
		"-v",
		"-s",
		".",
		"-p",
		"*test*.py"
	],

	// Enable testing using unittest.
	"python.testing.unittestEnabled": false,

	// Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).
	"python.venvFolders": [],

	// Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
	"python.venvPath": "",

	// Pylance insiders download channel.
	//  - off: Do not check for insiders updates.
	//  - daily: Automatically check for and install insiders updates daily.
	"pylance.insidersChannel": "off",

	// Offer auto-import completions.
	"python.analysis.autoImportCompletions": true,

	// Automatically add common search paths like 'src'.
	"python.analysis.autoSearchPaths": true,

	// Add parentheses to function completions.
	"python.analysis.completeFunctionParens": false,

	// Analysis mode for diagnostics.
	//  - openFilesOnly: Analyzes and reports errors on only open files.
	//  - workspace: Analyzes and reports errors on all files in the workspace.
	"python.analysis.diagnosticMode": "openFilesOnly",

	// Allows a user to override the severity levels for individual diagnostics.
	"python.analysis.diagnosticSeverityOverrides": {},

	// Additional import search resolution paths
	"python.analysis.extraPaths": [],

	// Index installed third party libraries and user files for language features such as auto-import, add import, workspace symbols and etc.
	"python.analysis.indexing": null,

	// Specifies the level of logging for the Output panel
	"python.analysis.logLevel": "Information",

	// Path to directory containing custom type stub files.
	"python.analysis.stubPath": "typings",

	// Defines the default rule set for type checking.
	//  - off: Surfaces diagnostics for invalid syntax, unresolved imports, undefined variables.
	//  - basic: All "off" rules + basic type checking rules.
	//  - strict: All "off" rules + all type checking rules.
	"python.analysis.typeCheckingMode": "off",

	// Paths to look for typeshed modules.
	"python.analysis.typeshedPaths": [],

	// Use library implementations to extract type information when type stub is not present.
	"python.analysis.useLibraryCodeForTypes": true,

	// The command to run after cloning the dotfiles repository. Defaults to run the first file of `install.sh`, `install`, `bootstrap.sh`, `bootstrap`, `setup.sh` and `setup` found in the dotfiles repository's root folder.
	"dotfiles.installCommand": "",

	// URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository.
	"dotfiles.repository": "",

	// The path to clone the dotfiles repository to. Defaults to `~/dotfiles`.
	"dotfiles.targetPath": "~/dotfiles",

	// Controls whether a Docker volume should be used to cache the VS Code server and extensions. Currently only applies to single container and not Docker Compose configurations.
	"remote.containers.cacheVolume": true,

	// Controls whether the Git configuration (`~/.gitconfig`) should be copied into the container. This is done after installing any `dotfiles.repository` and will not overwrite an existing Git configuration file.
	"remote.containers.copyGitConfig": true,

	// Configures the list of extensions to always install while creating a container.
	"remote.containers.defaultExtensions": [],

	// Docker Compose executable name or path.
	"remote.containers.dockerComposePath": "docker-compose",

	// Docker (or Podman) executable name or path.
	"remote.containers.dockerPath": "docker",

	// The command to run after cloning the dotfiles repository for DevContainers. This overrides the common setting for the dotfiles install command.
	"remote.containers.dotfiles.installCommand": "",

	// URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository for DevContainers. This overrides the common setting for the dotfiles repository.
	"remote.containers.dotfiles.repository": "",

	// The path to clone the dotfiles repository to for DevContainers. This overrides the common setting for the dotfiles target path.
	"remote.containers.dotfiles.targetPath": "",

	// Controls whether CLI commands should always be executed in WSL. The default is to only execute in WSL for workspace folders in WSL. This setting has no effect on other platforms than Windows.
	"remote.containers.executeInWSL": false,

	// WSL distro to use when not reopening a WSL folder. The default is to use the default WSL distro (see `wsl -l`). This setting has no effect when `remote.containers.executeInWSL` is not enabled or on other platforms than Windows.
	"remote.containers.executeInWSLDistro": "",

	// Where to write the configuration for the Git credential helper.
	//  - system: Write to system config (`/etc/gitconfig`, requires root access).
	//  - global: Write to user config (`~/.gitconfig`).
	//  - none: Do not set a credential helper.
	"remote.containers.gitCredentialHelperConfigLocation": "global",

	// The log level for the extension.
	"remote.containers.logLevel": "debug",

	// List of additional paths to search for [repository configurations](https://github.com/microsoft/vscode-dev-containers/tree/main/repository-containers).
	"remote.containers.repositoryConfigurationPaths": [],

	// The consistency level used for the workspace mount (existing containers must be rebuilt to take effect).
	//  - consistent: Perfect consistency.
	//  - cached: The host’s view is authoritative.
	//  - delegated: The container’s view is authoritative.
	"remote.containers.workspaceMountConsistency": "cached",

	// Deprecated, please use `remote.SSH.localServerDownload`
	// If downloading the VS Code server fails on the host, this allows the extension to fall back to downloading on the client and transferring it to the host with scp.
	"remote.SSH.allowLocalServerDownload": true,

	// The absolute file path to a custom SSH config file.
	"remote.SSH.configFile": "",

	// Specifies the timeout in seconds used for the SSH command that connects to the remote.
	"remote.SSH.connectTimeout": 15,

	// List of extensions that should be installed automatically on all SSH hosts.
	"remote.SSH.defaultExtensions": [],

	// A list of ports to forward when the connection is established.
	"remote.SSH.defaultForwardedPorts": [],

	// Enable fixing the remote environment so that the SSH config option `ForwardAgent` will take effect as expected from VS Code's remote extension host.
	"remote.SSH.enableAgentForwarding": true,

	// **Experimental**: Detect SSH connections that target Azure VMs in the SSH hosts explorer. Requires that you are logged in using the `Azure Account` extension.
	"remote.SSH.enableAzureIntegration": false,

	// Whether to use SSH dynamic forwarding to allow setting up new port tunnels over an existing SSH connection. When this is used, a password only needs to be entered once for each remote window.
	"remote.SSH.enableDynamicForwarding": true,

	// Enable fixing the remote environment so that the SSH config option `ForwardX11` will take effect as expected from VS Code's remote extension host.
	"remote.SSH.enableX11Forwarding": true,

	// Specifies the order in which to display folders under SSH Targets in the Remote Explorer.
	"remote.SSH.foldersSortOrder": "most recently used",

	// Whether the extension can download the VS Code Server on the client and transfer it to the host with scp, instead of downloading it on the host.
	//  - auto: The server will first be downloaded on the host, and if that fails, will fall back to downloading locally
	//  - always: The server will only be downloaded locally and transferred to the host
	//  - off: The server will only be downloaded on the host
	"remote.SSH.localServerDownload": "auto",

	// Whether to keep lockfiles in `/tmp` instead of in the server's install folder. Useful for connecting to hosts which have issues with locking, such as hosts with a home directory using NFS or another distributed filesystem.
	"remote.SSH.lockfilesInTmp": false,

	// The log level for the extension.
	"remote.SSH.logLevel": "debug",

	// The maximum number of times to attempt reconnection. Use 0 to disallow reconnection, and `null` to use the maximum of 8.
	"remote.SSH.maxReconnectionAttempts": null,

	// An absolute path to the SSH executable. When empty, it will use "ssh" on the path or in common install locations.
	"remote.SSH.path": "",

	// A map of the remote hostname to the platform for that remote. Valid values: `linux`, `macOS`, `windows`. Note - this setting will soon be required when useLocalServer is disabled, so it is currently being autopopulated for successful connections, but is not currently used.
	"remote.SSH.remotePlatform": {},

	// When true, the remote VS Code server will listen on a socket path instead of opening a port. Only valid for Linux and macOS remotes. After toggling this setting, run the command "Kill VS Code Server on Host..." for it to take effect. Requires OpenSSH 6.7+. Disables the "local server" connection multiplexing mode. Requires `AllowStreamLocalForwarding` to be enabled for the SSH server.
	"remote.SSH.remoteServerListenOnSocket": false,

	// A map of remote host to absolute path where the VS Code server will be installed. By default the server is installed in the home directory of every remote. **Note**: By changing this setting you may need to clean up other installations of `.vscode-server` on your remote that isn't in the path you've configured.
	"remote.SSH.serverInstallPath": {},

	// A map of the remote hostname to a range of ports you'd prefer the server to connect to on launch on the remote machine. If no free port is found in range, an error will be thrown. Valid ranges of the form `number-number` such as `4000-5000`; it's expected the first number will be lower than the next.
	"remote.SSH.serverPickPortsFromRange": {},

	// Always reveal the SSH login terminal.
	"remote.SSH.showLoginTerminal": false,

	// Due to a bug with password handling in some versions of the SSH client bundled with Windows, the extension prefers a non-Windows SSH client, such as the one bundled with Git, and will show a warning when another one can't be found. This setting disables that warning.
	"remote.SSH.suppressWindowsSshWarning": false,

	// Whether to use `flock` for creating lockfiles on Linux remotes instead of `ln`. By default, we use `flock` on Linux remotes and `ln` on macOS.
	"remote.SSH.useFlock": true,

	// Enables a mode for connecting using a single connection shared between windows and across window reloads. This makes it faster to open new windows and reduces the number of times a password needs to be entered.
	"remote.SSH.useLocalServer": true,

	// Deprecated: Please use `remote.SSH.remotePlatorm` instead
	// **Deprecated**: Enables experimental support for connecting to Windows remotes. Add the names of windows remotes to this list.
	"remote.SSH.windowsRemotes": [],

	// If set, the output in the WSL log shows debug information.
	"remote.WSL.debug": false,

	// If set, polling is used for file watching inside WSL1. Polling can be CPU intensive but fixes the WSL1 issue that folders can not be renamed when watched. This option requires restart to take effect.
	"remote.WSL.fileWatcher.polling": false,

	// The file watcher polling interval in ms used inside WSL1 distros if `remote.WSL.fileWatcher.polling` is set.
	// This option requires restart to take effect.
	"remote.WSL.fileWatcher.pollingInterval": 5000,

	// Use `remote.WSL2.connectionMethod` instead.
	// If set, the connection to a VS Code server running in WSL2 will use localhost (::1). If not set, the connection will directly use the WSL2 VM's IP addresss if accessible or localhost if not.
	"remote.WSL.server.connectThroughLocalhost": false,

	// If set, the WSL windows gets the environment from the shell it was opened from.
	"remote.WSL.useShellEnvironment": true,

	// Specifies how Remote - WSL will connect to the VS Code server running in WSL1 distros. This option requires restart to take effect.
	//  - localhost: Connects to the server in WSL though 127.0.0.1 which is beeing shared between Windows and WSL1.
	//  - wslExeProxy: Connects to the server in WSL through a local proxy server that uses 'wsl.exe' to forward the connection to WSL.
	"remote.WSL1.connectionMethod": "localhost",

	// Specifies how Remote - WSL will connect to the VS Code server running in WSL2 distros. This option requires restart to take effect.
	//  - localhost: Connects to the server in WSL though localhost (::1) which is forwarded to the WSL2 VM by Windows.
	//  - wsl2VMAddress: Connects to the server in WSL though the IP address of the WSL2 VM.
	//  - wslExeProxy: Connects to the server in WSL through a local proxy server that uses 'wsl.exe' to forward the connection to WSL.
	"remote.WSL2.connectionMethod": "wslExeProxy",

	// The current Azure Cloud to connect to.
	//  - AzureCloud: Azure
	//  - AzureChinaCloud: Azure China
	//  - AzureGermanCloud: Azure Germany
	//  - AzureUSGovernment: Azure US Government
	//  - AzureCustomCloud: Azure Custom Cloud
	"azure.cloud": "Azure",

	// The management endpoint for your Azure Custom Cloud environment.
	"azure.customCloud.resourceManagerEndpointUrl": "",

	// Development setting: The PPE environment for testing.
	"azure.ppe": null,

	// The resource filter, each element is a tenant id and a subscription id separated by a slash.
	"azure.resourceFilter": null,

	// Whether to show the email address (e.g., in the status bar) of the signed in account.
	"azure.showSignedInEmail": true,

	// A specific tenant to sign in to. The default is to sign in to the common tenant and use all known tenants.
	"azure.tenant": "",

	// Add include paths from `nan` and `node-addon-api` when they are dependencies.
	"C_Cpp.addNodeAddonIncludePaths": false,

	// Controls whether files are automatically added to `files.associations` when they are the target of a navigation operation from a C/C++ file.
	"C_Cpp.autoAddFileAssociations": true,

	// Controls the auto-completion provider. If `Disabled` and you want word-based completion, you will also need to set `"[cpp]": {"editor.wordBasedSuggestions": true}` (and similarly for `c` and `cuda-cpp` languages).
	//  - Default: Uses the active IntelliSense engine.
	//  - Disabled: Uses the word-based completion provided by Visual Studio Code.
	"C_Cpp.autocomplete": "Default",

	// If `true`, autocomplete will automatically add `(` after function calls, in which case `)` may also be added, depending on the value of the `editor.autoClosingBrackets` setting.
	"C_Cpp.autocompleteAddParentheses": false,

	// Name of the predefined style used as a fallback in case `clang-format` is invoked with style `file` but the `.clang-format` file is not found. Possible values are `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`, `none`, or use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
	"C_Cpp.clang_format_fallbackStyle": "Visual Studio",

	// The full path of the `clang-format` executable. If not specified, and `clang-format` is available in the environment path, that is used. If not found in the environment path, the `clang-format` bundled with the extension will be used.
	"C_Cpp.clang_format_path": "",

	// If set, overrides the include sorting behavior determined by the `SortIncludes` parameter.
	"C_Cpp.clang_format_sortIncludes": null,

	// Coding style, currently supports: `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`. Use `file` to load the style from a `.clang-format` file in the current or parent directory. Use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
	"C_Cpp.clang_format_style": "file",

	// Additional command line arguments to pass to `clang-tidy`. These take precedence over the equivalent `C_Cpp.codeAnalysis.clangTidy.*` settings.
	"C_Cpp.codeAnalysis.clangTidy.args": [],

	// List of disabled `clang-tidy` checks. The values are appended to the `Checks` in a `.clang-tidy` file or `C_Cpp.codeAnalysis.clangTidy.config`, if any.
	"C_Cpp.codeAnalysis.clangTidy.checks.disabled": [],

	// List of enabled `clang-tidy` checks. The values are appended to the `Checks` in a `.clang-tidy` file or `C_Cpp.codeAnalysis.clangTidy.config`, if any. The default check `clang-analyzer-*` is always used unless it is explicitly disabled.
	"C_Cpp.codeAnalysis.clangTidy.checks.enabled": [],

	// Specifies a `clang-tidy` configuration in YAML/JSON format: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{key: x, value: y}]}`. When the value is empty, `clang-tidy` will attempt to find a file named `.clang-tidy` for each source file in its parent directories.
	"C_Cpp.codeAnalysis.clangTidy.config": "",

	// If `true`, code analysis using `clang-tidy` will be enabled and run automatically if `C_Cpp.codeAnalysis.runAutomatically` is `true` (the default).
	"C_Cpp.codeAnalysis.clangTidy.enabled": false,

	// Specifies a `clang-tidy` configuration in YAML/JSON format to be used as a fallback when `C_Cpp.codeAnalysis.clangTidy.config` is not set and no `.clang-tidy` file is found: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{key: x, value: y}]}`.
	"C_Cpp.codeAnalysis.clangTidy.fallbackConfig": "",

	// A POSIX extended regular expression (ERE) matching the names of the headers to output diagnostics from. Diagnostics from the main file of each translation unit are always displayed. The `${workspaceFolder}` variable is supported (and is used as the default fallback value if no `.clang-tidy` file exists). If this option is not `null` (empty), it overrides the `HeaderFilterRegex` option in a `.clang-tidy` file, if any.
	"C_Cpp.codeAnalysis.clangTidy.headerFilter": null,

	// The full path of the `clang-tidy` executable. If not specified, and `clang-tidy` is available in the environment path, that is used. If not found in the environment path, the `clang-tidy` bundled with the extension will be used.
	"C_Cpp.codeAnalysis.clangTidy.path": "",

	// Configure glob patterns for excluding folders and files for code analysis. Files not under the workspace folder are always excluded. Inherits values from `files.exclude#` and `#C_Cpp.files.exclude`. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"C_Cpp.codeAnalysis.exclude": {},

	// The maximum number of concurrent threads to use for code analysis. The default of `null` (empty) uses half the value inherited from `C_Cpp.maxConcurrentThreads`.
	"C_Cpp.codeAnalysis.maxConcurrentThreads": null,

	// Fewer code analysis processes will run concurrently after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
	"C_Cpp.codeAnalysis.maxMemory": null,

	// If `true`, code analysis will run automatically on a file after it is opened or saved.
	"C_Cpp.codeAnalysis.runAutomatically": true,

	// Controls the delay in milliseconds before code analysis starts processing after a save is triggered from an edit when `files.autoSave#` is `afterDelay` and `#C_Cpp.codeAnalysis.runAutomatically` is `true`.
	"C_Cpp.codeAnalysis.updateDelay": 2000,

	// If enabled, code folding ranges are provided by the language server.
	"C_Cpp.codeFolding": "Enabled",

	// Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.
	"C_Cpp.commentContinuationPatterns": [
		"/**"
	],

	// Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.
	"C_Cpp.configurationWarnings": "Enabled",

	// If `true`, debugger shell command substitution will use obsolete backtick ``(`)``.
	"C_Cpp.debugger.useBacktickCommandSubstitution": false,

	// The value to use in a configuration if `browse.databaseFilename` is either not specified or set to `${default}`.
	"C_Cpp.default.browse.databaseFilename": "",

	// The value to use in a configuration if `browse.limitSymbolsToIncludedHeaders` is either not specified or set to `${default}`.
	"C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,

	// The value to use in a configuration if `browse.path` is not specified, or the values to insert if `${default}` is present in `browse.path`.
	"C_Cpp.default.browse.path": null,

	// The value to use in a configuration if `compileCommands` is either not specified, or set to `${default}`.
	"C_Cpp.default.compileCommands": "",

	// The value to use in configuration if `compilerArgs` is either not specified or set to `${default}`.
	"C_Cpp.default.compilerArgs": [],

	// The value to use in a configuration if `compilerPath` is either not specified or set to `${default}`.
	"C_Cpp.default.compilerPath": null,

	// The value to use in a configuration if `configurationProvider` is either not specified or set to `${default}`.
	"C_Cpp.default.configurationProvider": "",

	// The value to use in a configuration if `cppStandard` is either not specified or set to `${default}`.
	"C_Cpp.default.cppStandard": "",

	// The value to use in a configuration if `cStandard` is either not specified or set to `${default}`.
	"C_Cpp.default.cStandard": "",

	// The value to use in a configuration if `customConfigurationVariables` is not set, or the values to insert if `${default}` is present as a key in `customConfigurationVariables`.
	"C_Cpp.default.customConfigurationVariables": null,

	// The value to use in a configuration if `defines` is not specified, or the values to insert if `${default}` is present in `defines`.
	"C_Cpp.default.defines": [],

	// Controls whether the extension will report errors detected in `c_cpp_properties.json`.
	"C_Cpp.default.enableConfigurationSquiggles": true,

	// The value to use in a configuration if `forcedInclude` is not specified, or the values to insert if `${default}` is present in `forcedInclude`.
	"C_Cpp.default.forcedInclude": [],

	// The value to use in a configuration if `includePath` is not specified in `c_cpp_properties.json`. If `includePath` is specified, add `${default}` to the array to insert the values from this setting. Usually, this should not include system includes; instead, set `C_Cpp.default.compilerPath`.
	"C_Cpp.default.includePath": [],

	// The value to use in a configuration if `intelliSenseMode` is either not specified or set to `${default}`.
	"C_Cpp.default.intelliSenseMode": "",

	// The value to use in a configuration if `macFrameworkPath` is not specified, or the values to insert if `${default}` is present in `macFrameworkPath`.
	"C_Cpp.default.macFrameworkPath": [],

	// Set to `true` to merge include paths, defines, and forced includes with those from a configuration provider.
	"C_Cpp.default.mergeConfigurations": false,

	// The value to use for the system include path. If set, it overrides the system include path acquired via `compilerPath` and `compileCommands` settings.
	"C_Cpp.default.systemIncludePath": [],

	// Version of the Windows SDK include path to use on Windows, e.g. `10.0.17134.0`.
	"C_Cpp.default.windowsSdkVersion": "",

	// Controls whether inactive preprocessor blocks are colored differently than active code. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.
	"C_Cpp.dimInactiveRegions": true,

	// If enabled, code is colorized based on IntelliSense. This setting only applies if `C_Cpp.intelliSenseEngine` is set to `Default`.
	"C_Cpp.enhancedColorization": "Enabled",

	// Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. It also controls whether code analysis warnings are reported if includes can't be found. This setting is ignored by the Tag Parser engine.
	"C_Cpp.errorSquiggles": "EnabledIfIncludesResolve",

	// Instructs the extension when to use the `files.exclude#` (and `#C_Cpp.files.exclude#`) setting when determining which files should be added to the code navigation database while traversing through the paths in the `browse.path` array. If your `#files.exclude` setting only contains folders, then `checkFolders` is the best choice and will increase the speed at which the extension can initialize the code navigation database.
	//  - checkFolders: The exclusion filters will only be evaluated once per folder (individual files are not checked).
	//  - checkFilesAndFolders: The exclusion filters will be evaluated against every file and folder encountered.
	"C_Cpp.exclusionPolicy": "checkFolders",

	// Controls whether "experimental" features are usable.
	"C_Cpp.experimentalFeatures": "Disabled",

	// Configure glob patterns for excluding folders (and files if `C_Cpp.exclusionPolicy#` is changed). These are specific to the C/C++ extension and are in addition to `#files.exclude#`, but unlike `#files.exclude` they also apply to paths outside the current workspace folder and are not removed from the Explorer view. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"C_Cpp.files.exclude": {
		"**/.vscode": true
	},

	// Configures the formatting engine.
	//  - clangFormat: `clang-format` will be used to format code.
	//  - vcFormat: The Visual C++ formatting engine will be used to format code.
	//  - Default: By default, `clang-format` will be used to format the code. However, the Visual C++ formatting engine will be used if an `.editorconfig` file with relevant settings is found nearer to the code being formatted and `C_Cpp.clang_format_style` is the default value: `file`.
	//  - Disabled: Code formatting will be disabled.
	"C_Cpp.formatting": "Default",

	// Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionBackgroundColor": "",

	// Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionForegroundColor": "",

	// Controls the opacity of inactive preprocessor blocks. Scales between `0.1` and `1.0`. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionOpacity": 0.55,

	// The maximum number of IntelliSense processes to keep running. The default of `null` (empty) uses value inherited from `C_Cpp.maxCachedProcesses`.
	"C_Cpp.intelliSense.maxCachedProcesses": null,

	// Older IntelliSense processes will shut down before new processes are created after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
	"C_Cpp.intelliSense.maxMemory": null,

	// Defines the folder path for cached precompiled headers used by IntelliSense. The default cache path is `%LocalAppData%/Microsoft/vscode-cpptools` on Windows, `$XDG_CACHE_HOME/vscode-cpptools/` on Linux (or `$HOME/.cache/vscode-cpptools/` if `XDG_CACHE_HOME` is not defined), and `$HOME/Library/Caches/vscode-cpptools/` on macOS. The default path will be used if no path is specified or if a specified path is invalid.
	"C_Cpp.intelliSenseCachePath": "",

	// Maximum size of the per-workspace hard drive space in megabytes (MB) for cached precompiled headers; the actual usage may fluctuate around this value. The default size is `5120` MB. Precompiled header caching is disabled when the size is `0`.
	"C_Cpp.intelliSenseCacheSize": 5120,

	// Controls the IntelliSense provider.
	//  - Default: Provides context-aware results via a separate IntelliSense process.
	//  - Tag Parser: Provides "fuzzy" results that are not context-aware.
	//  - Disabled: Turns off C/C++ language service features.
	"C_Cpp.intelliSenseEngine": "Default",

	// Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing `#include` errors.
	"C_Cpp.intelliSenseEngineFallback": "Disabled",

	// Memory usage limit in megabytes (MB) of an IntelliSense process. The default is `4096` and the maximum is `16384`. The extension will shutdown and restart an IntelliSense process when it exceeds the limit.
	"C_Cpp.intelliSenseMemoryLimit": 4096,

	// Controls the delay in milliseconds before IntelliSense starts updating after a modification.
	"C_Cpp.intelliSenseUpdateDelay": 2000,

	// The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: `None` < `Error` < `Warning` < `Information` < `Debug`.
	"C_Cpp.loggingLevel": "Error",

	// The maximum number of cached processes to use for language service processing. The default of `null` (empty) uses twice the number of logical processors available.
	"C_Cpp.maxCachedProcesses": null,

	// The maximum number of concurrent threads to use for language service processing. The value is a hint and may not always be used. The default of `null` (empty) uses the number of logical processors available.
	"C_Cpp.maxConcurrentThreads": null,

	// The maximum memory (in MB) available for language service processing. Fewer processes will be cached and run concurrently after this memory usage is exceeded. The default of `null` (empty) uses the system's free memory.
	"C_Cpp.maxMemory": null,

	// The character used as a path separator for `#include` auto-completion results.
	"C_Cpp.preferredPathSeparator": "Forward Slash",

	// The maximum number of processes to keep in memory for 'Find All References' and 'Rename'. The default of `0` disables this feature. The value of `null` (empty) uses the value inherited from `C_Cpp.maxCachedProcesses`.
	"C_Cpp.references.maxCachedProcesses": 0,

	// The maximum number of concurrent threads to use for 'Find All References' and 'Rename'. The default of `null` (empty) uses the value inherited from `C_Cpp.maxConcurrentThreads`.
	"C_Cpp.references.maxConcurrentThreads": null,

	// Fewer 'Find All References' and 'Rename' processes will be cached and run concurrently after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
	"C_Cpp.references.maxMemory": null,

	// If `true`, 'Rename Symbol' will require a valid C/C++ identifier.
	"C_Cpp.renameRequiresIdentifier": true,

	// If `true`, tooltips of hover and auto-complete will only display certain labels of structured comments. Otherwise, all comments are displayed.
	"C_Cpp.simplifyStructuredComments": true,

	// If `true`, snippets are provided by the language server.
	"C_Cpp.suggestSnippets": true,

	// This setting is deprecated. Pre-release extensions are now available via the Marketplace.
	// Set to `Insiders` to automatically download and install the latest Insiders builds of the extension, which include upcoming features and bug fixes.
	"C_Cpp.updateChannel": "Default",

	// Access specifiers are indented relative to class or struct definitions by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.accessSpecifiers": false,

	// Braces are indented by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.braces": false,

	// Code inside a `case` block is indented relative to its label by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.caseContents": true,

	// Indent braces following a case statement by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.caseContentsWhenBlock": false,

	// Labels are indented relative to switch statements by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.caseLabels": false,

	// The position of goto labels.
	//  - oneLeft: Position goto labels to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
	//  - leftmostColumn: Position goto labels at the leftmost edge of the code.
	//  - none: Goto labels will not be formatted.
	"C_Cpp.vcFormat.indent.gotoLabels": "oneLeft",

	// Indent braces of lambdas used as function parameters relative to the start of the statement by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.lambdaBracesWhenParameter": true,

	// Determines what new line indentation is relative to.
	//  - outermostParenthesis: Indent new line relative to the outermost open parenthesis.
	//  - innermostParenthesis: Indent new line relative to the innermost open parenthesis.
	//  - statementBegin: Indent new line relative to the beginning of the current statement.
	"C_Cpp.vcFormat.indent.multiLineRelativeTo": "innermostParenthesis",

	// Code is indented relative to its enclosing namespace by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.namespaceContents": true,

	// The position of preprocessor directives.
	//  - oneLeft: Preprocessor directives are positioned to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
	//  - leftmostColumn: Preprocessor directives are positioned at the leftmost edge of the code.
	//  - none: Preprocessor directives will not be formatted.
	"C_Cpp.vcFormat.indent.preprocessor": "leftmostColumn",

	// Indentation of comments is not changed during formatting operations.
	"C_Cpp.vcFormat.indent.preserveComments": false,

	// In existing code, preserve the existing indent alignment of new lines within parentheses.
	"C_Cpp.vcFormat.indent.preserveWithinParentheses": false,

	// When a new line is typed, it is aligned under the opening parenthesis or based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
	//  - alignToParenthesis: New line is aligned under the opening parenthesis.
	//  - indent: New line is indented based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
	"C_Cpp.vcFormat.indent.withinParentheses": "indent",

	// Place `catch` and similar keywords on a new line.
	"C_Cpp.vcFormat.newLine.beforeCatch": true,

	// Place `else` on a new line.
	"C_Cpp.vcFormat.newLine.beforeElse": true,

	// The position of opening braces for control blocks.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.block": "ignore",

	// The position of opening braces for functions.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.function": "ignore",

	// The position of opening braces for lambda functions.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": "ignore",

	// The position of opening braces for namespaces.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": "ignore",

	// The position of opening braces for type definitions.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.type": "ignore",

	// Place `while` in a `do`-`while` loop on a new line.
	"C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": false,

	// For empty function bodies, move closing braces to the same line as opening braces.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": false,

	// For empty types, move closing braces to the same line as opening braces.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": false,

	// Place opening and closing braces for scopes on separate lines.
	"C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": false,

	// A space is added after the closing parenthesis of a C-style cast.
	"C_Cpp.vcFormat.space.afterCastCloseParenthesis": false,

	// A space is added after every comma.
	"C_Cpp.vcFormat.space.afterComma": true,

	// A space is added between the keyword and opening parenthesis in control flow statements.
	"C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements": true,

	// Spaces around assignment operators.
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundAssignmentOperator": "insert",

	// Spaces around binary operators.
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundBinaryOperator": "insert",

	// Spaces around conditional operators.
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundTernaryOperator": "insert",

	// A space is added before the opening braces of scope blocks.
	"C_Cpp.vcFormat.space.beforeBlockOpenBrace": true,

	// A space is added before every comma.
	"C_Cpp.vcFormat.space.beforeComma": false,

	// A space is added before the colon in constructor definitions.
	"C_Cpp.vcFormat.space.beforeConstructorColon": true,

	// When square brackets are empty, a space is added before the opening bracket.
	"C_Cpp.vcFormat.space.beforeEmptySquareBrackets": false,

	// Spacing between function names and opening parentheses of argument lists.
	//  - insert: Add a space before the opening parenthesis of a function.
	//  - remove: Spaces before opening parenthesis of a function are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": "remove",

	// A space is added before the colon for inherited types in class definitions.
	"C_Cpp.vcFormat.space.beforeInheritanceColon": true,

	// A space is added before the opening brace of uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": false,

	// A space is added before the opening parenthesis of lambda argument lists.
	"C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": false,

	// A space is added before opening square brackets.
	"C_Cpp.vcFormat.space.beforeOpenSquareBracket": false,

	// When braces are empty and on the same line, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptyBraces": false,

	// When square brackets are empty, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": false,

	// When a function parameter list is empty, a space is inserted between its parentheses.
	"C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": false,

	// When square brackets are empty, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptySquareBrackets": false,

	// For multi-dimensional arrays, all space between brackets is removed. Other settings that control space are overridden.
	"C_Cpp.vcFormat.space.groupSquareBrackets": true,

	// A space is inserted after every semicolon.
	"C_Cpp.vcFormat.space.insertAfterSemicolon": false,

	// Spaces around pointer and reference operators.
	//  - left: Pointer and reference operators are aligned to the left.
	//  - center: Pointer and reference operators are centered.
	//  - right: Pointer and reference operators are aligned to the right.
	//  - ignore: Pointer and reference operators are not formatted.
	"C_Cpp.vcFormat.space.pointerReferenceAlignment": "left",

	// Spaces around commas are preserved inside uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.preserveInInitializerList": true,

	// Spaces around member access operators, pointer-to-member operators, and scope resolution operators are removed.
	"C_Cpp.vcFormat.space.removeAroundMemberOperators": true,

	// Spaces between unary operators and operands are removed.
	"C_Cpp.vcFormat.space.removeAroundUnaryOperator": true,

	// Spaces are removed before every semicolon.
	"C_Cpp.vcFormat.space.removeBeforeSemicolon": true,

	// A space is added after the opening parenthesis and also before the closing parenthesis of a C-style cast.
	"C_Cpp.vcFormat.space.withinCastParentheses": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis in control flow statements.
	"C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis of a parenthesized expression.
	"C_Cpp.vcFormat.space.withinExpressionParentheses": false,

	// A space is added after the opening brace and also before the closing brace of uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.withinInitializerListBraces": true,

	// A space is added after the opening square bracket and also before the closing square bracket.
	"C_Cpp.vcFormat.space.withinLambdaBrackets": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis in function parameter lists.
	"C_Cpp.vcFormat.space.withinParameterListParentheses": false,

	// A space is added after the opening square bracket and also before the closing square bracket.
	"C_Cpp.vcFormat.space.withinSquareBrackets": false,

	// Wrapping options for blocks.
	//  - oneLiners: A complete code block that is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
	//  - allOneLineScopes: Any code where the opening and closing brace is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
	//  - never: Code blocks are always formatted based on the values of the `C_Cpp.vcFormat.newLine.*` settings.
	"C_Cpp.vcFormat.wrap.preserveBlocks": "oneLiners",

	// Enable integration services for the [vcpkg dependency manager](https://aka.ms/vcpkg/).
	"C_Cpp.vcpkg.enabled": true,

	// Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values `highest`/`high`/`medium`/`low` correspond to approximately 100/75/50/25% CPU usage.
	"C_Cpp.workspaceParsingPriority": "highest",

	// The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked.
	"C_Cpp.workspaceSymbols": "Just My Code",

	// The base path of image url.You can use variable ${currentFileDir} and ${projectRoot}. ${currentFileDir} will be replace by the path of directory that contain current editing file. ${projectRoot} will be replace by path of the project opened in vscode. If you set basePath to empty String, it will insert absolute path to file.
	"pasteImage.basePath": "${currentFileDir}",

	// The default image file name. The value of this config will be pass to the 'format' function of moment library(a js time manipulation library), you can read document https://momentjs.com/docs/#/displaying/format/ for advanced usage.
	"pasteImage.defaultName": "Y-MM-DD-HH-mm-ss",

	// The string append to the image file name.How to encode image path before insert to editor. Support options: none, urlEncode, urlEncodeSpace
	"pasteImage.encodePath": "urlEncodeSpace",

	// Set the mode of file path confirm inputbox
	"pasteImage.filePathConfirmInputBoxMode": "fullPath",

	// Force set the file separator styel to unix style. If set false, separator styel will follow the system style.
	"pasteImage.forceUnixStyleSeparator": true,

	// The pattern of string that would be pasted to text.
	"pasteImage.insertPattern": "${imageSyntaxPrefix}${imageFilePath}${imageSyntaxSuffix}",

	// The string prepend to the image file name.
	"pasteImage.namePrefix": "",

	// The string append to the image file name.
	"pasteImage.nameSuffix": "",

	// The destination to save image file.You can use variable ${currentFileDir} and ${projectRoot}. ${currentFileDir} will be replace by the path of directory that contain current editing file. ${projectRoot} will be replace by path of the project opened in vscode.
	"pasteImage.path": "${currentFileDir}",

	// The string prepend to the resolved image path before paste.
	"pasteImage.prefix": "",

	// Set to true if you want to be able to change the file path or name prior to saving the file to disk
	"pasteImage.showFilePathConfirmInputBox": false,

	// The string append to the resolved image path before paste.
	"pasteImage.suffix": "",

	// List of characters the extension should track
	"gremlins.characters": {
		"2013": {
			"description": "en dash",
			"level": "warning"
		},
		"2018": {
			"description": "left single quotation mark",
			"level": "warning"
		},
		"2019": {
			"description": "right single quotation mark",
			"level": "warning"
		},
		"2029": {
			"zeroWidth": true,
			"description": "paragraph separator",
			"level": "error"
		},
		"0003": {
			"description": "end of text",
			"level": "warning"
		},
		"000b": {
			"description": "line tabulation",
			"level": "warning"
		},
		"00a0": {
			"description": "non breaking space",
			"level": "info"
		},
		"00ad": {
			"description": "soft hyphen",
			"level": "info"
		},
		"200b": {
			"zeroWidth": true,
			"description": "zero width space",
			"level": "error"
		},
		"200c": {
			"zeroWidth": true,
			"description": "zero width non-joiner",
			"level": "warning"
		},
		"200e": {
			"zeroWidth": true,
			"description": "left-to-right mark",
			"level": "error"
		},
		"201c": {
			"description": "left double quotation mark",
			"level": "warning"
		},
		"201d": {
			"description": "right double quotation mark",
			"level": "warning"
		},
		"202c": {
			"zeroWidth": true,
			"description": "pop directional formatting",
			"level": "error"
		},
		"202d": {
			"zeroWidth": true,
			"description": "left-to-right override",
			"level": "error"
		},
		"202e": {
			"zeroWidth": true,
			"description": "right-to-left override",
			"level": "error"
		},
		"fffc": {
			"zeroWidth": true,
			"description": "object replacement character",
			"level": "error"
		}
	},

	// Color for **error** level
	"gremlins.color_error": "rgba(169, 68, 66, .75)",

	// Color for **info** level
	"gremlins.color_info": "rgba(60, 118, 61, .75)",

	// Color for **warning** level
	"gremlins.color_warning": "rgba(138, 109, 59, .75)",

	// gutter icon size
	"gremlins.gutterIconSize": "75%",

	// Show gremlins in the problem pane
	"gremlins.showInProblemPane": false,

	// color activity bar background if regex match found
	"colorTabs.activityBarBackground": false,

	// list of regular expressions
	"colorTabs.config": [
		{
			"regex": ".*/web/.*"
		},
		{
			"regex": ".*/mobile/.*"
		}
	],

	// Ignores case on Regex matches
	"colorTabs.ignoreCase": false,

	// color status bar background if regex match found
	"colorTabs.statusBarBackground": true,

	// color tab border if regex match found
	"colorTabs.tabBorder": true,

	// color title bar background if regex match found
	"colorTabs.titleBackground": false,

	// append label to the title bar using the provided regex label 
	"colorTabs.titleLabel": false,

	// Select an icon pack that enables specific icons.
	//  - angular: Icons for Angular.
	//  - angular_ngrx: Icons for Angular and ngrx.
	//  - react: Icons for React.
	//  - react_redux: Icons for React and Redux.
	//  - vue: Icons for Vue.
	//  - vue_vuex: Icons for Vue and Vuex.
	//  - nest: Icons for NestJS.
	//  - none: No icon pack enabled.
	"material-icon-theme.activeIconPack": "angular",

	// Set custom file icon associations.
	"material-icon-theme.files.associations": {},

	// Set custom folder icon associations.
	"material-icon-theme.folders.associations": {},

	// Change the color of the folder icons.
	"material-icon-theme.folders.color": "#90a4ae",

	// Set the type for the folder icons.
	//  - specific: Select specific folder icons.
	//  - classic: Select classic folder icons.
	//  - none: No folder icons.
	"material-icon-theme.folders.theme": "specific",

	// Hide explorer arrows before folder.
	"material-icon-theme.hidesExplorerArrows": false,

	// Set custom language icon associations.
	"material-icon-theme.languages.associations": {},

	// Change the opacity of the icons.
	"material-icon-theme.opacity": 1,

	// Change the saturation of the icons.
	"material-icon-theme.saturation": 1,

	// Show restart notification.
	"material-icon-theme.showReloadMessage": true,

	// Show the update message after each update.
	"material-icon-theme.showUpdateMessage": false,

	// Show the welcome message after first installation.
	"material-icon-theme.showWelcomeMessage": true,

	// List of ssl certificates for hosts
	"thunder-client.certificates": [],

	// Code Snippet Language user choice, This value is automatically set by extension e.g: `js-fetch`
	"thunder-client.codeSnippetLanguage": "",

	// Enter full folder path to store collections data, `Suitable for storing all data in one location`. Also supports home folder `$HOME/path`
	"thunder-client.customLocation": "",

	// Comma separated Host names to exclude from proxy e.g: `abc.com,xyz.com`
	"thunder-client.excludeProxyHostList": "",

	// Follow Redirects when running Requests
	"thunder-client.followRedirects": true,

	// Http Version for making the request, default is HTTP/1.1
	"thunder-client.httpVersion": "HTTP/1.1",

	// Collections data will load automatically from current open workspace folder, `Suitable for Teams with multiple projects`. The tests folder `thunder-tests` will be created at the root
	"thunder-client.loadFromProject": false,

	// Show Requests executed from collection in Activity Tab
	"thunder-client.showActivityFromCollection": false,

	// Relative path to the current workspace folder, where you like to save tests, `Load From Project` option should be enabled. The tests folder `thunder-tests` will be created here
	"thunder-client.workspaceRelativePath": "",

	// Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https://developers.redhat.com/article/tool-data-collection).
	"redhat.telemetry.enabled": null,

	// Enable/disable completion feature
	"yaml.completion": true,

	// Custom tags for the parser to use
	"yaml.customTags": [],

	// Globally set additionalProperties to false for all objects. So if its true, no extra properties are allowed inside yaml.
	"yaml.disableAdditionalProperties": false,

	// Disable adding not required properties with default values into completion text.
	"yaml.disableDefaultProperties": false,

	// Print spaces between brackets in objects
	"yaml.format.bracketSpacing": true,

	// Enable/disable default YAML formatter
	"yaml.format.enable": true,

	// Specify the line length that the printer will wrap on
	"yaml.format.printWidth": 80,

	// Always: wrap prose if it exeeds the print width, Never: never wrap the prose, Preserve: wrap prose as-is
	"yaml.format.proseWrap": "preserve",

	// Use single quotes instead of double quotes
	"yaml.format.singleQuote": false,

	// Enable/disable hover feature
	"yaml.hover": true,

	// The maximum number of outline symbols and folding regions computed (limited for performance reasons).
	"yaml.maxItemsComputed": 5000,

	// Associate schemas to YAML files in the current workspace
	"yaml.schemas": {},

	// Automatically pull available YAML schemas from JSON Schema Store
	"yaml.schemaStore.enable": true,

	// URL of schema store catalog to use
	"yaml.schemaStore.url": "https://www.schemastore.org/api/json/catalog.json",

	// Traces the communication between VSCode and the YAML language service.
	"yaml.trace.server": "off",

	// Enable/disable validation feature
	"yaml.validate": true,

	// Default YAML spec version
	"yaml.yamlVersion": "1.2",

	// Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
	// 
	//  Examples : 
	// chrome --incognito --headless --remote-debugging-port=9222 
	//  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
	"liveServer.settings.AdvanceCustomBrowserCmdLine": null,

	// Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
	//  NOTE: You have to install 'Debugger for Chrome' 
	// If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging. 
	// 
	//  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
	"liveServer.settings.ChromeDebuggingAttachment": false,

	// Specify custom browser settings for Live Server. 
	// By Default it will open your default favorite browser.
	"liveServer.settings.CustomBrowser": null,

	// To disable information pop up messages.
	"liveServer.settings.donotShowInfoMsg": false,

	// To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
	"liveServer.settings.donotVerifyTags": false,

	// When set, serve this file (server root relative) for every 404 (useful for single-page applications)
	"liveServer.settings.file": "",

	// By Default Live Server inject CSS changes without full reloading of browser. You can change this behavior by making this setting as `true`
	"liveServer.settings.fullReload": false,

	// To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
	"liveServer.settings.host": "127.0.0.1",

	// Setup https configuration
	"liveServer.settings.https": {
		"enable": false,
		"cert": "",
		"key": "",
		"passphrase": ""
	},

	// To ignore specific file changes
	"liveServer.settings.ignoreFiles": [
		".vscode/**",
		"**/*.scss",
		"**/*.sass",
		"**/*.ts"
	],

	// Mount a directory to a route. Such as [['/components', './node_modules']]
	"liveServer.settings.mount": [],

	// This the entry point of server when you're in multiroot workspace
	"liveServer.settings.multiRootWorkspaceName": null,

	// If it is true live server will start without browser opened.
	"liveServer.settings.NoBrowser": false,

	// Set Custom Port Number of Live Server. Set 0 if you want random port.
	"liveServer.settings.port": 5500,

	// To Setup Proxy
	"liveServer.settings.proxy": {
		"enable": false,
		"baseUri": "/",
		"proxyUri": "http://127.0.0.1:80"
	},

	// Set Custom root of Live Server. 
	// To change root the the server to sub folder of workspace, use '/' and relative path from workspace. 
	// Example: /subfolder1/subfolder2
	"liveServer.settings.root": "/",

	// Change this to false if you don't want the button to show in the statusbar
	"liveServer.settings.showOnStatusbar": true,

	// Open in Browser Preview inside VS Code, instead of default browser
	"liveServer.settings.useBrowserPreview": false,

	// Use local IP as host
	"liveServer.settings.useLocalIp": false,

	// You have to install a browser extension. That will be works for your dynamic pages (like PHP).
	"liveServer.settings.useWebExt": false,

	// Delay before live reloading. Value in milliseconds. Default is 100
	"liveServer.settings.wait": 100,

	// Specifies the directory containing workspace related code actions.
	"javascriptBooster.codemodDir": "codemods",

	// Specifies formatting options that will be used for newly generated code. Only the code fragment affected by a chosen code action is reformatted.
	"javascriptBooster.formattingOptions": {},

	// Controls the amount of information in the output log. Switching to verbose will also show performance metrics.
	"javascriptBooster.logLevel": "info",

	// Specifies the fallback command that should be executed if the file is not supported by smart selection.
	"javascriptBooster.smartExtendFallbackCommand": "editor.action.smartSelect.grow",

	// Specifies the fallback command that should be executed if the file is not supported by smart selection.
	"javascriptBooster.smartShrinkFallbackCommand": "editor.action.smartSelect.shrink",

	// Set it true to Auto Download the settings on code start. [Code Restart Required]
	"sync.autoDownload": false,

	// Set it true to Auto Upload on the settings change. [Code Restart Required]
	"sync.autoUpload": false,

	// Set it to true if you want to download the settings even when you have the latest settings.
	"sync.forceDownload": false,

	// Set it to true if you want to upload the settings even when the GIST has newer settings.
	"sync.forceUpload": false,

	// GitHub GIST ID for Settings Sync.
	"sync.gist": "",

	// When set to true, will show the result in status bar instead of summary page.
	"sync.quietSync": false,

	// Set it to false if you don't want to remove extensions while downloading.
	"sync.removeExtensions": true,

	// Set it to false if you don't want to upload/download the extensions.
	"sync.syncExtensions": true,

	// Controls the background color of the trailing space decoration.
	"trailing-spaces.backgroundColor": "rgba(255,0,0,0.3)",

	// Controls the color of the border around the trailing space decoration.
	"trailing-spaces.borderColor": "rgba(255,100,100,0.15)",

	// By default, trailing spaces are deleted within the whole document. Set to true to affect only the lines you edited since last save. Trailing spaces will still be searched for and highlighted in the whole document.
	"trailing-spaces.deleteModifiedLinesOnly": false,

	// By default, the line being currently edited will have its trailing spaces highlighted. Set to false to ignore trailing spaces on the edited line.
	"trailing-spaces.highlightCurrentLine": true,

	// By default, empty lines are cleared as well when calling the deletion command. Set to false to ignore empty lines upon deletion.
	"trailing-spaces.includeEmptyLines": true,

	// By default, Trailing Spaces is "live". It means the trailing spaces regions will be matched in the background, and highlighted if a color scope is defined, when the document is opened and edited. Set to false to disable live matching and highlighting (the deletion command remains available, so-called "lazy matching").
	"trailing-spaces.liveMatching": true,

	// Controls the verbosity of logging. Logs can be seen in the console by opening the dev tools. `log` is the most verbose and `error` will only show critical errors.
	"trailing-spaces.logLevel": "warn",

	// By default, only simple spaces and tabs are matched as "trailing spaces".
	"trailing-spaces.regexp": "[ \t]+",

	// With this option you can ignore specific schemes. An item has to match the case-sensitive string of the scheme of the document.
	"trailing-spaces.schemeIgnore": [
		"output"
	],

	// By default, trailing space deletions will be communicated through a status bar message. Set to false to disable these messages.
	"trailing-spaces.showStatusBarMessage": true,

	// With this option you can ignore specific files based on the syntax used. An item has to match the case-sensitive string of the language used in the file.
	"trailing-spaces.syntaxIgnore": [],

	// Controls whether trailing spaces are trimmed automatically when saving a file.
	"trailing-spaces.trimOnSave": false,

	// Qiniu AccessKey
	"markdown-preview-enhanced.AccessKey": "",

	// Automatically show preview of markdown being edited.
	"markdown-preview-enhanced.automaticallyShowPreviewOfMarkdownBeingEdited": false,

	// In Markdown, a single newline character doesn't cause a line break in the generated HTML. In GitHub Flavored Markdown, that is not true. Enable this config option to insert line breaks in rendered HTML for single newlines in Markdown source.
	"markdown-preview-enhanced.breakOnSingleNewLine": true,

	// Qiniu Bucket
	"markdown-preview-enhanced.Bucket": "",

	// Chrome executable path, which is used for Puppeteer export. Leaving it empty means the path will be found automatically.
	"markdown-preview-enhanced.chromePath": "",

	// Code block theme. If `auto.css` is chosen, then the code block theme that best matches the current preview theme will be picked.
	"markdown-preview-enhanced.codeBlockTheme": "auto.css",

	// The configuration directory path. Leave it empty to use '~/.mume' as the config path. Please reload vscode to take effect.
	"markdown-preview-enhanced.configPath": "",

	// Qiniu Domain
	"markdown-preview-enhanced.Domain": "http://",

	// Enable CriticMarkup syntax. Only works with markdown-it parser. Please check http://criticmarkup.com/users-guide.php for more information.
	"markdown-preview-enhanced.enableCriticMarkupSyntax": false,

	// Enable emoji & font-awesome plugin. This only works for markdown-it parser, but not pandoc parser.
	"markdown-preview-enhanced.enableEmojiSyntax": true,

	// Enable extended table syntax to support merging table cells.
	"markdown-preview-enhanced.enableExtendedTableSyntax": false,

	//  Enables transform audio video link to to html5 embed audio video tags.
	"markdown-preview-enhanced.enableHTML5Embed": false,

	// Enable or disable conversion of URL-like text to links in the markdown preview.
	"markdown-preview-enhanced.enableLinkify": true,

	// Enables executing code chunks and importing javascript files.
	// ⚠️ Please use this feature with caution because it may put your security at risk! Your machine can get hacked if someone makes you open a markdown with malicious code while script execution is enabled.
	"markdown-preview-enhanced.enableScriptExecution": false,

	// Enable smartypants and other sweet transforms.
	"markdown-preview-enhanced.enableTypographer": false,

	// Enable Wiki Link syntax support. More information can be found at https://help.github.com/articles/adding-links-to-wikis/
	"markdown-preview-enhanced.enableWikiLinkSyntax": true,

	// Front matter rendering option
	"markdown-preview-enhanced.frontMatterRenderingOption": "none",

	// HTML attributes to pass to audio tags.
	"markdown-preview-enhanced.HTML5EmbedAudioAttributes": "controls preload=\"metadata\" width=\"320\"",

	// When true embed media with http:// schema in URLs. When false ignore and don't embed them.
	"markdown-preview-enhanced.HTML5EmbedIsAllowedHttp": false,

	//  Enables video/audio embed with ![]() syntax (default).
	"markdown-preview-enhanced.HTML5EmbedUseImageSyntax": true,

	// Enables video/audio embed with []() syntax.
	"markdown-preview-enhanced.HTML5EmbedUseLinkSyntax": false,

	// HTML attributes to pass to video tags.
	"markdown-preview-enhanced.HTML5EmbedVideoAttributes": "controls preload=\"metadata\" width=\"320\" height=\"240\"",

	// When using Image Helper to copy images, by default images will be copied to root image folder path '/assets'
	"markdown-preview-enhanced.imageFolderPath": "/assets",

	// ImageMagick command line path. Should be either `magick` or `convert`. Leaving it empty means the path will be found automatically.
	"markdown-preview-enhanced.imageMagickPath": "",

	// You can choose different image uploader to upload image
	"markdown-preview-enhanced.imageUploader": "imgur",

	// Default latex engine for Pandoc export and latex code chunk.
	"markdown-preview-enhanced.latexEngine": "pdflatex",

	// Re-render the preview as the contents of the source changes, without requiring the source buffer to be saved. If disabled, the preview is re-rendered only when the buffer is saved to disk.
	"markdown-preview-enhanced.liveUpdate": true,

	// Use customized Math expression block delimiters.
	"markdown-preview-enhanced.mathBlockDelimiters": [
		[
			"$$",
			"$$"
		],
		[
			"\\[",
			"\\]"
		]
	],

	// Use customized Math expression inline delimiters.
	"markdown-preview-enhanced.mathInlineDelimiters": [
		[
			"$",
			"$"
		],
		[
			"\\(",
			"\\)"
		]
	],

	// Choose the Math expression rendering method option for GFM markdown export (Save as Markdown).
	"markdown-preview-enhanced.mathRenderingOnlineService": "https://latex.codecogs.com/gif.latex",

	// Choose the Math expression rendering method here. You can also disable math rendering if you want by choosing 'None'.
	"markdown-preview-enhanced.mathRenderingOption": "KaTeX",

	// Mermaid theme, you can choose one from ["mermaid.css", "mermaid.dark.css", "mermaid.forest.css"]
	"markdown-preview-enhanced.mermaidTheme": "default",

	// Args passed to pandoc command e.g. ["--smart", "--filter=/bin/exe"] Please use long argument names.
	"markdown-preview-enhanced.pandocArguments": [],

	// The pandoc markdown flavor you want
	"markdown-preview-enhanced.pandocMarkdownFlavor": "markdown-raw_tex+tex_math_single_backslash",

	// Pandoc executable path
	"markdown-preview-enhanced.pandocPath": "pandoc",

	// Render using PlantUML server instead of binary. Leave it empty to use the builtin plantuml.jar binary (`java` is required in system path). Eg: "http://localhost:8080/svg/"
	"markdown-preview-enhanced.plantumlServer": "",

	// Preview Theme
	"markdown-preview-enhanced.previewTheme": "github-light.css",

	// Whether to print background for file export or not. If set to `false`, then `github-light` preview theme will be used. You can also set `print_background` in front-matter for individual files.
	"markdown-preview-enhanced.printBackground": false,

	// Accepted protocols for links.
	"markdown-preview-enhanced.protocolsWhiteList": "http://, https://, atom://, file://, mailto:, tel:",

	// Args passed to puppeteer.launch({args: $puppeteerArgs})
	"markdown-preview-enhanced.puppeteerArgs": [],

	// Puppeteer waits for a certain timeout in milliseconds before the document export.
	"markdown-preview-enhanced.puppeteerWaitForTimeout": 0,

	// RevealJS Presentation Theme
	"markdown-preview-enhanced.revealjsTheme": "white.css",

	// Automatic scroll sync. This is now partially supported.
	"markdown-preview-enhanced.scrollSync": true,

	// Qiniu SecretKey
	"markdown-preview-enhanced.SecretKey": "",

	// Open Only One Preview.
	"markdown-preview-enhanced.singlePreview": true,

	// If checked, we use GitHub style piped wiki links, i.e. [[linkText|wikiLink]]. Otherwise, we use [[wikiLink|linkText]] as the original Wikipedia style.
	"markdown-preview-enhanced.useGitHubStylePipedLink": true,

	// Enable this option will render markdown by pandoc instead of markdown-it.
	"markdown-preview-enhanced.usePandocParser": false,

	// If set to true, then locally installed puppeteer-core will be required. Otherwise, the puppeteer globally installed by `npm install -g puppeteer` will be required.
	"markdown-preview-enhanced.usePuppeteerCore": true,

	// By default, the extension for wikilink is `.md`. For example: [[test]] will direct to file path `test.md`.
	"markdown-preview-enhanced.wikiLinkFileExtension": ".md",

	// Enable / Disable allowing word compounds. `true` means `arraylength` would be ok, `false` means it would not pass.
	"cSpell.allowCompoundWords": false,

	// Control which file schemas will be checked for spelling (VS Code must be restarted for this setting to take effect).
	"cSpell.allowedSchemas": [
		"file",
		"gist",
		"sftp",
		"untitled",
		"vscode-notebook-cell"
	],

	// The maximum average length of chunks of text without word breaks.
	// 
	// A chunk is the characters between absolute word breaks.
	// Absolute word breaks match: `/[\s,{}[\]]/`
	// 
	// **Error Message:** _Average Word Size is Too High._
	// 
	// If you are seeing this message, it means that the file contains mostly long lines
	// without many word breaks.
	"cSpell.blockCheckingWhenAverageChunkSizeGreaterThan": 80,

	// The maximum line length.
	// 
	// Block spell checking if lines are longer than the value given.
	// This is used to prevent spell checking generated files.
	// 
	// **Error Message:** _Lines are too long._
	"cSpell.blockCheckingWhenLineLengthGreaterThan": 10000,

	// The maximum length of a chunk of text without word breaks.
	// 
	// It is used to prevent spell checking of generated files.
	// 
	// A chunk is the characters between absolute word breaks.
	// Absolute word breaks match: `/[\s,{}[\]]/`, i.e. spaces or braces.
	// 
	// **Error Message:** _Maximum Word Length is Too High._
	// 
	// If you are seeing this message, it means that the file contains a very long line
	// without many word breaks.
	"cSpell.blockCheckingWhenTextChunkSizeGreaterThan": 500,

	// Determines if words must match case and accent rules.
	// 
	// - `false` - Case is ignored and accents can be missing on the entire word.   Incorrect accents or partially missing accents will be marked as incorrect.
	// - `true` - Case and accents are enforced.
	"cSpell.caseSensitive": false,

	// The limit in K-Characters to be checked in a file.
	"cSpell.checkLimit": 500,

	// Define custom dictionaries to be included by default.
	// If `addWords` is `true` words will be added to this dictionary.
	// 
	// **Example:**
	// 
	// ```js
	// "cSpell.customDictionaries": {
	//   "project-words": {
	//     "name": "project-words",
	//     "path": "${workspaceRoot}/project-words.txt",
	//     "description": "Words used in this project",
	//     "addWords": true
	//   },
	//   "custom": true, // Enable the `custom` dictionary
	//   "internal-terms": false // Disable the `internal-terms` dictionary
	// }
	// ```
	"cSpell.customDictionaries": {},

	// - Use `customDictionaries` instead.
	// Define custom dictionaries to be included by default for the folder.
	// If `addWords` is `true` words will be added to this dictionary.
	"cSpell.customFolderDictionaries": [],

	// - Use `customDictionaries` instead.
	// Define custom dictionaries to be included by default for the user.
	// If `addWords` is `true` words will be added to this dictionary.
	"cSpell.customUserDictionaries": [],

	// - Use `customDictionaries` instead.
	// Define custom dictionaries to be included by default for the workspace.
	// If `addWords` is `true` words will be added to this dictionary.
	"cSpell.customWorkspaceDictionaries": [],

	// Issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of squiggle.
	//  - Error: Report Spelling Issues as Errors
	//  - Warning: Report Spelling Issues as Warnings
	//  - Information: Report Spelling Issues as Information
	//  - Hint: Report Spelling Issues as Hints, will not show up in Problems
	"cSpell.diagnosticLevel": "Information",

	// Optional list of dictionaries to use. Each entry should match the name of the dictionary. To remove a dictionary from the list add `!` before the name. i.e. `!typescript` will turn off the dictionary with the name `typescript`.
	"cSpell.dictionaries": [],

	// Define additional available dictionaries.
	"cSpell.dictionaryDefinitions": [],

	// Enable / Disable the spell checker.
	"cSpell.enabled": true,

	// Specify file types to spell check. Use `cSpell.enableFiletypes` to Enable / Disable checking files types.
	"cSpell.enabledLanguageIds": [
		"asciidoc",
		"c",
		"cpp",
		"csharp",
		"css",
		"git-commit",
		"go",
		"graphql",
		"handlebars",
		"haskell",
		"html",
		"jade",
		"java",
		"javascript",
		"javascriptreact",
		"json",
		"jsonc",
		"jupyter",
		"latex",
		"less",
		"markdown",
		"php",
		"plaintext",
		"python",
		"pug",
		"restructuredtext",
		"rust",
		"scala",
		"scss",
		"swift",
		"text",
		"typescript",
		"typescriptreact",
		"vue",
		"yaml",
		"yml"
	],

	// Enable / Disable checking file types (languageIds).
	// These are in additional to the file types specified by `cSpell.enabledLanguageIds`.
	// To disable a language, prefix with `!` as in `!json`,
	// 
	// Example:
	// ```
	// jsonc       // enable checking for jsonc
	// !json       // disable checking for json
	// kotlin      // enable checking for kotlin
	// ```
	"cSpell.enableFiletypes": [],

	// Show Regular Expression Explorer
	"cSpell.experimental.enableRegexpView": false,

	// Glob patterns of files to be checked. Glob patterns are relative to the `globRoot` of the configuration file that defines them.
	"cSpell.files": [],

	// Use Rename when fixing spelling issues.
	"cSpell.fixSpellingWithRenameProvider": true,

	// List of words to always be considered incorrect.
	"cSpell.flagWords": [],

	// The root to use for glop patterns found in this configuration. Default: The current workspace folder. Use `globRoot` to define a different location. `globRoot` can be relative to the location of this configuration file. Defining globRoot, does not impact imported configurations.
	// 
	// Special Values:
	// 
	// - `${workspaceFolder}` - Default - globs will be relative to the current workspace folder\n
	// - `${workspaceFolder:<name>}` - Where `<name>` is the name of the workspace folder.
	"cSpell.globRoot": "",

	// Glob patterns of files to be ignored. The patterns are relative to the `globRoot` of the configuration file that defines them.
	"cSpell.ignorePaths": [
		"package-lock.json",
		"node_modules",
		"vscode-extension",
		".git/objects",
		".vscode",
		".vscode-insiders"
	],

	// List of RegExp patterns or Pattern names to exclude from spell checking.
	// 
	// Example: ["href"] - to exclude html href.
	"cSpell.ignoreRegExpList": [],

	// A list of words to be ignored by the spell checker.
	"cSpell.ignoreWords": [],

	// Other settings files to be included.
	"cSpell.import": [],

	// List of RegExp patterns or defined Pattern names to define the text to be included for spell checking. If includeRegExpList is defined, ONLY, text matching the included patterns will be checked.
	"cSpell.includeRegExpList": [],

	// Current active spelling language.
	// Example: "en-GB" for British English
	// Example: "en,nl" to enable both English and Dutch
	"cSpell.language": "en",

	// Additional settings for individual programming languages and locales.
	"cSpell.languageSettings": [],

	// Set the Debug Level for logging messages.
	//  - None: Do not log
	//  - Error: Log only errors
	//  - Warning: Log errors and warnings
	//  - Information: Log errors, warnings, and info
	//  - Debug: Log everything (noisy)
	"cSpell.logLevel": "Error",

	// The maximum number of times the same word can be flagged as an error in a file.
	"cSpell.maxDuplicateProblems": 5,

	// Controls the maximum number of spelling errors per document.
	"cSpell.maxNumberOfProblems": 100,

	// The minimum length of a word before checking it against a dictionary.
	"cSpell.minWordLength": 4,

	// Prevents searching for local configuration when checking individual documents.
	"cSpell.noConfigSearch": false,

	// Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.
	// 
	// Note: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.
	"cSpell.noSuggestDictionaries": [],

	// Controls the number of suggestions shown.
	"cSpell.numSuggestions": 8,

	// Overrides to apply based upon the file path.
	"cSpell.overrides": [],

	// Defines a list of patterns that can be used in ignoreRegExpList and includeRegExpList.
	"cSpell.patterns": [],

	// Show CSpell in-document directives as you type.
	"cSpell.showAutocompleteSuggestions": false,

	// Show Spell Checker actions in Editor Context Menu
	"cSpell.showCommandsInEditorContextMenu": true,

	// Display the spell checker status on the status bar.
	"cSpell.showStatus": true,

	// The side of the status bar to display the spell checker status.
	//  - Left: Left Side of Statusbar
	//  - Right: Right Side of Statusbar
	"cSpell.showStatusAlignment": "Right",

	// Delay in ms after a document has changed before checking it for spelling errors.
	"cSpell.spellCheckDelayMs": 50,

	// Only spell check files that are in the currently open workspace.
	// This same effect can be achieved using the `files` setting.
	// 
	// ```
	// "cSpell.files": ["**", "**​/.*", "**​/.*​/**"]
	// ```
	"cSpell.spellCheckOnlyWorkspaceFiles": false,

	// The type of menu used to display spelling suggestions.
	//  - quickPick: Suggestions will appear as a drop down at the top of the IDE. (Best choice for Vim Key Bindings)
	//  - quickFix: Suggestions will appear inline near the word, inside the text editor.
	"cSpell.suggestionMenuType": "quickPick",

	// The maximum number of changes allowed on a word to be considered a suggestions.
	// 
	// For example, appending an `s` onto `example` -> `examples` is considered 1 change.
	// 
	// Range: between 1 and 5.
	"cSpell.suggestionNumChanges": 3,

	// The maximum amount of time in milliseconds to generate suggestions for a word.
	"cSpell.suggestionsTimeout": 400,

	// Tells the spell checker to load `.gitignore` files and skip files that match the globs in the `.gitignore` files found.
	"cSpell.useGitignore": true,

	// Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading packages stored in the repository.
	// 
	// When true, the spell checker will search up the directory structure for the existence of a PnP file and load it.
	"cSpell.usePnP": false,

	// Words to add to global dictionary -- should only be in the user config file.
	"cSpell.userWords": [],

	// List of words to be always considered correct.
	"cSpell.words": [],

	// Define the path to the workspace root folder in a multi-root workspace.
	// By default it is the first folder.
	// 
	// This is used to find the `cspell.json` file for the workspace.
	// 
	// Example: use the `client` folder
	// ```
	// ${workspaceFolder:client}
	// ```
	"cSpell.workspaceRootPath": "",

	// Number of allowed consecutive empty lines.
	"remove-empty-lines.allowedNumberOfEmptyLines": 0,

	// Specifies a custom location to use when discovering tours.
	"codetour.customTourDirectory": null,

	// Specifies whether or not to display a notification when opening a workspace with tours for the first time.
	"codetour.promptForWorkspaceTours": true,

	// Specifies how the tour recorder will behave when capturing a new step.
	"codetour.recordMode": "lineNumber",

	// Specifies whether or not to show tour markers in the editor gutter.
	"codetour.showMarkers": true,

	// Use sucrase as transpiler
	"mdx-preview.build.useSucraseTranspiler": false,

	// Path of custom layout file to use
	"mdx-preview.preview.mdx.customLayoutFilePath": "",

	// If set to true, previews on file change; If set to false, previews on file save
	"mdx-preview.preview.previewOnChange": true,

	// Security policy settings
	//  - strict: Do not allow insecure content or eval
	//  - disabled: Allow insecure content (not recommended)
	"mdx-preview.preview.security": "strict",

	// Use VSCode Markdown Stylings
	"mdx-preview.preview.useVscodeMarkdownStyles": true,

	// Use white background regardless of current theme settings
	"mdx-preview.preview.useWhiteBackground": false,

	// Specifies whether or not to create the component as a module
	"createReactComponent.createModule": "true",

	// Specifies the extension type of files: .ie 'withX' would create 'MyComponent.tsx' or 'MyComponent.jsx'. 'withoutX' would create 'MyComponent.ts' or 'MyComponent.js' files
	"createReactComponent.fileExtension": "withX",

	// Specifies whether to use a normal function or function expression for the component
	//  - function: Generate functions
	//  - expression: Generate function expressions
	"createReactComponent.functionType": "function",

	// Specifies what language to generate the component
	//  - typescript: Generates component in typescript
	//  - javascript: Generates component in javascript
	"createReactComponent.language": "typescript",

	// Specifies what files to open after generating the component
	//  - component: Open component file
	//  - test: Open test file
	//  - index: Open index file
	"createReactComponent.openFiles": [
		"component"
	],

	// Specifies what testing library to use
	//  - react-testing-library: Generate tests that use react-testing-library
	//  - enzyme: Generate tests that use enzyme
	"createReactComponent.testingLibrary": "react-testing-library",

	// Specifies whether or not to generate cleanup when using react-testing-library
	"createReactComponent.testingLibrary.cleanup": "false",

	// Whether to exclude files from auto-completion using VS Code's `search.exclude` setting. (`node_modules`, `bower_components` and `*.code-search` are **always excluded**, not affected by this option.)
	"markdown.extension.completion.respectVscodeSearchExclude": true,

	// The root folder for path auto-completion.
	"markdown.extension.completion.root": "",

	// Use `*` or `_` to wrap italic text.
	"markdown.extension.italic.indicator": "*",

	// User-defined KaTeX macros.
	"markdown.extension.katex.macros": {},

	// List indentation scheme. (Also affects TOC generation.)
	// 
	// Whether to use different indentation sizes on different list contexts or stick to VS Code's tab size.
	//  - adaptive: Adaptive indentation size according to the context, trying to **left align the sublist with its parent's content**. For example:
	// 
	// ```markdown
	// - Parent
	//   - Sublist
	// 
	// 1. Parent
	//    1. Sublist
	// 
	// 10. Parent with longer marker
	//     1. Sublist
	// ```
	//  - inherit: Use the configured tab size of the current document (see the status bar). For example (with `tabSize: 4`):
	// 
	// ```markdown
	// - Parent
	//     - Sublist
	// 
	// 1. Parent
	//     1. Sublist
	// 
	// 10. Parent with longer marker
	//     1. Sublist
	// ```
	"markdown.extension.list.indentationSize": "adaptive",

	// Enable basic math support (Powered by KaTeX).
	"markdown.extension.math.enabled": true,

	// Auto fix ordered list markers.
	"markdown.extension.orderedList.autoRenumber": true,

	// Ordered list marker.
	//  - one: Always use `1.` as ordered list marker.
	//  - ordered: Use increasing numbers as ordered list marker.
	"markdown.extension.orderedList.marker": "ordered",

	// Auto show preview to side.
	"markdown.extension.preview.autoShowPreviewToSide": false,

	// Convert image path to absolute path.
	"markdown.extension.print.absoluteImgPath": true,

	// Convert images to base64 when printing to HTML.
	"markdown.extension.print.imgToBase64": false,

	// Include VS Code's basic Markdown styles so that the exported HTML looks similar as inside VS Code.
	"markdown.extension.print.includeVscodeStylesheets": true,

	// Print current document to HTML when file is saved.
	"markdown.extension.print.onFileSave": false,

	// Theme of the exported HTML. Only affects code blocks.
	"markdown.extension.print.theme": "light",

	// Enable/disable URL validation when printing.
	"markdown.extension.print.validateUrls": true,

	// If a file is larger than this size (in byte/B), we won't attempt to render syntax decorations.
	"markdown.extension.syntax.decorationFileSizeLimit": 50000,

	// Add syntax decorations in editors. (e.g. ~~strikethrough~~, `code span`)
	"markdown.extension.syntax.decorations": true,

	// (**Experimental**) Report issue at <https://github.com/yzhang-gh/vscode-markdown/issues/185>.
	// 
	// Only take effect when `markdown.extension.syntax.decorations` is enabled.
	"markdown.extension.syntax.plainTheme": false,

	// Enable [GitHub Flavored Markdown](https://github.github.com/gfm/) table formatter.
	"markdown.extension.tableFormatter.enabled": true,

	// Normalize table indentation to closest multiple of configured editor tab size.
	"markdown.extension.tableFormatter.normalizeIndentation": false,

	// Whether to **force** to downcase TOC links.
	"markdown.extension.toc.downcaseLink": true,

	// Range of levels for table of contents. Use `x..y` for level `x` to `y`.
	"markdown.extension.toc.levels": "1..6",

	// Lists of headings to omit by project file.
	// Example:
	// { "README.md": ["# Introduction"] }
	"markdown.extension.toc.omittedFromToc": {},

	// Use ordered list, that is:
	// 1. ...
	// 2. ...
	"markdown.extension.toc.orderedList": false,

	// Just plain text TOC, no links.
	"markdown.extension.toc.plaintext": false,

	// The method to generate heading ID. This affects **links to headings** in **TOC**, **code completion**, and **printing**.
	//  - github: GitHub
	//  - azureDevops: Azure DevOps
	//  - gitea: Gitea
	//  - gitlab: GitLab
	//  - vscode: Visual Studio Code
	"markdown.extension.toc.slugifyMode": "github",

	// Use `-`, `*`, or `+` in the table of contents (for **unordered** list).
	"markdown.extension.toc.unorderedList.marker": "-",

	// Auto update TOC on save.
	"markdown.extension.toc.updateOnSave": true,

	// Save images to which folder when upload in markdown, default relative to the markdown file, you can set to project root via `${projectRoot}/assets`.
	"markdown-editor.imageSaveFolder": "assets",

	// Use vscode theme's background color as the markdown editor's background color.
	"markdown-editor.useVscodeThemeColor": true,

	// Instead of `prop={true}`, use `prop`
	"convert-object-to-jsx.useJsxShorthand": false,

}
